{
  "version": 3,
  "sources": ["../../../../client/src/game/territories.js"],
  "sourcesContent": ["import * as PIXI from 'pixi.js-legacy'\nimport * as Voronoi from 'voronoi'\nimport gameHelper from '../services/gameHelper'\n\nclass Territories {\n\n  static zoomLevel = 100\n  static maxVoronoiDistance = 200\n\n  constructor() {\n    this.container = new PIXI.Container()\n\n    this.zoomPercent = 0\n  }\n\n  setup(game, userSettings) {\n    this.game = game\n\n    Territories.zoomLevel = userSettings.map.zoomLevels.territories\n  }\n\n  draw(userSettings) {\n    this.container.removeChildren()\n\n    if (!this.game.galaxy.stars || !this.game.galaxy.stars.length) {\n      return; //No territories if we have no stars\n    }\n\n    switch (userSettings.map.territoryStyle) {\n      case 'marching-square':\n        this._drawTerritoriesMarchingCube(userSettings)\n        break;\n      case 'voronoi':\n        this._drawTerritoriesVoronoi(userSettings)\n        break;\n    }\n\n    this.refreshZoom(this.zoomPercent || 0)\n  }\n\n  _drawTerritoriesMarchingCube(userSettings) {\n    this.container.alpha = 1\n\n    const CELL_SIZE = 5 * userSettings.map.marchingSquareGridSize\n    const METABALL_RADIUS = 20 * userSettings.map.marchingSquareTerritorySize\n    const LINE_PROPORTION = (1 / 16) * userSettings.map.marchingSquareBorderWidth\n    const LINE_WIDTH = CELL_SIZE * LINE_PROPORTION\n    const LINE_OFFSET = LINE_PROPORTION / 2\n\n    // enum\n    const ACTION_COMBINE = 1\n    const ACTION_NEW = 2\n    const ACTION_SKIP = 0\n\n    const ACTION_INDEX = 0\n    const LINES_INDEX = 1\n    const POLYGON_INEDX = 2\n    const VERTEX_TABLE = [\n      [ACTION_SKIP, [], []],\n      [ACTION_NEW, [{ x: 0, y: 0.5 + LINE_OFFSET }, { x: 0.5 - LINE_OFFSET, y: 1 }],\n        [{ x: 0, y: 0.5 + LINE_OFFSET }, { x: 0.5 - LINE_OFFSET, y: 1 }, { x: 0, y: 1 }]\n      ],\n      [ACTION_NEW, [{ x: 1, y: 0.5 + LINE_OFFSET }, { x: 0.5 + LINE_OFFSET, y: 1 }],\n        [{ x: 1, y: 0.5 + LINE_OFFSET }, { x: 0.5 + LINE_OFFSET, y: 1 }, { x: 1, y: 1 }]\n      ],\n      [ACTION_NEW, [{ x: 1, y: 0.5 + LINE_OFFSET }, { x: 0, y: 0.5 + LINE_OFFSET }],\n        [{ x: 1, y: 0.5 + LINE_OFFSET }, { x: 0, y: 0.5 + LINE_OFFSET }, { x: 0, y: 1 }, { x: 1, y: 1 }]\n      ],\n\n      [ACTION_NEW, [{ x: 0.5 + LINE_OFFSET, y: 0 }, { x: 1, y: 0.5 - LINE_OFFSET }],\n        [{ x: 0.5 + LINE_OFFSET, y: 0 }, { x: 1, y: 0.5 - LINE_OFFSET }, { x: 1, y: 0 }]\n      ],\n      [ACTION_NEW, [{ x: 0.5 + LINE_OFFSET, y: 0 }, { x: 0, y: 0.5 + LINE_OFFSET }, { x: 1, y: 0.5 - LINE_OFFSET }, { x: 0.5 - LINE_OFFSET, y: 1 }],\n        [{ x: 0.5 + LINE_OFFSET, y: 0 }, { x: 0, y: 0.5 + LINE_OFFSET }, { x: 0, y: 1 }, { x: 0.5 - LINE_OFFSET, y: 1 }, { x: 1, y: 0.5 - LINE_OFFSET }, { x: 1, y: 0 }]\n      ],\n      [ACTION_NEW, [{ x: 0.5 + LINE_OFFSET, y: 0 }, { x: 0.5 + LINE_OFFSET, y: 1 }],\n        [{ x: 0.5 + LINE_OFFSET, y: 0 }, { x: 0.5 + LINE_OFFSET, y: 1 }, { x: 1, y: 1 }, { x: 1, y: 0 }]\n      ],\n      [ACTION_NEW, [{ x: 0.5 + LINE_OFFSET, y: 0 }, { x: 0, y: 0.5 + LINE_OFFSET }],\n        [{ x: 0.5 + LINE_OFFSET, y: 0 }, { x: 0, y: 0.5 + LINE_OFFSET }, { x: 0, y: 1 }, { x: 1, y: 1 }, { x: 1, y: 0 }]\n      ],\n\n      [ACTION_NEW, [{ x: 0.5 - LINE_OFFSET, y: 0 }, { x: 0, y: 0.5 - LINE_OFFSET }],\n        [{ x: 0.5 - LINE_OFFSET, y: 0 }, { x: 0, y: 0.5 - LINE_OFFSET }, { x: 0, y: 0 }]\n      ],\n      [ACTION_NEW, [{ x: 0.5 - LINE_OFFSET, y: 0 }, { x: 0.5 - LINE_OFFSET, y: 1 }],\n        [{ x: 0.5 - LINE_OFFSET, y: 0 }, { x: 0.5 - LINE_OFFSET, y: 1 }, { x: 0, y: 1 }, { x: 0, y: 0 }]\n      ],\n      [ACTION_NEW, [{ x: 0.5 - LINE_OFFSET, y: 0 }, { x: 1, y: 0.5 + LINE_OFFSET }, { x: 0, y: 0.5 - LINE_OFFSET }, { x: 0.5 + LINE_OFFSET, y: 1 }],\n        [{ x: 0.5 - LINE_OFFSET, y: 0 }, { x: 1, y: 0.5 + LINE_OFFSET }, { x: 1, y: 1 }, { x: 0.5 + LINE_OFFSET, y: 1 }, { x: 0, y: 0.5 - LINE_OFFSET }, { x: 0, y: 0 }]\n      ],\n      [ACTION_NEW, [{ x: 0.5 - LINE_OFFSET, y: 0 }, { x: 1, y: 0.5 + LINE_OFFSET }],\n        [{ x: 0.5 - LINE_OFFSET, y: 0 }, { x: 1, y: 0.5 + LINE_OFFSET }, { x: 1, y: 1 }, { x: 0, y: 1 }, { x: 0, y: 0 }]\n      ],\n\n      [ACTION_NEW, [{ x: 0, y: 0.5 - LINE_OFFSET }, { x: 1, y: 0.5 - LINE_OFFSET }],\n        [{ x: 0, y: 0.5 - LINE_OFFSET }, { x: 1, y: 0.5 - LINE_OFFSET }, { x: 1, y: 0 }, { x: 0, y: 0 }]\n      ],\n      [ACTION_NEW, [{ x: 1, y: 0.5 - LINE_OFFSET }, { x: 0.5 - LINE_OFFSET, y: 1 }],\n        [{ x: 1, y: 0.5 - LINE_OFFSET }, { x: 0.5 - LINE_OFFSET, y: 1 }, { x: 0, y: 1 }, { x: 0, y: 0 }, { x: 1, y: 0 }]\n      ],\n      [ACTION_NEW, [{ x: 0, y: 0.5 - LINE_OFFSET }, { x: 0.5 + LINE_OFFSET, y: 1 }],\n        [{ x: 0, y: 0.5 - LINE_OFFSET }, { x: 0.5 + LINE_OFFSET, y: 1 }, { x: 1, y: 1 }, { x: 1, y: 0 }, { x: 0, y: 0 }]\n      ],\n      [ACTION_COMBINE, [],\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 1, y: 1 }, { x: 0, y: 1 }]\n      ],\n    ]\n\n    let minX = gameHelper.calculateMinStarX(this.game)\n    let minY = gameHelper.calculateMinStarY(this.game)\n    let maxX = gameHelper.calculateMaxStarX(this.game)\n    let maxY = gameHelper.calculateMaxStarY(this.game)\n    minX -= minX % CELL_SIZE\n    minX -= Math.floor(METABALL_RADIUS * 1.5 / CELL_SIZE) * CELL_SIZE\n    minY -= minY % CELL_SIZE\n    minY -= Math.floor(METABALL_RADIUS * 1.5 / CELL_SIZE) * CELL_SIZE\n    maxX -= maxX % CELL_SIZE\n    maxX += CELL_SIZE\n    maxX += Math.floor(METABALL_RADIUS * 1.5 / CELL_SIZE) * CELL_SIZE\n    maxY -= maxY % CELL_SIZE\n    maxY += CELL_SIZE\n    maxY += Math.floor(METABALL_RADIUS * 1.5 / CELL_SIZE) * CELL_SIZE\n    if (minX < 0) { minX -= CELL_SIZE }\n    if (minY < 0) { minY -= CELL_SIZE }\n\n    let gridWidth = (maxX - minX) / CELL_SIZE\n    let gridHeight = (maxY - minY) / CELL_SIZE\n\n    let samplePoints = Array.from(Array(gridWidth + 1), () => new Array(gridHeight + 1));\n\n    const gridToCoord = (ix, iy) => {\n      return {\n        x: ix * CELL_SIZE + minX,\n        y: iy * CELL_SIZE + minY\n      }\n    }\n\n    let startIX, endIX, startIY, endIY, gridLocation, distance, owner;\n    let stars = this.game.galaxy.stars\n    for (let star of stars) {\n      // This loop goes through all stars, and generates the gridPoints that are within the METABALL_RADIUS\n      // Those points get the value of this star, or keep their previous value (from another star) if that one was closer\n      startIX = Math.ceil((star.location.x - METABALL_RADIUS - minX) / CELL_SIZE); //The minimum ix can be and still be in the METABALL_RADIUS\n      endIX = Math.floor((star.location.x + METABALL_RADIUS - minX) / CELL_SIZE); //The maximum ix can be and still be in the METABALL_RADIUS\n      for (let ix = startIX; ix <= endIX; ix++) {\n        startIY = Math.ceil((star.location.y - Math.sqrt((METABALL_RADIUS)**2 - (star.location.x - (ix * CELL_SIZE + minX))**2) - minY) / CELL_SIZE); // The minimum iy can be and still be in the METABALL_RADIUS\n        endIY = Math.floor((star.location.y + Math.sqrt((METABALL_RADIUS)**2 - (star.location.x - (ix * CELL_SIZE + minX))**2) - minY) / CELL_SIZE); // The maximum iy can be and still be in the METABALL_RADIUS\n        for (let iy = startIY; iy <= endIY; iy++) {\n          gridLocation = gridToCoord(ix, iy); // Get the location in x, y of the gridPoint we are currently looping through\n          distance = gameHelper.getDistanceBetweenLocations(gridLocation, star.location); // Get the distance between the gridPoint and the star\n          if (samplePoints[ix][iy] && samplePoints[ix][iy].distance < distance) { // If the gridpoint has a value AND the distance currently logged (from a previous star) is smaller than the current one THEN don't log anything\n            // Do nothing, because the grid already has a value from a star that is closer\n          } else {\n            // Now either the grid doesn't have a value here yet or the star calculated here is closer than the one currently logged in\n            owner = this.game.galaxy.players.find(p => p._id === star.ownedByPlayerId)\n            samplePoints[ix][iy] = { distance, owner }; // Make this gridPoint the value of the distance from the star so we can compare it with other stars AND make it have the value for the owner (the player)\n          }\n        }\n      }\n    }\n    // Loops through all samplePoints, to make the value of the point the owner, instead of {distance, owner} because that is what the next function takes as input.\n    for (let ix = 0; ix < samplePoints.length - 1; ix++) {\n      for (let iy = 0; iy < samplePoints[ix].length - 1; iy++) {\n        if (samplePoints[ix][iy]) {\n          samplePoints[ix][iy] = samplePoints[ix][iy].owner;\n        }\n      }\n    }\n\n    for (let player of this.game.galaxy.players) {\n      let color = player.colour.value\n      let territoryPolygons = new PIXI.Graphics()\n      let territoryLines = new PIXI.Graphics()\n      this.container.addChild(territoryPolygons)\n      this.container.addChild(territoryLines)\n      territoryLines.lineStyle(LINE_WIDTH, color, 1)\n      territoryLines._lineStyle.cap = PIXI.LINE_CAP.ROUND\n      territoryPolygons.alpha = 0.333\n\n      let combining = false\n      for (let ix = 0; ix < samplePoints.length - 1; ix++) {\n        for (let iy = 0; iy < samplePoints[ix].length - 1; iy++) {\n          let lookUpIndex = 0\n          lookUpIndex += (player == samplePoints[ix][iy]) * 8\n          lookUpIndex += (player == samplePoints[ix + 1][iy]) * 4\n          lookUpIndex += (player == samplePoints[ix][iy + 1]) * 1\n          lookUpIndex += (player == samplePoints[ix + 1][iy + 1]) * 2\n          if (VERTEX_TABLE[lookUpIndex][ACTION_INDEX] != ACTION_SKIP) {\n            let cellOrigin = { x: ix * CELL_SIZE + minX, y: iy * CELL_SIZE + minY }\n            if (VERTEX_TABLE[lookUpIndex][LINES_INDEX].length > 1) {\n              //if there are vertices, draw the lines\n              territoryLines.moveTo(VERTEX_TABLE[lookUpIndex][LINES_INDEX][0].x * CELL_SIZE + cellOrigin.x, VERTEX_TABLE[lookUpIndex][LINES_INDEX][0].y * CELL_SIZE + cellOrigin.y)\n              territoryLines.lineTo(VERTEX_TABLE[lookUpIndex][LINES_INDEX][1].x * CELL_SIZE + cellOrigin.x, VERTEX_TABLE[lookUpIndex][LINES_INDEX][1].y * CELL_SIZE + cellOrigin.y)\n              if (VERTEX_TABLE[lookUpIndex][LINES_INDEX].length > 2) {\n                territoryLines.moveTo(VERTEX_TABLE[lookUpIndex][LINES_INDEX][2].x * CELL_SIZE + cellOrigin.x, VERTEX_TABLE[lookUpIndex][LINES_INDEX][2].y * CELL_SIZE + cellOrigin.y)\n                territoryLines.lineTo(VERTEX_TABLE[lookUpIndex][LINES_INDEX][3].x * CELL_SIZE + cellOrigin.x, VERTEX_TABLE[lookUpIndex][LINES_INDEX][3].y * CELL_SIZE + cellOrigin.y)\n              }\n            }\n\n            if (VERTEX_TABLE[lookUpIndex][ACTION_INDEX] == ACTION_NEW) {\n              if (combining) {\n                //finish combining\n                territoryPolygons.lineTo(VERTEX_TABLE[15][POLYGON_INEDX][1].x * CELL_SIZE + cellOrigin.x, VERTEX_TABLE[15][POLYGON_INEDX][1].y * CELL_SIZE + cellOrigin.y)\n                territoryPolygons.lineTo(VERTEX_TABLE[15][POLYGON_INEDX][0].x * CELL_SIZE + cellOrigin.x, VERTEX_TABLE[15][POLYGON_INEDX][0].y * CELL_SIZE + cellOrigin.y)\n                territoryPolygons.endFill()\n                combining = false\n              }\n              territoryPolygons.moveTo(VERTEX_TABLE[lookUpIndex][POLYGON_INEDX][0].x * CELL_SIZE + cellOrigin.x, VERTEX_TABLE[lookUpIndex][POLYGON_INEDX][0].y * CELL_SIZE + cellOrigin.y)\n              territoryPolygons.beginFill(color, 1)\n              let first = true\n              let vertices = VERTEX_TABLE[lookUpIndex][POLYGON_INEDX]\n              for (let vertex of vertices) {\n                if (first) { first = false; continue }\n                territoryPolygons.lineTo(vertex.x * CELL_SIZE + cellOrigin.x, vertex.y * CELL_SIZE + cellOrigin.y)\n              }\n              territoryPolygons.endFill()\n\n            }\n\n            if (VERTEX_TABLE[lookUpIndex][ACTION_INDEX] == ACTION_COMBINE) {\n              if (!combining) {\n                //start combining\n                territoryPolygons.moveTo(VERTEX_TABLE[15][POLYGON_INEDX][0].x * CELL_SIZE + cellOrigin.x, VERTEX_TABLE[15][POLYGON_INEDX][0].y * CELL_SIZE + cellOrigin.y)\n                territoryPolygons.beginFill(color, 1)\n                territoryPolygons.lineTo(VERTEX_TABLE[15][POLYGON_INEDX][1].x * CELL_SIZE + cellOrigin.x, VERTEX_TABLE[15][POLYGON_INEDX][1].y * CELL_SIZE + cellOrigin.y)\n                combining = true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  _drawTerritoriesVoronoi(userSettings) {\n    this.container.alpha = 1\n\n    let voronoi = new Voronoi()\n\n    let minX = gameHelper.calculateMinStarX(this.game)\n    let minY = gameHelper.calculateMinStarY(this.game)\n    let maxX = gameHelper.calculateMaxStarX(this.game)\n    let maxY = gameHelper.calculateMaxStarY(this.game)\n\n    let boundingBox = {\n      xl: minX - Territories.maxVoronoiDistance,\n      xr: maxX + Territories.maxVoronoiDistance,\n      yt: minY - Territories.maxVoronoiDistance,\n      yb: maxY + Territories.maxVoronoiDistance\n    }\n\n    let sites = []\n    for (let star of this.game.galaxy.stars) {\n      sites.push({\n        x: star.location.x,\n        y: star.location.y,\n        playerID: star.ownedByPlayerId\n      })\n    }\n\n    let diagram = voronoi.compute(sites, boundingBox)\n\n    let borders = []\n    for (let edge of diagram.edges) {\n      if (edge.lSite && edge.rSite) {\n        if (edge.lSite.playerID !== edge.rSite.playerID) {\n          borders.push(edge)\n        }\n      }\n    }\n\n    let borderWidth = +userSettings.map.voronoiCellBorderWidth\n\n    let allPoints = new Map()\n\n    const getPoint = (point) => {\n      return allPoints.get(point).reduce((pointA, pointB) => {\n        return { x: pointA.x + pointB.x / allPoints.get(point).length, y: pointA.y + pointB.y / allPoints.get(point).length }\n      }, { x: 0, y: 0 })\n    }\n\n    const endpointCheck = (cell, endpoint) => {\n      if (allPoints.has(endpoint)) {\n        let newPoint = this._sanitizeVoronoiPoint(cell.site, endpoint)\n        let ListPoints = allPoints.get(endpoint)\n        if (ListPoints.every(point => point.x !== newPoint.x && point.y !== newPoint.y)) ListPoints.push(newPoint)\n      } else {\n        allPoints.set(endpoint, [this._sanitizeVoronoiPoint(cell.site, endpoint)])\n      }\n    }\n\n    for (let cell of diagram.cells) {\n      for (let halfedge of cell.halfedges) {\n        endpointCheck(cell, halfedge.getStartpoint())\n        endpointCheck(cell, halfedge.getEndpoint())\n      }\n    }\n\n    // Draw the cells\n    for (let cell of diagram.cells) {\n      let star = this.game.galaxy.stars.find(s => s.location.x === cell.site.x && s.location.y === cell.site.y);\n\n      let colour = 0x000000\n\n      if (star.ownedByPlayerId) {\n        colour = this.game.galaxy.players.find(p => p._id === star.ownedByPlayerId).colour.value\n      }\n\n      let points = []\n\n      for (let halfedge of cell.halfedges) {\n        points.push(halfedge.getStartpoint())\n        points.push(halfedge.getEndpoint())\n      }\n\n      // Do not draw points that are more than X distance away from the star.\n      // let sanitizedPoints = points\n      let sanitizedPoints = points.map(getPoint)\n\n      // Draw the graphic\n      let territoryGraphic = new PIXI.Graphics()\n      territoryGraphic.lineStyle(borderWidth, colour, 1)\n      territoryGraphic.beginFill(colour, 0.3)\n      territoryGraphic.moveTo(sanitizedPoints[0].x, sanitizedPoints[0].y)\n\n      for (let point of sanitizedPoints) {\n        territoryGraphic.lineTo(point.x, point.y)\n      }\n\n      // Draw another line back to the origin.\n      territoryGraphic.lineTo(sanitizedPoints[0].x, sanitizedPoints[0].y)\n\n      territoryGraphic.endFill()\n\n      this.container.addChild(territoryGraphic)\n    }\n    // ----------\n\n    // Draw the cell territory borders\n    borderWidth = +userSettings.map.voronoiTerritoryBorderWidth\n\n    let borderGraphics = new PIXI.Graphics()\n\n    for (let border of borders) {\n      let borderVA = getPoint(border.va)\n      let borderVB = getPoint(border.vb)\n      let leftNormalAngle = gameHelper.getAngleBetweenLocations(borderVA, borderVB) + Math.PI / 2.0\n      let leftVA = gameHelper.getPointFromLocation(borderVA, leftNormalAngle, borderWidth / 2.0)\n      let leftVB = gameHelper.getPointFromLocation(borderVB, leftNormalAngle, borderWidth / 2.0)\n\n      let rightNormalAngle = gameHelper.getAngleBetweenLocations(borderVA, borderVB) - Math.PI / 2.0\n      let rightVA = gameHelper.getPointFromLocation(borderVA, rightNormalAngle, borderWidth / 2.0)\n      let rightVB = gameHelper.getPointFromLocation(borderVB, rightNormalAngle, borderWidth / 2.0)\n\n      let colour = 0x000000\n\n      if (border.lSite.playerID) {\n        colour = this.game.galaxy.players.find(p => p._id === border.lSite.playerID).colour.value\n      }\n\n      borderGraphics.lineStyle(borderWidth, colour)\n      borderGraphics.moveTo(rightVA.x, rightVA.y)\n      borderGraphics.lineTo(rightVB.x, rightVB.y)\n\n      colour = 0x000000\n\n      if (border.rSite.playerID) {\n        colour = this.game.galaxy.players.find(p => p._id === border.rSite.playerID).colour.value\n      }\n\n      borderGraphics.lineStyle(borderWidth, colour)\n      borderGraphics.moveTo(leftVA.x, leftVA.y)\n      borderGraphics.lineTo(leftVB.x, leftVB.y)\n    }\n\n    this.container.addChild(borderGraphics)\n  }\n\n  _sanitizeVoronoiPoint(site, point) {\n    let distance = gameHelper.getDistanceBetweenLocations(site, point)\n    let angle = gameHelper.getAngleBetweenLocations(site, point)\n\n    if (distance > Territories.maxVoronoiDistance) {\n      return gameHelper.getPointFromLocation(site, angle, Territories.maxVoronoiDistance)\n    }\n\n    return point;\n  }\n\n  refreshZoom(zoomPercent) {\n    this.zoomPercent = zoomPercent\n\n    if (this.container) {\n      this.container.visible = zoomPercent <= Territories.zoomLevel\n    }\n  }\n\n}\n\nexport default Territories\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAsB;AACtB,cAAyB;AACzB,wBAAuB;AAEvB,MAAM,YAAY;AAAA,EAEhB,OAAO,YAAY;AAAA,EACnB,OAAO,qBAAqB;AAAA,EAE5B,cAAc;AACZ,SAAK,YAAY,IAAI,KAAK,UAAU;AAEpC,SAAK,cAAc;AAAA,EACrB;AAAA,EAEA,MAAM,MAAM,cAAc;AACxB,SAAK,OAAO;AAEZ,gBAAY,YAAY,aAAa,IAAI,WAAW;AAAA,EACtD;AAAA,EAEA,KAAK,cAAc;AACjB,SAAK,UAAU,eAAe;AAE9B,QAAI,CAAC,KAAK,KAAK,OAAO,SAAS,CAAC,KAAK,KAAK,OAAO,MAAM,QAAQ;AAC7D;AAAA,IACF;AAEA,YAAQ,aAAa,IAAI,gBAAgB;AAAA,MACvC,KAAK;AACH,aAAK,6BAA6B,YAAY;AAC9C;AAAA,MACF,KAAK;AACH,aAAK,wBAAwB,YAAY;AACzC;AAAA,IACJ;AAEA,SAAK,YAAY,KAAK,eAAe,CAAC;AAAA,EACxC;AAAA,EAEA,6BAA6B,cAAc;AACzC,SAAK,UAAU,QAAQ;AAEvB,UAAM,YAAY,IAAI,aAAa,IAAI;AACvC,UAAM,kBAAkB,KAAK,aAAa,IAAI;AAC9C,UAAM,kBAAmB,IAAI,KAAM,aAAa,IAAI;AACpD,UAAM,aAAa,YAAY;AAC/B,UAAM,cAAc,kBAAkB;AAGtC,UAAM,iBAAiB;AACvB,UAAM,aAAa;AACnB,UAAM,cAAc;AAEpB,UAAM,eAAe;AACrB,UAAM,cAAc;AACpB,UAAM,gBAAgB;AACtB,UAAM,eAAe;AAAA,MACnB,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AAAA,MACpB;AAAA,QAAC;AAAA,QAAY,CAAC,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,CAAC;AAAA,QAC1E,CAAC,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAAA,MACjF;AAAA,MACA;AAAA,QAAC;AAAA,QAAY,CAAC,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,CAAC;AAAA,QAC1E,CAAC,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAAA,MACjF;AAAA,MACA;AAAA,QAAC;AAAA,QAAY,CAAC,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,CAAC;AAAA,QAC1E,CAAC,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAAA,MACjG;AAAA,MAEA;AAAA,QAAC;AAAA,QAAY,CAAC,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,CAAC;AAAA,QAC1E,CAAC,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAAA,MACjF;AAAA,MACA;AAAA,QAAC;AAAA,QAAY,CAAC,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,CAAC;AAAA,QAC1I,CAAC,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAAA,MACjK;AAAA,MACA;AAAA,QAAC;AAAA,QAAY,CAAC,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,CAAC;AAAA,QAC1E,CAAC,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAAA,MACjG;AAAA,MACA;AAAA,QAAC;AAAA,QAAY,CAAC,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,CAAC;AAAA,QAC1E,CAAC,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAAA,MACjH;AAAA,MAEA;AAAA,QAAC;AAAA,QAAY,CAAC,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,CAAC;AAAA,QAC1E,CAAC,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAAA,MACjF;AAAA,MACA;AAAA,QAAC;AAAA,QAAY,CAAC,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,CAAC;AAAA,QAC1E,CAAC,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAAA,MACjG;AAAA,MACA;AAAA,QAAC;AAAA,QAAY,CAAC,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,CAAC;AAAA,QAC1I,CAAC,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAAA,MACjK;AAAA,MACA;AAAA,QAAC;AAAA,QAAY,CAAC,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,CAAC;AAAA,QAC1E,CAAC,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAAA,MACjH;AAAA,MAEA;AAAA,QAAC;AAAA,QAAY,CAAC,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,CAAC;AAAA,QAC1E,CAAC,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAAA,MACjG;AAAA,MACA;AAAA,QAAC;AAAA,QAAY,CAAC,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,CAAC;AAAA,QAC1E,CAAC,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAAA,MACjH;AAAA,MACA;AAAA,QAAC;AAAA,QAAY,CAAC,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,CAAC;AAAA,QAC1E,CAAC,EAAE,GAAG,GAAG,GAAG,MAAM,YAAY,GAAG,EAAE,GAAG,MAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAAA,MACjH;AAAA,MACA;AAAA,QAAC;AAAA,QAAgB,CAAC;AAAA,QAChB,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAAA,MACjE;AAAA,IACF;AAEA,QAAI,OAAO,kBAAAA,QAAW,kBAAkB,KAAK,IAAI;AACjD,QAAI,OAAO,kBAAAA,QAAW,kBAAkB,KAAK,IAAI;AACjD,QAAI,OAAO,kBAAAA,QAAW,kBAAkB,KAAK,IAAI;AACjD,QAAI,OAAO,kBAAAA,QAAW,kBAAkB,KAAK,IAAI;AACjD,YAAQ,OAAO;AACf,YAAQ,KAAK,MAAM,kBAAkB,MAAM,SAAS,IAAI;AACxD,YAAQ,OAAO;AACf,YAAQ,KAAK,MAAM,kBAAkB,MAAM,SAAS,IAAI;AACxD,YAAQ,OAAO;AACf,YAAQ;AACR,YAAQ,KAAK,MAAM,kBAAkB,MAAM,SAAS,IAAI;AACxD,YAAQ,OAAO;AACf,YAAQ;AACR,YAAQ,KAAK,MAAM,kBAAkB,MAAM,SAAS,IAAI;AACxD,QAAI,OAAO,GAAG;AAAE,cAAQ;AAAA,IAAU;AAClC,QAAI,OAAO,GAAG;AAAE,cAAQ;AAAA,IAAU;AAElC,QAAI,aAAa,OAAO,QAAQ;AAChC,QAAI,cAAc,OAAO,QAAQ;AAEjC,QAAI,eAAe,MAAM,KAAK,MAAM,YAAY,CAAC,GAAG,MAAM,IAAI,MAAM,aAAa,CAAC,CAAC;AAEnF,UAAM,cAAc,CAAC,IAAI,OAAO;AAC9B,aAAO;AAAA,QACL,GAAG,KAAK,YAAY;AAAA,QACpB,GAAG,KAAK,YAAY;AAAA,MACtB;AAAA,IACF;AAEA,QAAI,SAAS,OAAO,SAAS,OAAO,cAAc,UAAU;AAC5D,QAAI,QAAQ,KAAK,KAAK,OAAO;AAC7B,aAAS,QAAQ,OAAO;AAGtB,gBAAU,KAAK,MAAM,KAAK,SAAS,IAAI,kBAAkB,QAAQ,SAAS;AAC1E,cAAQ,KAAK,OAAO,KAAK,SAAS,IAAI,kBAAkB,QAAQ,SAAS;AACzE,eAAS,KAAK,SAAS,MAAM,OAAO,MAAM;AACxC,kBAAU,KAAK,MAAM,KAAK,SAAS,IAAI,KAAK,KAAM,mBAAkB,KAAK,KAAK,SAAS,KAAK,KAAK,YAAY,UAAQ,CAAC,IAAI,QAAQ,SAAS;AAC3I,gBAAQ,KAAK,OAAO,KAAK,SAAS,IAAI,KAAK,KAAM,mBAAkB,KAAK,KAAK,SAAS,KAAK,KAAK,YAAY,UAAQ,CAAC,IAAI,QAAQ,SAAS;AAC1I,iBAAS,KAAK,SAAS,MAAM,OAAO,MAAM;AACxC,yBAAe,YAAY,IAAI,EAAE;AACjC,qBAAW,kBAAAA,QAAW,4BAA4B,cAAc,KAAK,QAAQ;AAC7E,cAAI,aAAa,IAAI,OAAO,aAAa,IAAI,IAAI,WAAW,UAAU;AAAA,UAEtE,OAAO;AAEL,oBAAQ,KAAK,KAAK,OAAO,QAAQ,KAAK,OAAK,EAAE,QAAQ,KAAK,eAAe;AACzE,yBAAa,IAAI,MAAM,EAAE,UAAU,MAAM;AAAA,UAC3C;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,aAAS,KAAK,GAAG,KAAK,aAAa,SAAS,GAAG,MAAM;AACnD,eAAS,KAAK,GAAG,KAAK,aAAa,IAAI,SAAS,GAAG,MAAM;AACvD,YAAI,aAAa,IAAI,KAAK;AACxB,uBAAa,IAAI,MAAM,aAAa,IAAI,IAAI;AAAA,QAC9C;AAAA,MACF;AAAA,IACF;AAEA,aAAS,UAAU,KAAK,KAAK,OAAO,SAAS;AAC3C,UAAI,QAAQ,OAAO,OAAO;AAC1B,UAAI,oBAAoB,IAAI,KAAK,SAAS;AAC1C,UAAI,iBAAiB,IAAI,KAAK,SAAS;AACvC,WAAK,UAAU,SAAS,iBAAiB;AACzC,WAAK,UAAU,SAAS,cAAc;AACtC,qBAAe,UAAU,YAAY,OAAO,CAAC;AAC7C,qBAAe,WAAW,MAAM,KAAK,SAAS;AAC9C,wBAAkB,QAAQ;AAE1B,UAAI,YAAY;AAChB,eAAS,KAAK,GAAG,KAAK,aAAa,SAAS,GAAG,MAAM;AACnD,iBAAS,KAAK,GAAG,KAAK,aAAa,IAAI,SAAS,GAAG,MAAM;AACvD,cAAI,cAAc;AAClB,0BAAgB,UAAU,aAAa,IAAI,OAAO;AAClD,0BAAgB,UAAU,aAAa,KAAK,GAAG,OAAO;AACtD,0BAAgB,UAAU,aAAa,IAAI,KAAK,MAAM;AACtD,0BAAgB,UAAU,aAAa,KAAK,GAAG,KAAK,MAAM;AAC1D,cAAI,aAAa,aAAa,iBAAiB,aAAa;AAC1D,gBAAI,aAAa,EAAE,GAAG,KAAK,YAAY,MAAM,GAAG,KAAK,YAAY,KAAK;AACtE,gBAAI,aAAa,aAAa,aAAa,SAAS,GAAG;AAErD,6BAAe,OAAO,aAAa,aAAa,aAAa,GAAG,IAAI,YAAY,WAAW,GAAG,aAAa,aAAa,aAAa,GAAG,IAAI,YAAY,WAAW,CAAC;AACpK,6BAAe,OAAO,aAAa,aAAa,aAAa,GAAG,IAAI,YAAY,WAAW,GAAG,aAAa,aAAa,aAAa,GAAG,IAAI,YAAY,WAAW,CAAC;AACpK,kBAAI,aAAa,aAAa,aAAa,SAAS,GAAG;AACrD,+BAAe,OAAO,aAAa,aAAa,aAAa,GAAG,IAAI,YAAY,WAAW,GAAG,aAAa,aAAa,aAAa,GAAG,IAAI,YAAY,WAAW,CAAC;AACpK,+BAAe,OAAO,aAAa,aAAa,aAAa,GAAG,IAAI,YAAY,WAAW,GAAG,aAAa,aAAa,aAAa,GAAG,IAAI,YAAY,WAAW,CAAC;AAAA,cACtK;AAAA,YACF;AAEA,gBAAI,aAAa,aAAa,iBAAiB,YAAY;AACzD,kBAAI,WAAW;AAEb,kCAAkB,OAAO,aAAa,IAAI,eAAe,GAAG,IAAI,YAAY,WAAW,GAAG,aAAa,IAAI,eAAe,GAAG,IAAI,YAAY,WAAW,CAAC;AACzJ,kCAAkB,OAAO,aAAa,IAAI,eAAe,GAAG,IAAI,YAAY,WAAW,GAAG,aAAa,IAAI,eAAe,GAAG,IAAI,YAAY,WAAW,CAAC;AACzJ,kCAAkB,QAAQ;AAC1B,4BAAY;AAAA,cACd;AACA,gCAAkB,OAAO,aAAa,aAAa,eAAe,GAAG,IAAI,YAAY,WAAW,GAAG,aAAa,aAAa,eAAe,GAAG,IAAI,YAAY,WAAW,CAAC;AAC3K,gCAAkB,UAAU,OAAO,CAAC;AACpC,kBAAI,QAAQ;AACZ,kBAAI,WAAW,aAAa,aAAa;AACzC,uBAAS,UAAU,UAAU;AAC3B,oBAAI,OAAO;AAAE,0BAAQ;AAAO;AAAA,gBAAS;AACrC,kCAAkB,OAAO,OAAO,IAAI,YAAY,WAAW,GAAG,OAAO,IAAI,YAAY,WAAW,CAAC;AAAA,cACnG;AACA,gCAAkB,QAAQ;AAAA,YAE5B;AAEA,gBAAI,aAAa,aAAa,iBAAiB,gBAAgB;AAC7D,kBAAI,CAAC,WAAW;AAEd,kCAAkB,OAAO,aAAa,IAAI,eAAe,GAAG,IAAI,YAAY,WAAW,GAAG,aAAa,IAAI,eAAe,GAAG,IAAI,YAAY,WAAW,CAAC;AACzJ,kCAAkB,UAAU,OAAO,CAAC;AACpC,kCAAkB,OAAO,aAAa,IAAI,eAAe,GAAG,IAAI,YAAY,WAAW,GAAG,aAAa,IAAI,eAAe,GAAG,IAAI,YAAY,WAAW,CAAC;AACzJ,4BAAY;AAAA,cACd;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,wBAAwB,cAAc;AACpC,SAAK,UAAU,QAAQ;AAEvB,QAAI,UAAU,IAAI,QAAQ;AAE1B,QAAI,OAAO,kBAAAA,QAAW,kBAAkB,KAAK,IAAI;AACjD,QAAI,OAAO,kBAAAA,QAAW,kBAAkB,KAAK,IAAI;AACjD,QAAI,OAAO,kBAAAA,QAAW,kBAAkB,KAAK,IAAI;AACjD,QAAI,OAAO,kBAAAA,QAAW,kBAAkB,KAAK,IAAI;AAEjD,QAAI,cAAc;AAAA,MAChB,IAAI,OAAO,YAAY;AAAA,MACvB,IAAI,OAAO,YAAY;AAAA,MACvB,IAAI,OAAO,YAAY;AAAA,MACvB,IAAI,OAAO,YAAY;AAAA,IACzB;AAEA,QAAI,QAAQ,CAAC;AACb,aAAS,QAAQ,KAAK,KAAK,OAAO,OAAO;AACvC,YAAM,KAAK;AAAA,QACT,GAAG,KAAK,SAAS;AAAA,QACjB,GAAG,KAAK,SAAS;AAAA,QACjB,UAAU,KAAK;AAAA,MACjB,CAAC;AAAA,IACH;AAEA,QAAI,UAAU,QAAQ,QAAQ,OAAO,WAAW;AAEhD,QAAI,UAAU,CAAC;AACf,aAAS,QAAQ,QAAQ,OAAO;AAC9B,UAAI,KAAK,SAAS,KAAK,OAAO;AAC5B,YAAI,KAAK,MAAM,aAAa,KAAK,MAAM,UAAU;AAC/C,kBAAQ,KAAK,IAAI;AAAA,QACnB;AAAA,MACF;AAAA,IACF;AAEA,QAAI,cAAc,CAAC,aAAa,IAAI;AAEpC,QAAI,YAAY,oBAAI,IAAI;AAExB,UAAM,WAAW,CAAC,UAAU;AAC1B,aAAO,UAAU,IAAI,KAAK,EAAE,OAAO,CAAC,QAAQ,WAAW;AACrD,eAAO,EAAE,GAAG,OAAO,IAAI,OAAO,IAAI,UAAU,IAAI,KAAK,EAAE,QAAQ,GAAG,OAAO,IAAI,OAAO,IAAI,UAAU,IAAI,KAAK,EAAE,OAAO;AAAA,MACtH,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAAA,IACnB;AAEA,UAAM,gBAAgB,CAAC,MAAM,aAAa;AACxC,UAAI,UAAU,IAAI,QAAQ,GAAG;AAC3B,YAAI,WAAW,KAAK,sBAAsB,KAAK,MAAM,QAAQ;AAC7D,YAAI,aAAa,UAAU,IAAI,QAAQ;AACvC,YAAI,WAAW,MAAM,WAAS,MAAM,MAAM,SAAS,KAAK,MAAM,MAAM,SAAS,CAAC;AAAG,qBAAW,KAAK,QAAQ;AAAA,MAC3G,OAAO;AACL,kBAAU,IAAI,UAAU,CAAC,KAAK,sBAAsB,KAAK,MAAM,QAAQ,CAAC,CAAC;AAAA,MAC3E;AAAA,IACF;AAEA,aAAS,QAAQ,QAAQ,OAAO;AAC9B,eAAS,YAAY,KAAK,WAAW;AACnC,sBAAc,MAAM,SAAS,cAAc,CAAC;AAC5C,sBAAc,MAAM,SAAS,YAAY,CAAC;AAAA,MAC5C;AAAA,IACF;AAGA,aAAS,QAAQ,QAAQ,OAAO;AAC9B,UAAI,OAAO,KAAK,KAAK,OAAO,MAAM,KAAK,OAAK,EAAE,SAAS,MAAM,KAAK,KAAK,KAAK,EAAE,SAAS,MAAM,KAAK,KAAK,CAAC;AAExG,UAAI,SAAS;AAEb,UAAI,KAAK,iBAAiB;AACxB,iBAAS,KAAK,KAAK,OAAO,QAAQ,KAAK,OAAK,EAAE,QAAQ,KAAK,eAAe,EAAE,OAAO;AAAA,MACrF;AAEA,UAAI,SAAS,CAAC;AAEd,eAAS,YAAY,KAAK,WAAW;AACnC,eAAO,KAAK,SAAS,cAAc,CAAC;AACpC,eAAO,KAAK,SAAS,YAAY,CAAC;AAAA,MACpC;AAIA,UAAI,kBAAkB,OAAO,IAAI,QAAQ;AAGzC,UAAI,mBAAmB,IAAI,KAAK,SAAS;AACzC,uBAAiB,UAAU,aAAa,QAAQ,CAAC;AACjD,uBAAiB,UAAU,QAAQ,GAAG;AACtC,uBAAiB,OAAO,gBAAgB,GAAG,GAAG,gBAAgB,GAAG,CAAC;AAElE,eAAS,SAAS,iBAAiB;AACjC,yBAAiB,OAAO,MAAM,GAAG,MAAM,CAAC;AAAA,MAC1C;AAGA,uBAAiB,OAAO,gBAAgB,GAAG,GAAG,gBAAgB,GAAG,CAAC;AAElE,uBAAiB,QAAQ;AAEzB,WAAK,UAAU,SAAS,gBAAgB;AAAA,IAC1C;AAIA,kBAAc,CAAC,aAAa,IAAI;AAEhC,QAAI,iBAAiB,IAAI,KAAK,SAAS;AAEvC,aAAS,UAAU,SAAS;AAC1B,UAAI,WAAW,SAAS,OAAO,EAAE;AACjC,UAAI,WAAW,SAAS,OAAO,EAAE;AACjC,UAAI,kBAAkB,kBAAAA,QAAW,yBAAyB,UAAU,QAAQ,IAAI,KAAK,KAAK;AAC1F,UAAI,SAAS,kBAAAA,QAAW,qBAAqB,UAAU,iBAAiB,cAAc,CAAG;AACzF,UAAI,SAAS,kBAAAA,QAAW,qBAAqB,UAAU,iBAAiB,cAAc,CAAG;AAEzF,UAAI,mBAAmB,kBAAAA,QAAW,yBAAyB,UAAU,QAAQ,IAAI,KAAK,KAAK;AAC3F,UAAI,UAAU,kBAAAA,QAAW,qBAAqB,UAAU,kBAAkB,cAAc,CAAG;AAC3F,UAAI,UAAU,kBAAAA,QAAW,qBAAqB,UAAU,kBAAkB,cAAc,CAAG;AAE3F,UAAI,SAAS;AAEb,UAAI,OAAO,MAAM,UAAU;AACzB,iBAAS,KAAK,KAAK,OAAO,QAAQ,KAAK,OAAK,EAAE,QAAQ,OAAO,MAAM,QAAQ,EAAE,OAAO;AAAA,MACtF;AAEA,qBAAe,UAAU,aAAa,MAAM;AAC5C,qBAAe,OAAO,QAAQ,GAAG,QAAQ,CAAC;AAC1C,qBAAe,OAAO,QAAQ,GAAG,QAAQ,CAAC;AAE1C,eAAS;AAET,UAAI,OAAO,MAAM,UAAU;AACzB,iBAAS,KAAK,KAAK,OAAO,QAAQ,KAAK,OAAK,EAAE,QAAQ,OAAO,MAAM,QAAQ,EAAE,OAAO;AAAA,MACtF;AAEA,qBAAe,UAAU,aAAa,MAAM;AAC5C,qBAAe,OAAO,OAAO,GAAG,OAAO,CAAC;AACxC,qBAAe,OAAO,OAAO,GAAG,OAAO,CAAC;AAAA,IAC1C;AAEA,SAAK,UAAU,SAAS,cAAc;AAAA,EACxC;AAAA,EAEA,sBAAsB,MAAM,OAAO;AACjC,QAAI,WAAW,kBAAAA,QAAW,4BAA4B,MAAM,KAAK;AACjE,QAAI,QAAQ,kBAAAA,QAAW,yBAAyB,MAAM,KAAK;AAE3D,QAAI,WAAW,YAAY,oBAAoB;AAC7C,aAAO,kBAAAA,QAAW,qBAAqB,MAAM,OAAO,YAAY,kBAAkB;AAAA,IACpF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,YAAY,aAAa;AACvB,SAAK,cAAc;AAEnB,QAAI,KAAK,WAAW;AAClB,WAAK,UAAU,UAAU,eAAe,YAAY;AAAA,IACtD;AAAA,EACF;AAEF;AAEA,IAAO,sBAAQ;",
  "names": ["gameHelper"]
}
