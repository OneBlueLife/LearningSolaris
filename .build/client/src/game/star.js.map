{
  "version": 3,
  "sources": ["../../../../client/src/game/star.js"],
  "sourcesContent": ["import * as PIXI from 'pixi.js-legacy'\nimport EventEmitter from 'events'\nimport TextureService from './texture'\nimport gameHelper from '../services/gameHelper'\nimport seededRandom from 'random-seed'\nimport Helpers from './helpers'\n\nclass Star extends EventEmitter {\n\n  static culling_margin = 16\n  static nameSize = 4\n  static shipsSmallSize = 6\n  static shipsBigSize = 10\n  static maxLod = 4\n  static seededRNG = seededRandom.create()\n\n  /*\n    Defines what zoompercentage correspond to what\n    depth level.\n    This is something you can tinker with\n    Potentially even make user defined.\n  */\n  static zoomLevelDefinitions = {\n    infrastructure: 200,\n    name: 160,\n    naturalResources: 160,\n    shipCount: 120\n  }\n\n  constructor (app) {\n    super()\n\n    this.app = app\n    this.container = new PIXI.Container()\n    this.fixedContainer = new PIXI.Container() // this container isnt affected by culling or user setting scalling\n    this.container.interactive = true\n    this.container.interactiveChildren = false\n    this.container.buttonMode = true\n\n    this.graphics_shape_part = new PIXI.Graphics()\n    this.graphics_shape_full = new PIXI.Graphics()\n    this.graphics_shape_part_warp = new PIXI.Graphics()\n    this.graphics_shape_full_warp = new PIXI.Graphics()\n    this.graphics_hyperspaceRange = new PIXI.Graphics()\n    this.graphics_natural_resources_ring = new Array(Star.maxLod)\n    this.graphics_scanningRange = new PIXI.Graphics()\n    this.graphics_star = new PIXI.Graphics()\n    this.graphics_targeted = new PIXI.Graphics()\n    this.graphics_selected = new PIXI.Graphics()\n    this.graphics_kingOfTheHill = new PIXI.Graphics()\n\n    this.container.addChild(this.graphics_star)\n    this.container.addChild(this.graphics_shape_part)\n    this.container.addChild(this.graphics_shape_full)\n    this.container.addChild(this.graphics_shape_part_warp)\n    this.container.addChild(this.graphics_shape_full_warp)\n    this.container.addChild(this.graphics_targeted)\n    this.container.addChild(this.graphics_selected)\n    this.container.addChild(this.graphics_kingOfTheHill)\n\n    this.fixedContainer.addChild(this.graphics_scanningRange)\n    this.fixedContainer.addChild(this.graphics_hyperspaceRange)\n\n    this.container.on('pointerup', this.onClicked.bind(this))\n    this.container.on('mouseover', this.onMouseOver.bind(this))\n    this.container.on('mouseout', this.onMouseOut.bind(this))\n\n    this.planets = null\n    this.handleOrbitPlanetsStep = null\n\n    this.isSelected = false\n    this.isMouseOver = false\n    this.zoomPercent = 100\n    this.showIgnoreBulkUpgradeInfrastructure = false\n\n    /**\n      Zoomdepth\n      I'd make this an enum if I could...\n\n      This is a value ranging from 1 to 4\n      1: Display stars only\n      2: Display shipcounts and orbit\n      3: Display shipcount, orbit and name\n      4: Display shipcount, orbit, name and infrastructure\n\n      What zoompercentage corresponds with what depth level\n      can be read from static property \"zoomLevelDefinitions\"\n    */\n    this.zoomDepth = 1\n  }\n\n  _getStarPlayer () {\n    return this.players.find(x => x._id === this.data.ownedByPlayerId)\n  }\n\n  _getStarCarriers () {\n    let carriersAtStar = this.carriers.filter(x => x.orbiting === this.data._id)\n\n    return carriersAtStar\n  }\n\n  _getStarCarrierShips () {\n    return this._getStarCarriers().reduce((sum, c) => sum + (c.ships || 0), 0)\n  }\n\n  setup (game, data, userSettings, players, carriers, lightYearDistance) {\n    this.game = game\n    this.data = data\n    this.players = players\n    this.carriers = carriers\n    this.lightYearDistance = lightYearDistance\n    this.container.position.x = this.data.location.x\n    this.container.position.y = this.data.location.y\n    this.fixedContainer.position.x = this.data.location.x\n    this.fixedContainer.position.y = this.data.location.y\n    this.container.hitArea = new PIXI.Circle(0, 0, 15)\n\n    this.userSettings = userSettings\n\n    // TODO maybe all these could be static variables since these are all the same for every star\n    this.clampedScaling = this.userSettings.map.objectsScaling == 'clamped'\n    this.baseScale = 1 //TODO add user setting for this independent of clamped or default\n    //divide these by 4 to allow more control while keeping the UI as int\n    this.minScale = this.userSettings.map.objectsMinimumScale/4.0\n    this.maxScale = this.userSettings.map.objectsMaximumScale/4.0\n\n    Star.zoomLevelDefinitions = userSettings.map.zoomLevels.star\n  }\n\n  draw () {\n    // Note: The star may become visible/hidden due to changing scanning range.\n    // If a star is revealed or a star becomes masked then we want to  the entire\n    // star to be re-drawn.\n\n    this.drawKingOfTheHillCircle()\n    this.drawWormHole()\n    this.drawPulsar()\n    this.drawNebula()\n    this.drawAsteroidField()\n    this.drawTarget()\n    this.drawSelectedCircle()\n    this.drawStar()\n    this.drawSpecialist()\n    this.drawPlanets()\n    this.drawNaturalResourcesRing()\n    this.drawColour()\n    this.drawScanningRange()\n    this.drawHyperspaceRange()\n    this.drawName()\n    this.drawShips()\n    this.drawInfrastructure()\n    this.drawInfrastructureBulkIgnored()\n    this.drawDepth()\n  }\n\n\n  drawStar () {\n    this.container.removeChild(this.graphics_star)\n\n    if (this.data.isInScanningRange) {\n      // ---- Binary stars ----\n      if (this.isBinaryStar()) {\n        if (this.hasBlackHole()) {\n          this.graphics_star = new PIXI.Sprite(TextureService.STAR_SYMBOLS['black_hole_binary'])\n        } else if (this._isDeadStar()) {\n          this.graphics_star = new PIXI.Sprite(TextureService.STAR_SYMBOLS['binary_unscannable'])\n        } else {\n          this.graphics_star = new PIXI.Sprite(TextureService.STAR_SYMBOLS['binary_scannable'])\n        }\n      }\n      // ---- Non binary stars ----\n      else if (this.hasBlackHole()) {\n        this.graphics_star = new PIXI.Sprite(TextureService.STAR_SYMBOLS['black_hole'])\n      } else if (this.data.homeStar) {\n        this.graphics_star = new PIXI.Sprite(TextureService.STAR_SYMBOLS['home'])\n      } else if (this._isDeadStar()) {\n        this.graphics_star = new PIXI.Sprite(TextureService.STAR_SYMBOLS['unscannable'])\n      } else {\n        this.graphics_star = new PIXI.Sprite(TextureService.STAR_SYMBOLS['scannable'])\n      }\n    }\n    else {\n      this.graphics_star = new PIXI.Sprite(TextureService.STAR_SYMBOLS['unscannable'])\n      this.graphics_star.tint = 0xa0a0a0\n    }\n\n    this.graphics_star.anchor.set(0.5)\n    this.graphics_star.width = 24.0/2.0\n    this.graphics_star.height = 24.0/2.0\n\n    this.container.addChild(this.graphics_star)\n  }\n\n  drawPulsar () {\n    if(!this.isPulsar()) {\n      return\n    }\n\n    if (this.pulsarGraphics) {\n      this.container.removeChild(this.pulsarGraphics)\n      this.pulsarGraphics = null\n    }\n\n    let seed = this.data._id\n    Star.seededRNG.seed(seed)\n\n    let player = this._getStarPlayer()\n    let playerColour = player ? player.colour.value : 0xFFFFFF\n\n    this.pulsarGraphics = new PIXI.Graphics()\n    this.pulsarGraphics.zIndex = -1\n    this.pulsarGraphics.lineStyle(1, playerColour, 0.5)\n    this.pulsarGraphics.moveTo(0, -20)\n    this.pulsarGraphics.lineTo(0, 20)\n    this.pulsarGraphics.drawEllipse(-5, 0, 5, 5)\n    this.pulsarGraphics.drawEllipse(5, 0, 5, 5)\n    this.pulsarGraphics.drawEllipse(-8, 0, 8, 8)\n    this.pulsarGraphics.drawEllipse(8, 0, 8, 8)\n    this.pulsarGraphics.rotation = Star.seededRNG.random()*Math.PI*2.0\n\n    this.container.addChild(this.pulsarGraphics)\n  }\n\n  drawNebula () {\n    if(!this.hasNebula()) {\n      return\n    }\n    if (this.nebulaSprite) {\n      this.fixedContainer.removeChild(this.nebulaSprite)\n      this.nebulaSprite = null\n    }\n    let seed = this.data._id\n    Star.seededRNG.seed(seed)\n    let nebulaTexture = TextureService.getRandomStarNebulaTexture(seed)\n    this.nebulaSprite = new PIXI.Sprite(nebulaTexture)\n\n    let spriteSize = 64\n    this.nebulaSprite.width = spriteSize\n    this.nebulaSprite.height = spriteSize\n    this.nebulaSprite.anchor.set(0.5)\n    this.nebulaSprite.rotation = Star.seededRNG.random()*Math.PI*2.0\n\n    let player = this._getStarPlayer()\n    let playerColour = player ? player.colour.value : 0xFFFFFF\n    this.nebulaSprite.tint = playerColour\n    //this.nebulaSprite.blendMode = PIXI.BLEND_MODES.ADD // for extra punch\n\n    let blendSprite = new PIXI.Sprite(nebulaTexture)\n    blendSprite.anchor.set(0.5)\n    blendSprite.rotation = Star.seededRNG.random()*Math.PI*2.0\n    //blendSprite.blendMode = PIXI.BLEND_MODES.ADD\n    blendSprite.tint = playerColour\n    this.nebulaSprite.addChild(blendSprite)\n\n    this.fixedContainer.addChild(this.nebulaSprite)\n  }\n\n  drawWormHole () {\n    if (!this.data.wormHoleToStarId) {\n      return\n    }\n\n    if (this.wormHoleSprite) {\n      this.fixedContainer.removeChild(this.wormHoleSprite)\n      this.wormHoleSprite = null\n    }\n\n    let texture = TextureService.getRandomWormholeTexture()\n    this.wormHoleSprite = new PIXI.Sprite(texture)\n\n    let spriteSize = 40\n    this.wormHoleSprite.width = spriteSize\n    this.wormHoleSprite.height = spriteSize\n    this.wormHoleSprite.anchor.set(0.5)\n    this.wormHoleSprite.rotation = Math.random()*Math.PI*2.0\n    this.wormHoleSprite.alpha = 0.35\n\n    let player = this._getStarPlayer()\n    let playerColour = player ? player.colour.value : 0xFFFFFF\n    this.wormHoleSprite.tint = playerColour\n    //this.asteroidFieldSprite.blendMode = PIXI.BLEND_MODES.ADD // for extra punch\n\n    this.fixedContainer.addChild(this.wormHoleSprite)\n  }\n\n  drawAsteroidField () {\n    if(!this.hasAsteroidField()) {\n      return\n    }\n    if (this.asteroidFieldSprite) {\n      this.fixedContainer.removeChild(this.asteroidFieldSprite)\n      this.asteroidFieldSprite = null\n    }\n    let seed = this.data._id\n    Star.seededRNG.seed(seed)\n    let texture = TextureService.getRandomStarAsteroidFieldTexture(seed)\n    this.asteroidFieldSprite = new PIXI.Sprite(texture)\n\n    let spriteSize = 64\n    this.asteroidFieldSprite.width = spriteSize\n    this.asteroidFieldSprite.height = spriteSize\n    this.asteroidFieldSprite.anchor.set(0.5)\n    this.asteroidFieldSprite.rotation = Star.seededRNG.random()*Math.PI*2.0\n\n    let player = this._getStarPlayer()\n    let playerColour = player ? player.colour.value : 0xFFFFFF\n    this.asteroidFieldSprite.tint = playerColour\n    //this.asteroidFieldSprite.blendMode = PIXI.BLEND_MODES.ADD // for extra punch\n\n    this.fixedContainer.addChild(this.asteroidFieldSprite)\n  }\n\n  drawSpecialist () {\n    if (this.specialistSprite) {\n      this.container.removeChild(this.specialistSprite)\n      this.specialistSprite = null\n    }\n    \n    if (!this.hasSpecialist()) {\n      return\n    }\n\n    //FIXME potential resource leak, should not create a new sprite every time\n    let specialistTexture = TextureService.getSpecialistTexture(this.data.specialist.key)\n    this.specialistSprite = new PIXI.Sprite(specialistTexture)\n\n    this.specialistSprite.width = 10\n    this.specialistSprite.height = 10\n    this.specialistSprite.x = -5\n    this.specialistSprite.y = -5\n\n    this.container.addChild(this.specialistSprite)\n  }\n\n  hasNebula () {\n    return this.data.isNebula\n  }\n\n  hasAsteroidField () {\n    return this.data.isAsteroidField\n  }\n\n  hasBlackHole () {\n    return this.data.isBlackHole\n  }\n\n  isBinaryStar () {\n    return this.data.isBinaryStar\n  }\n\n  isPulsar () {\n    return this.data.isPulsar\n  }\n\n  hasSpecialist () {\n    return this.data.specialistId && this.data.specialistId > 0 && this.data.specialist\n  }\n\n  drawPlanets () {\n    if (this.userSettings.map.naturalResources !== 'planets') {\n      if (this.container_planets) {\n        this.unsubscribeToEvents()\n        this.container.removeChild(this.container_planets)\n        this.container_planets = null\n        this.planets = null\n      }\n\n      return\n    }\n\n    if (!this.container_planets) {\n      this.container_planets = new PIXI.Container()\n\n      // The more resources a star has the more planets it has.\n      let planetCount = this._getPlanetsCount()\n\n      if (planetCount === 0) {\n        return\n      }\n\n      let player = this._getStarPlayer()\n      let playerColour = player ? player.colour.value : 0xFFFFFF\n\n      let rotationDirection = this._getPlanetOrbitDirection()\n      let rotationSpeedModifier = this._getPlanetOrbitSpeed()\n\n      this.planets = []\n\n      for (let i = 0; i < planetCount; i++) {\n        let planetContainer = new PIXI.Container()\n\n        let distanceToStar = 15 + (5 * i)\n        let planetSize = Math.floor(Math.abs(this.data.location.y) + distanceToStar) % 1.5 + 0.5\n\n        let orbitGraphics = new PIXI.Graphics()\n        orbitGraphics.lineStyle(0.3, 0xFFFFFF)\n        orbitGraphics.alpha = 0.1\n        orbitGraphics.drawCircle(0, 0, distanceToStar -(planetSize / 2))\n        this.container_planets.addChild(orbitGraphics)\n\n        let planetGraphics = new PIXI.Graphics()\n        planetGraphics.beginFill(playerColour)\n        planetGraphics.drawCircle(planetSize / 2, 0, planetSize)\n        planetGraphics.endFill()\n\n        if (!this.data.isInScanningRange) {\n          planetGraphics.alpha = 0.3\n        }\n\n        planetContainer.addChild(planetGraphics)\n\n        planetContainer.pivot.set(distanceToStar, 0)\n\n        let rotationSpeed = (planetCount - i) / rotationSpeedModifier\n\n        this.container_planets.addChild(planetContainer)\n\n        this.planets.push({\n          index: i,\n          container: planetContainer,\n          rotationSpeed,\n          rotationDirection\n        })\n      }\n\n      this.subscribeToEvents()\n\n      this.container.addChild(this.container_planets)\n    }\n  }\n\n  orbitPlanentsStep (delta) {\n    if (!this.planets) {\n      return\n    }\n    \n    for (let planet of this.planets) {\n      if (planet.rotationDirection) {\n        planet.container.rotation += planet.rotationSpeed * delta\n      } else {\n        planet.container.rotation -= planet.rotationSpeed * delta\n      }\n    }\n  }\n\n  drawNaturalResourcesRing () {\n    if (!this.data.naturalResources) {\n      return\n    }\n    for(let lod = 0; lod<Star.maxLod; lod+=1) {\n      if(!this.graphics_natural_resources_ring[lod]) {\n        this.graphics_natural_resources_ring[lod] = new PIXI.Graphics()\n        this.graphics_natural_resources_ring[lod].alpha = 0.5\n        this.graphics_natural_resources_ring[lod].zIndex = -1\n      }\n      this.graphics_natural_resources_ring[lod].clear()\n\n      if (this.userSettings.map.naturalResources !== 'single-ring') {\n        return\n      }\n\n      let averageNaturalResources = this._calculateAverageNaturalResources(this.data.naturalResources);\n\n      // let ringRadius = this.data.naturalResources > 100 ? 100 : this.data.naturalResources\n      // TODO: Experimental:\n      let ringRadius = averageNaturalResources <= 50 ? averageNaturalResources : averageNaturalResources > 400 ? 100 : (12.5 * Math.log2(averageNaturalResources / 50) + 50)\n\n      ringRadius /= 8.0\n      let lineWidht = 1.0/8.0\n      ringRadius *= lod+1\n      lineWidht *= lod+1\n      this.graphics_natural_resources_ring[lod].clear()\n      this.graphics_natural_resources_ring[lod].lineStyle(lineWidht, 0xFFFFFF, 0.1)\n      this.graphics_natural_resources_ring[lod].drawCircle(0, 0, ringRadius * 0.75)\n      this.graphics_natural_resources_ring[lod].scale.x = 1.0/( (1.0/8.0)*(lod+1) )\n      this.graphics_natural_resources_ring[lod].scale.y = 1.0/( (1.0/8.0)*(lod+1) )\n      this.container.addChild(this.graphics_natural_resources_ring[lod])\n    }\n  }\n\n  _calculateAverageNaturalResources(naturalResources) {\n    return Math.floor((naturalResources.economy + naturalResources.industry + naturalResources.science) / 3);\n  }\n\n  _getPlanetsCount () {\n    if (!this.data.naturalResources) {\n      return 0\n    }\n    let averageNaturalResources = this._calculateAverageNaturalResources(this.data.naturalResources);\n    return Math.min(Math.floor(averageNaturalResources / 45 * 3), 5) // Anything over 45 gets 3 planets\n  }\n\n  _getPlanetOrbitDirection () {\n    return Math.floor(Math.abs(this.data.location.y)) % 2 === 0\n  }\n\n  _getPlanetOrbitSpeed () {\n    return Math.floor(Math.random() * (1000 - 500 + 1) + 500) // Random number between 500 and 1000\n  }\n\n  drawColour () {\n    if (this.graphics_shape_part) {\n      this.container.removeChild(this.graphics_shape_part)\n      this.container.removeChild(this.graphics_shape_full)\n    }\n\n    // Get the player who owns the star.\n    let player = this._getStarPlayer()\n\n    if (!player) {\n      return\n    }\n    if (Object.keys(TextureService.PLAYER_SYMBOLS).includes(player.shape)) {\n      this.graphics_shape_part = new PIXI.Sprite(TextureService.PLAYER_SYMBOLS[player.shape][2+this.data.warpGate])\n      this.graphics_shape_full = new PIXI.Sprite(TextureService.PLAYER_SYMBOLS[player.shape][0+this.data.warpGate])\n    }\n    this.graphics_shape_part.tint = player.colour.value\n    this.graphics_shape_full.tint = player.colour.value\n    this.graphics_shape_part.anchor.set(0.5)\n    this.graphics_shape_full.anchor.set(0.5)\n    this.graphics_shape_part.width = 28.0\n    this.graphics_shape_part.height = 28.0\n    this.graphics_shape_full.width = 28.0\n    this.graphics_shape_full.height = 28.0\n    this.container.addChild(this.graphics_shape_part)\n    this.container.addChild(this.graphics_shape_full)\n  }\n\n  _hasUnknownShips() {\n      let carriersOrbiting = this._getStarCarriers()\n      let scramblers = carriersOrbiting.reduce( (sum, c ) => sum + (c.ships==null), 0 )\n      let scrambler = this.data.ships == null\n      return ((scramblers || scrambler) && this.data.isInScanningRange)\n  }\n\n  drawName () {\n    if (!this.text_name) {\n      let bitmapFont = {fontName: \"chakrapetch\", fontSize: Star.nameSize}\n      this.text_name = new PIXI.BitmapText(this.data.name, bitmapFont)\n      this.text_name.x = 5\n\n      this.container.addChild(this.text_name)\n    }\n\n    let totalKnownShips = (this.data.ships || 0) + this._getStarCarrierShips()\n    let carriersOrbiting = this._getStarCarriers()\n\n    if ((this.data.ownedByPlayerId || carriersOrbiting) && (totalKnownShips > 0 || carriersOrbiting.length > 0 || this._hasUnknownShips())) {\n      this.text_name.y = ( (Star.nameSize+Star.shipsSmallSize)/2.0 )-Star.nameSize\n    } else {\n      this.text_name.y = -(this.text_name.height / 2)\n    }\n  }\n\n  drawShips () {\n    if (this.text_ships_small) {\n      this.container.removeChild(this.text_ships_small)\n      this.text_ships_small = null\n    }\n    if (this.text_ships_big) {\n      this.container.removeChild(this.text_ships_big)\n      this.text_ships_big = null\n    }\n\n    let totalKnownShips = (this.data.ships || 0) + this._getStarCarrierShips()\n\n    let carriersOrbiting = this._getStarCarriers()\n    let carrierCount = carriersOrbiting.length\n\n    let shipsText = ''\n\n    if (this.data.ownedByPlayerId || carriersOrbiting) {\n      let scramblers = 0\n      \n      if (carriersOrbiting) {\n        scramblers = carriersOrbiting.reduce( (sum, c ) => sum + (c.ships==null), 0 )\n      }\n\n      if (scramblers == carrierCount && this.data.ships == null) {\n        shipsText = '???'\n      }\n      else {\n        shipsText = totalKnownShips\n\n        if (scramblers > 0 || this.data.ships == null) {\n          shipsText += '*'\n        }\n      }\n\n      if (carrierCount) {\n        shipsText += '/'\n        shipsText += carrierCount.toString()\n\n        if (gameHelper.isStarHasMultiplePlayersInOrbit(this.game, this.data)) {\n          shipsText += '+'\n        }\n      }\n    }\n\n    if (shipsText) {\n      if (!this.text_ships_small) {\n        let bitmapFont = {fontName: \"chakrapetch\", fontSize: Star.shipsSmallSize}\n        this.text_ships_small = new PIXI.BitmapText(this.data.name, bitmapFont)\n        this.container.addChild(this.text_ships_small)\n        this.text_ships_small.x = 5\n        this.text_ships_small.y = (-this.text_ships_small.height) +( ( (Star.nameSize+Star.shipsSmallSize)/2.0 )-Star.nameSize )\n      }\n\n      if (!this.text_ships_big) {\n        let bitmapFont = {fontName: \"chakrapetch\", fontSize: Star.shipsBigSize}\n        this.text_ships_big = new PIXI.BitmapText(this.data.name, bitmapFont)\n        this.container.addChild(this.text_ships_big)\n        this.text_ships_big.x = 5\n        this.text_ships_big.y = -this.text_ships_big.height/2.0\n      }\n      this.text_ships_small.text = shipsText\n      this.text_ships_big.text = shipsText\n    }\n  }\n\n  drawInfrastructure () {\n    if ( this.text_infrastructure ) {\n      this.container.removeChild(this.text_infrastructure)\n      this.text_infrastructure = null\n    }\n\n    if (this.data.infrastructure && (this.data.infrastructure.economy == null || this.data.infrastructure.industry == null || this.data.infrastructure.science == null)) {\n      return\n    }\n\n    if (!this.text_infrastructure) {\n      if (this.data.ownedByPlayerId && this.data.infrastructure) {\n        let displayInfrastructure = `${this.data.infrastructure.economy} ${this.data.infrastructure.industry} ${this.data.infrastructure.science}`\n\n        let bitmapFont = {fontName: \"chakrapetch\", fontSize: 4}\n        this.text_infrastructure = new PIXI.BitmapText(displayInfrastructure, bitmapFont);\n        this.text_infrastructure.x = -(this.text_infrastructure.width / 2.0)\n        this.text_infrastructure.y = -15\n        this.text_infrastructure.alpha = 0.75;\n\n        this.container.addChild(this.text_infrastructure)\n      }\n    }\n  }\n\n  drawInfrastructureBulkIgnored () {\n    if (this.text_infrastructureBulkIgnored) {\n      this.container.removeChild(this.text_infrastructureBulkIgnored)\n      this.text_infrastructureBulkIgnored = null\n    }\n\n    if (this.data.ignoreBulkUpgrade == null) {\n      return\n    }\n\n    if (!this.text_infrastructureBulkIgnored) {\n      let displayInfrastructure = `${this.data.ignoreBulkUpgrade.economy ? ' ' : 'E'} ${this.data.ignoreBulkUpgrade.industry ? ' ' : 'I'} ${this.data.ignoreBulkUpgrade.science ? ' ' : 'S'}`\n\n      let bitmapFont = {fontName: \"chakrapetch\", fontSize: 8}\n      this.text_infrastructureBulkIgnored = new PIXI.BitmapText(displayInfrastructure, bitmapFont);\n      this.text_infrastructureBulkIgnored.x = -(this.text_infrastructureBulkIgnored.width / 2.0)\n      this.text_infrastructureBulkIgnored.y = 12\n      this.text_infrastructureBulkIgnored.visible = this.showIgnoreBulkUpgradeInfrastructure\n\n      this.container.addChild(this.text_infrastructureBulkIgnored)\n    }\n  }\n\n  drawScanningRange () {\n    this.graphics_scanningRange.clear()\n\n    // Get the player who owns the star.\n    let player = this._getStarPlayer()\n\n    // Dead stars do not have scanning range\n    if (!player || this._isDeadStar()) { return }\n\n    let radius = ((this.data.effectiveTechs.scanning || 1) + 1) * this.lightYearDistance\n\n    this.graphics_scanningRange.lineStyle(1, 0xFFFFFF, 0.2)\n    this.graphics_scanningRange.beginFill(player.colour.value, 0.075)\n    this.graphics_scanningRange.drawCircle(0, 0, radius)\n    this.graphics_scanningRange.endFill()\n    this.graphics_scanningRange.zIndex = -1\n    this.container.zIndex = -1\n\n    this.graphics_scanningRange.visible = this.isSelected\n  }\n\n  drawHyperspaceRange () {\n    this.graphics_hyperspaceRange.clear()\n\n    if (!this.isSelected) {\n      this.container.zIndex = 0\n    }\n\n    // Get the player who owns the star.\n    let player = this._getStarPlayer()\n\n    if (!player) { return }\n    \n    let radius = ((this.data.effectiveTechs.hyperspace || 1) + 1.5) * this.lightYearDistance\n\n    this.graphics_hyperspaceRange.lineStyle(1, 0xFFFFFF, 0.2)\n    this.graphics_hyperspaceRange.beginFill(player.colour.value, 0.075)\n    this.graphics_hyperspaceRange.drawStar(0, 0, radius, radius, radius - 3)\n    this.graphics_hyperspaceRange.endFill()\n    this.graphics_hyperspaceRange.zIndex = -1\n    this.container.zIndex = -1\n\n    this.graphics_hyperspaceRange.visible = this.isSelected\n  }\n\n  drawTarget () {\n    this.graphics_targeted.clear()\n\n    if (this.data.targeted) {\n      this.graphics_targeted.lineStyle(2, 0xFF0000)\n      this.graphics_targeted.moveTo(9, -9)\n      this.graphics_targeted.lineTo(-9, 9)\n      this.graphics_targeted.moveTo(-9, -9)\n      this.graphics_targeted.lineTo(9, 9)\n      this.graphics_targeted.closePath()\n    }\n  }\n\n  drawSelectedCircle () {\n    this.graphics_selected.clear()\n\n    if (this.isSelected) {\n      this.graphics_selected.lineStyle(0.5, 0xFFFFFF)\n      this.graphics_selected.alpha = 0.3\n      this.graphics_selected.drawCircle(0, 0, 20)\n    }\n  }\n\n  drawKingOfTheHillCircle () {\n    this.graphics_kingOfTheHill.clear()\n\n    if (this.data.isKingOfTheHillStar) {\n      this.graphics_kingOfTheHill.lineStyle(0.5, 0xFFFFFF)\n      this.graphics_kingOfTheHill.alpha = 0.5\n      this.graphics_kingOfTheHill.drawCircle(0, 0, 20)\n    }\n  }\n\n  drawDepth () {\n    const depth = Helpers.calculateDepthModifier(this.userSettings, this.data._id)\n\n    this.container.alpha = depth\n    this.baseScale = depth * (this.userSettings.map.objectsDepth === 'disabled' ? 1 : 1.5)\n  }\n  \n  onZoomChanging(zoomPercent) {\n    this.zoomPercent = zoomPercent\n    this.setScale(zoomPercent)\n    this.updateVisibility()\n  }\n\n  setScale( zoomPercent ) {\n     if(this.clampedScaling) {\n       let currentScale = zoomPercent/100\n       if (currentScale < this.minScale) {\n         this.container.scale.x = (1/currentScale)*this.minScale\n         this.container.scale.y = (1/currentScale)*this.minScale\n       } else if (currentScale > this.maxScale) {\n         this.container.scale.x = (1/currentScale)*this.maxScale\n         this.container.scale.y = (1/currentScale)*this.maxScale\n       }\n       else {\n         this.container.scale.x = this.baseScale\n         this.container.scale.y = this.baseScale\n       }\n     }\n     else {\n       this.container.scale.x = this.baseScale\n       this.container.scale.y = this.baseScale\n     }\n  }\n\n  onClicked (e) {\n    let eventData = e ? e.data : null\n    \n    if (e && e.data && e.data.originalEvent && e.data.originalEvent.button === 2) {\n      this.emit('onStarRightClicked', {\n        starData: this.data,\n        eventData\n      })\n    } else {\n      this.emit('onStarClicked', {\n        starData: this.data,\n        eventData,\n        permitCallback: () => {\n          // Need to do this otherwise sometimes text gets highlighted.\n          this.deselectAllText()\n\n          if (this._getStarPlayer()) {\n            this.updateVisibility()\n            // this.setScale()\n          }\n        }\n      })\n    }\n  }\n\n  updateVisibility() {\n    //TODO compute on the map tick\n    let aparentScale = this.container.scale.x * (this.zoomPercent/100.0)\n    let lod = Math.max(Math.min(Math.floor(aparentScale)-1, Star.maxLod-1), 0.0)\n    for(let l = 0; l<Star.maxLod; l+= 1) {\n      let ring = this.graphics_natural_resources_ring[l]\n      \n      if (ring) {\n        ring.visible = false\n      }\n    }\n\n    this.graphics_star.visible = !this.hasSpecialist() //|| this.hasBlackHole()\n    this.graphics_hyperspaceRange.visible = this.isSelected\n    this.graphics_scanningRange.visible = this.isSelected\n\n    if (this.userSettings.map.naturalResources !== 'planets') {\n      if (this.graphics_natural_resources_ring[lod]) {\n        this.graphics_natural_resources_ring[lod].visible = this.data.isInScanningRange && this.zoomPercent >= Star.zoomLevelDefinitions.naturalResources\n      }\n    }\n\n    if (this.text_name) this.text_name.visible = this.isSelected || this.zoomPercent >= Star.zoomLevelDefinitions.name\n    if (this.container_planets) this.container_planets.visible = this.data.isInScanningRange && this.zoomPercent >= Star.zoomLevelDefinitions.naturalResources\n    if (this.text_infrastructure) this.text_infrastructure.visible = this.isSelected || this.zoomPercent >= Star.zoomLevelDefinitions.infrastructure\n\n    let small_ships = this.zoomPercent >= Star.zoomLevelDefinitions.name || this.isSelected\n    let visible_ships = !!(this.data.isInScanningRange && (this.isSelected || this.isMouseOver || this.zoomPercent >= Star.zoomLevelDefinitions.shipCount))\n\n    if (this.text_ships_small) this.text_ships_small.visible = small_ships && visible_ships\n    if (this.text_ships_big) this.text_ships_big.visible = !small_ships && visible_ships\n\n    let partial_ring = (this.text_ships_big && this.text_ships_big.visible)\n      || (this.text_ships_small && this.text_ships_small.visible)\n      || (this.text_name && this.text_name.visible)\n\n    this.graphics_shape_part.visible = partial_ring\n    this.graphics_shape_full.visible = !partial_ring\n    this.graphics_shape_part_warp.visible = partial_ring && this.data.warpGate\n    this.graphics_shape_full_warp.visible = !partial_ring && this.data.warpGate\n\n    // this.baseScale = this.isSelected ? 1.5 : 1\n  }\n\n  subscribeToEvents () {\n    if (this.container_planets) {\n      this.handleOrbitPlanetsStep = this.orbitPlanentsStep.bind(this)\n      this.app.ticker.add(this.handleOrbitPlanetsStep)\n    }\n  }\n\n  unsubscribeToEvents () {\n    if (this.container_planets) {\n      this.app.ticker.remove(this.handleOrbitPlanetsStep)\n      this.handleOrbitPlanetsStep = null\n    }\n  }\n\n  deselectAllText () {\n    if (window.getSelection) {window.getSelection().removeAllRanges();}\n    else if (document.selection) {document.selection.empty();}\n  }\n\n  onMouseOver (e) {\n    this.isMouseOver = true\n\n    this.emit('onStarMouseOver', this)\n  }\n\n  onMouseOut (e) {\n    this.isMouseOver = false\n\n    this.emit('onStarMouseOut', this)\n  }\n\n  //This could in the future be a setter function on ZoomPercent\n  refreshZoom (zoomPercent) {\n    this.zoomPercent = zoomPercent\n    this._updateDepthLevel()\n  }\n\n  //I hope I can make this independant from this class at some point\n  ///Updates the zoomDepth value according to zoomPercent\n  _updateDepthLevel() {\n    let old = this.zoomDepth\n    this.zoomDepth = 1\n    for (let depth in Star.zoomLevelDefinitions) {\n      if (Star.zoomLevelDefinitions[depth] < this.zoomPercent) {\n        this.zoomDepth = depth\n      }\n    }\n\n    //Update everything\n    if (this.zoomDepth != old) this.updateVisibility()\n  }\n\n  destroy () {\n    this.container.destroy()\n    this.fixedContainer.destroy()\n  }\n\n  _isDeadStar () {\n    return this.data.naturalResources != null && this.data.naturalResources.economy <= 0 && this.data.naturalResources.industry <= 0 && this.data.naturalResources.science <= 0;\n  }\n\n  select () {\n    this.isSelected = true\n    this.drawSelectedCircle()\n    this.emit('onSelected', this.data)\n    this.updateVisibility()\n  }\n\n  unselect () {\n    this.isSelected = false\n    this.drawSelectedCircle()\n    this.emit('onUnselected', this.data)\n    this.updateVisibility()\n  }\n\n  toggleSelected () {\n    if (this.isSelected) {\n      this.unselect()\n    } else {\n      this.select()\n    }\n  }\n\n  showIgnoreBulkUpgrade () {\n    this.showIgnoreBulkUpgradeInfrastructure = true\n\n    if (this.text_infrastructureBulkIgnored) {\n      this.text_infrastructureBulkIgnored.visible = this.showIgnoreBulkUpgradeInfrastructure\n    }\n  }\n\n  hideIgnoreBulkUpgrade () {\n    this.showIgnoreBulkUpgradeInfrastructure = false\n\n    if (this.text_infrastructureBulkIgnored) {\n      this.text_infrastructureBulkIgnored.visible = this.showIgnoreBulkUpgradeInfrastructure\n    }\n  }\n}\n\nexport default Star\n"],
  "mappings": "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",
  "names": ["EventEmitter", "seededRandom", "TextureService", "gameHelper", "Helpers"]
}
