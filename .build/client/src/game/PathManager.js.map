{
  "version": 3,
  "sources": ["../../../../client/src/game/PathManager.js"],
  "sourcesContent": ["import * as PIXI from 'pixi.js-legacy'\nimport gameHelper from '../services/gameHelper'\nimport helpers from './helpers'\n\nclass PathManager {\n\n  constructor ( game, userSettings,  map ) {\n    this.map = map\n\n    this.zoomPercent = 100\n\n    this.container = new PIXI.Container()\n\n    this.chunkSize = 512.0\n\n    this.setup(game, userSettings)\n  }\n\n  setup(game, userSettings) {\n\n    this.game = game\n    this.userSettings = userSettings\n    this._loadSettings()\n\n    this.paths = Array()\n    /*\n     * each managed path is the following dictionary:\n     * {\n     *  id = string\n     *  carriers: array of carrier mapObject\n     *  graphics: PIXI.Graphics\n     * }\n     *\n    */\n    if( this.chunklessContainer ) {\n      this.container.removeChild(this.chunklessContainer)\n    }\n    if( this.chunksContainer ) {\n      this.container.removeChild(this.chunksContainer)\n    }\n\n    this.chunksContainer = new PIXI.Container()\n    this.chunklessContainer = new PIXI.Container()\n    this.container.addChild(this.chunklessContainer)\n    this.container.addChild(this.chunksContainer)\n\n    let minX = gameHelper.calculateMinStarX(this.game)\n    let minY = gameHelper.calculateMinStarY(this.game)\n    let maxX = gameHelper.calculateMaxStarX(this.game)\n    let maxY = gameHelper.calculateMaxStarY(this.game)\n\n    this.firstChunkX = Math.floor(minX/this.chunkSize)\n    this.firstChunkY = Math.floor(minY/this.chunkSize)\n    this.lastChunkX = Math.floor(maxX/this.chunkSize)\n    this.lastChunkY = Math.floor(maxY/this.chunkSize)\n\n    this.chunksXlen = (this.lastChunkX-this.firstChunkX)+1\n    this.chunksYlen = (this.lastChunkY-this.firstChunkY)+1\n\n    this.chunks = Array(this.chunksXlen)\n    for(let x=0; x<this.chunksXlen; x+=1) {\n      this.chunks[x] = Array(this.chunksYlen)\n      for(let y=0; y<this.chunksYlen; y+=1) {\n        this.chunks[x][y] = new PIXI.Container()\n        this.chunksContainer.addChild(this.chunks[x][y])\n        if(false)\n        {\n        let chunkVisualizer = new PIXI.Graphics()\n        chunkVisualizer.alpha = 0.5\n        chunkVisualizer.lineStyle(4, 0xFF0000, 1);\n        chunkVisualizer.beginFill(0xDE3249);\n        chunkVisualizer.drawRect(\n          (this.firstChunkX+x)*this.chunkSize, (this.firstChunkY+y)*this.chunkSize,\n          this.chunkSize, this.chunkSize\n        );\n        chunkVisualizer.endFill()\n        this.chunksContainer.addChild(chunkVisualizer)\n        this.chunks[x][y].visualizer = chunkVisualizer\n        }\n      }\n    }\n\n  }\n\n  _loadSettings() {\n    this.clampedScaling = this.userSettings.map.objectsScaling == 'clamped'\n    this.baseScale = 1\n    this.minScale = this.userSettings.map.objectsMinimumScale/4.0\n    this.maxScale = this.userSettings.map.objectsMaximumScale/4.0\n  }\n\n  addSharedPath( objectA, objectB, carrierMapObject ) {\n    let mapObjects = [ objectA, objectB ]\n    let objectAlpha = helpers.calculateDepthModifiers(this.userSettings, [objectA._id, objectB._id])/2\n\n    this._orderObjects(mapObjects)\n\n    let pathID = mapObjects[0].data._id + mapObjects[1].data._id\n    let path = this._findPath(pathID)\n    if(!path) {\n      path = {\n        id: pathID,\n        carriers: Array(),\n        graphics: this._createLoopedPathGraphics( mapObjects[0], mapObjects[1], carrierMapObject.colour )\n      }\n      this.paths.push(path)\n    }\n    if( !this._pathContainsCarrier(carrierMapObject, path) ) {\n      path.carriers.push(carrierMapObject)\n    }\n\n    path.graphics.alpha = objectAlpha+path.carriers.length*0.1\n    return pathID\n  }\n\n  removeSharedPath( pathID, carrier ) {\n    let path = this._findPath(pathID)\n    if(path) {\n      let pathGraphics = path.graphics\n      let carrierIndex = path.carriers.indexOf(carrier)\n      if(carrierIndex>=0) {\n        path.carriers.splice(path.carriers.indexOf(carrier), 1)\n      }\n      path.graphics.alpha = (helpers.calculateDepthModifier(this.userSettings, carrier._id)/2)+path.carriers.length*0.1\n      if(path.carriers.length === 0) {\n        if(pathGraphics.chunk) {\n          pathGraphics.chunk.removeChild(pathGraphics)\n        }\n        else {\n          this.chunklessContainer.removeChild( pathGraphics )\n        }\n        this.paths.splice(this.paths.indexOf(path), 1)\n      }\n    }\n  }\n\n  addUniquePath( mapObject, star, looped, colour ) {\n    const PATH_WIDTH = 0.5*this.userSettings.map.carrierPathWidth\n    let objectAlpha = helpers.calculateDepthModifier(this.userSettings, mapObject._id)/2\n    let lineAlpha = looped ? objectAlpha / 2 : objectAlpha\n    let lineWidth = PATH_WIDTH\n    let path\n    if(looped) {\n      path = this._createLoopedPathGraphics( mapObject, star, colour )\n    }\n    else{\n      path = this._createSolidPathGraphics( lineAlpha, lineWidth, mapObject, star, colour )\n    }\n    path.alpha = lineAlpha\n    return path\n  }\n\n  removeUniquePath( path ) {\n    if(path.chunk) {\n      path.chunk.removeChild(path)\n    }\n    else {\n      this.chunklessContainer.removeChild( path )\n    }\n  }\n\n  addPathToChunk(pathGraphics, locA, locB) {\n    let chunkXA = Math.floor(locA.x/this.chunkSize)\n    let chunkYA = Math.floor(locA.y/this.chunkSize)\n    let chunkXB = Math.floor(locB.x/this.chunkSize)\n    let chunkYB = Math.floor(locB.y/this.chunkSize)\n\n    if( (chunkXA === chunkXB) && (chunkYA === chunkYB) ) {\n      let ix = chunkXA-this.firstChunkX\n      let iy = chunkYA-this.firstChunkY\n\n      this.chunks[ix][iy].addChild(pathGraphics)\n      pathGraphics.chunk = this.chunks[ix][iy]\n    }\n    else {\n      this.chunklessContainer.addChild(pathGraphics)\n    }\n    this._updatePathScale(pathGraphics)\n  }\n\n  onTick( zoomPercent, viewport, zoomChanging ) {\n    this.setScale( zoomPercent, viewport, zoomChanging )\n    this.zoomPercent = zoomPercent\n  }\n\n  setScale( zoomPercent, viewport, zoomChanging ) {\n    let yscale = this.baseScale\n    if(this.clampedScaling) {\n      let currentScale = zoomPercent/100\n      if (currentScale < this.minScale) {\n        yscale = (1/currentScale)*this.minScale\n      } else if (currentScale > this.maxScale) {\n        yscale = (1/currentScale)*this.maxScale\n      }\n    }\n\n    if( zoomChanging ) {\n      for( let path of this.chunklessContainer.children) {\n        path.scale.y = yscale\n      }\n    }\n\n    //chunk culling\n    let firstX = Math.floor(viewport.left/this.chunkSize)\n    let firstY = Math.floor(viewport.top/this.chunkSize)\n\n    let lastX = Math.floor(viewport.right/this.chunkSize)\n    let lastY = Math.floor(viewport.bottom/this.chunkSize)\n\n    for(let ix=0; ix<this.chunksXlen; ix+=1) {\n      for(let iy=0; iy<this.chunksYlen; iy+=1) {\n        if(\n        (ix>=(firstX-this.firstChunkX))&&(ix<=(lastX-this.firstChunkX)) &&\n        (iy>=(firstY-this.firstChunkY))&&(iy<=(lastY-this.firstChunkY))\n        )\n        {\n          if( !this.chunks[ix][iy].visible ) {\n            this.chunks[ix][iy].visible = true\n            for( let path of this.chunks[ix][iy].children ) {\n              path.scale.y = yscale\n            }\n          }\n          else {\n            if( zoomChanging ) {\n              for( let path of this.chunks[ix][iy].children ) {\n                path.scale.y = yscale\n              }\n            }\n          }\n        }\n        else {\n          this.chunks[ix][iy].visible = false\n        }\n      }\n    }\n  }\n\n  _updatePathScale(path) {\n    let yscale = this.baseScale\n    if(this.clampedScaling) {\n      let currentScale = this.zoomPercent/100\n      if (currentScale < this.minScale) {\n        yscale = (1/currentScale)*this.minScale\n      } else if (currentScale > this.maxScale) {\n        yscale = (1/currentScale)*this.maxScale\n      }\n    }\n    path.scale.y = yscale\n  }\n\n  _createLoopedPathGraphics( objectA, objectB, pathColour ) {\n    const PATH_WIDTH = 0.5*this.userSettings.map.carrierPathWidth\n    let lineAlpha = 0.3\n    let lineWidth = PATH_WIDTH\n\n    let pathGraphics\n    if( this.userSettings.map.carrierLoopStyle == 'solid' ) {\n      pathGraphics = this._createSolidPathGraphics( lineAlpha, lineWidth/3.0, objectA, objectB, pathColour )\n    }\n    else {\n      pathGraphics = this._createDashedPathGraphics( lineAlpha, lineWidth, objectA, objectB, pathColour )\n    }\n    return pathGraphics\n  }\n\n  _createDashedPathGraphics( lineAlpha, lineWidth, objectA, objectB, pathColour ) {\n    let pointA = objectA.data.location\n    let pointB = objectB.data.location\n    const DASH_LENGTH = Math.min( Math.max(1, this.userSettings.map.carrierPathDashLength), 16 )\n    const VOID_LENGTH = DASH_LENGTH/2.0\n    const COMBINED_LENGTH = DASH_LENGTH+VOID_LENGTH\n\n    let pathLength = gameHelper.getDistanceBetweenLocations(pointA,pointB)\n\n    let dashCount = Math.floor( pathLength/(DASH_LENGTH+VOID_LENGTH) )\n    let endpointsLength =  pathLength - (dashCount*(DASH_LENGTH+VOID_LENGTH))\n\n    let initialX = (endpointsLength/2.0)+(VOID_LENGTH/2.0)\n    let path = new PIXI.Graphics()\n\n    path.moveTo(0, lineWidth)\n    path.beginFill(pathColour)\n    path.lineTo(0, -lineWidth)\n    path.lineTo(Math.max(initialX-VOID_LENGTH,0), -lineWidth)\n    path.lineTo(Math.max(initialX-VOID_LENGTH,0), lineWidth)\n    path.endFill()\n\n    for( let i = 0; i<dashCount; i++ ) {\n      path.moveTo(initialX+(i*COMBINED_LENGTH), lineWidth)\n      path.beginFill(pathColour)\n      path.lineTo(initialX+(i*COMBINED_LENGTH), -lineWidth)\n      path.lineTo(initialX+(i*COMBINED_LENGTH)+DASH_LENGTH, -lineWidth)\n      path.lineTo(initialX+(i*COMBINED_LENGTH)+DASH_LENGTH, lineWidth)\n      path.endFill()\n    }\n\n    path.moveTo(Math.min(initialX+(dashCount*COMBINED_LENGTH),pathLength), lineWidth)\n    path.beginFill(pathColour)\n    path.lineTo(Math.min(initialX+(dashCount*COMBINED_LENGTH),pathLength), -lineWidth)\n    path.lineTo(pathLength, -lineWidth)\n    path.lineTo(pathLength, lineWidth)\n    path.endFill()\n\n    path.rotation = Math.atan2(pointB.y-pointA.y,pointB.x-pointA.x)\n    path.position = pointA\n\n\n    /*\n    //TODO make line caps optional since they are barely visible and shit performance\n    let cap1 = new PIXI.Graphics()\n    cap1.beginFill(this.colour, lineAlpha)\n    cap1.arc(0, 0, lineWidth, 0, Math.PI)\n    cap1.endFill()\n    cap1.rotation = path.rotation+Math.PI/2.0\n    let cap2 = new PIXI.Graphics()\n    cap2.beginFill(this.colour, lineAlpha)\n    cap2.arc(0, 0, lineWidth, 0, Math.PI)\n    cap2.endFill()\n    cap2.rotation = path.rotation-Math.PI/2.0\n    // keep a list of caps so we can remove them latter\n    cap1.mapObject = objectA\n    cap2.mapObject = objectB\n    this.caps.push(cap1)\n    this.caps.push(cap2)\n    // add line caps to mapObject's container so they can inherit its scalling and be culled\n    objectA.container.addChild(cap1)\n    objectB.container.addChild(cap2)\n    */\n    this.addPathToChunk(path, pointA, pointB)\n    return path\n  }\n\n  _createSolidPathGraphics( lineAlpha, lineWidth, objectA, objectB, pathColour ) {\n    let pointA = objectA.data.location\n    let pointB = objectB.data.location\n    let pathLength = gameHelper.getDistanceBetweenLocations(pointA,pointB)\n\n    let path = new PIXI.Graphics()\n    path.beginFill(pathColour)\n    path.moveTo(0, lineWidth)\n    path.lineTo(0, -lineWidth)\n    path.lineTo(pathLength, -lineWidth)\n    path.lineTo(pathLength, lineWidth)\n    path.endFill()\n    path.rotation = Math.atan2(pointB.y-pointA.y,pointB.x-pointA.x)\n    path.position = pointA\n\n    this.addPathToChunk(path, pointA, pointB)\n    return path\n  }\n\n  _orderObjects(mapObjects) {\n    if( mapObjects[1].data._id > mapObjects[0].data._id ) {\n      let firstMapObject = mapObjects[0]\n      mapObjects[0] = mapObjects[1]\n      mapObjects[1] = firstMapObject\n    }\n  }\n\n  _pathContainsCarrier(carrierMapObject, path) {\n    let carrier = path.carriers.find( c => c.data._id === carrierMapObject.data._id )\n    return carrier\n  }\n\n  _findPath( pathID ) {\n    let path = this.paths.find( p => p.id === pathID )\n    return path\n  }\n\n}\n\nexport default PathManager\n"],
  "mappings": "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",
  "names": ["gameHelper", "helpers"]
}
