{
  "version": 3,
  "sources": ["../../../../client/src/game/background.js"],
  "sourcesContent": ["import * as PIXI from 'pixi.js-legacy'\nimport TextureService from './texture'\nimport * as rng from 'random-seed'\nimport gameHelper from '../services/gameHelper'\n\nclass Background {\n\n  static MAX_PARALLAX = 0.333\n  static STAR_DENSITY = 10 // maybe make this into a user setting?\n  static STAR_SCALE = 1.0/8.0\n  static NEBULA_SCALE = 1.5\n  static NEBULA_DELTA_SCALE = Background.NEBULA_SCALE*0.25\n  static NEBULA_DELTA_ROTATION = (Math.PI*2.0)/64.0\n\n  static zoomLevelDefinitions = {\n    nebulas: 100,\n    stars: 100,\n  }\n\n  constructor () {\n    this.container = new PIXI.Container()\n    this.starContainer = new PIXI.Container()\n    this.zoomPercent = 0\n    this.container.interactiveChildren = false\n    this.starContainer.interactiveChildren = false\n    this.time = 0\n  }\n\n  setup (game, userSettings) {\n    this.game = game\n    this.userSettings = userSettings\n    this.rng = rng.create(game._id)\n    // TODO: This should use the constant?\n    this.galaxyCenterX = gameHelper.calculateGalaxyCenterX(game)\n    this.galaxyCenterY = gameHelper.calculateGalaxyCenterY(game)\n    this.clear()\n\n    Background.zoomLevelDefinitions = userSettings.map.zoomLevels.background\n    this.container.alpha = userSettings.map.background.nebulaOpacity\n    this.starContainer.alpha = userSettings.map.background.starsOpacity\n\n    this.moveNebulas = userSettings.map.background.moveNebulas == 'enabled'\n    this.timeScale = (1.0/(2048.0*64.0)) * userSettings.map.background.nebulaMovementSpeed\n    this.blendMode = userSettings.map.background.blendMode == 'ADD' ?\n      PIXI.BLEND_MODES.ADD : PIXI.BLEND_MODES.NORMAL\n  }\n\n  clear () {\n    this.container.removeChildren()\n    this.starContainer.removeChildren()\n  }\n\n  draw () {\n    this.clear()\n\n    this.drawNebulas()\n  }\n\n  drawNebulas () {\n\n    let NEBULA_FREQUENCY = this.userSettings.map.background.nebulaFrequency\n    let NEBULA_DENSITY = this.userSettings.map.background.nebulaDensity\n\n    const FALLBACK_NEBULA_COLOR = 0xffffff\n\n    let NEBULA_COLOUR1\n    let NEBULA_COLOUR2\n    let NEBULA_COLOUR3\n\n    try {\n      NEBULA_COLOUR1 = this._getNumberFromHexString(this.userSettings.map.background.nebulaColour1)\n      NEBULA_COLOUR2 = this._getNumberFromHexString(this.userSettings.map.background.nebulaColour2)\n      NEBULA_COLOUR3 = this._getNumberFromHexString(this.userSettings.map.background.nebulaColour3)\n    }\n    catch(err) {\n      NEBULA_COLOUR1 = FALLBACK_NEBULA_COLOR\n      NEBULA_COLOUR2 = FALLBACK_NEBULA_COLOR\n      NEBULA_COLOUR3 = FALLBACK_NEBULA_COLOR\n      console.error(err)\n    }\n\n    //divide the galaxy in chunks roughly the nebula size\n\n    const CHUNK_SIZE = 512.0\n    const MINIMUM_STARS = 2 //chunks must have these many stars to be elegible to host a nebula\n    const NEBULA_MAX_OFFSET = CHUNK_SIZE/4.0\n\n    let minX = gameHelper.calculateMinStarX(this.game)\n    let minY = gameHelper.calculateMinStarY(this.game)\n    let maxX = gameHelper.calculateMaxStarX(this.game)\n    let maxY = gameHelper.calculateMaxStarY(this.game)\n\n    let firstChunkX = Math.floor(minX/CHUNK_SIZE)\n    let firstChunkY = Math.floor(minY/CHUNK_SIZE)\n    let lastChunkX = Math.floor(maxX/CHUNK_SIZE)\n    let lastChunkY = Math.floor(maxY/CHUNK_SIZE)\n\n    let chunksXlen = (lastChunkX-firstChunkX)+1\n    let chunksYlen = (lastChunkY-firstChunkY)+1\n\n    let chunks = Array(chunksXlen)\n    for(let x=0; x<chunksXlen; x+=1) {\n      chunks[x] = Array(chunksYlen)\n      for(let y=0; y<chunksYlen; y+=1) {\n        chunks[x][y] = Array()\n      }\n    }\n\n    //add locations to the chunks for quick lookup\n    for(let star of this.game.galaxy.stars) {\n      let cx = Math.floor(star.location.x/CHUNK_SIZE)-firstChunkX\n      let cy = Math.floor(star.location.y/CHUNK_SIZE)-firstChunkY\n      chunks[cx][cy].push(star.location)\n    }\n\n    //generate nebulas and starfields on the chunks\n    //TODO use these chunks to implement viewport culling\n    for( let x=0; x<chunksXlen; x+=1) {\n      for( let y=0; y<chunksYlen; y+=1) {\n        if(chunks[x][y].length > MINIMUM_STARS) {\n\n          let i\n          let texture\n          let sprite\n          let nebulaTextureCount\n          let textures\n          \n          nebulaTextureCount = TextureService.STARLESS_NEBULA_TEXTURES.length\n          textures = TextureService.STARLESS_NEBULA_TEXTURES\n\n          if( Math.round(this.rng.random()*16) <= NEBULA_FREQUENCY ) {\n            let nebulaCount = 0\n            while(nebulaCount < NEBULA_DENSITY) {\n              nebulaCount+=1\n              if(NEBULA_DENSITY>2) { if(this.rng.random()<0.5) { continue; } }\n              i = Math.round(this.rng.random()*(nebulaTextureCount-1))\n              texture = textures[i]\n              sprite = new PIXI.Sprite(texture)\n              sprite.x = (x*CHUNK_SIZE) + (firstChunkX*CHUNK_SIZE) + (CHUNK_SIZE/2.0)\n              sprite.x += NEBULA_MAX_OFFSET * Math.round( (this.rng.random()*2.0)-1.0 )\n              sprite.y = (y*CHUNK_SIZE) + (firstChunkY*CHUNK_SIZE) + (CHUNK_SIZE/2.0)\n              sprite.y += NEBULA_MAX_OFFSET * Math.round( (this.rng.random()*2.0)-1.0 )\n              sprite.anchor.set(0.5)\n\n              sprite.parallax = this.rng.random()*Background.MAX_PARALLAX\n              sprite.blendMode = this.blendMode\n\n              sprite.originX = sprite.x\n              sprite.originY = sprite.y\n              sprite.baseRotation = this.rng.random()*Math.PI*2.0\n              sprite.baseRotationTime = this.rng.random()*Math.PI*2.0\n              sprite.baseScaleTime = this.rng.random()*Math.PI*2.0\n\n              sprite.tint = NEBULA_COLOUR1\n              if(this.rng.random()>(1.0/3.0)) { sprite.tint = NEBULA_COLOUR2 }\n              if(this.rng.random()>(1.0/3.0*2.0)) { sprite.tint = NEBULA_COLOUR3 }\n              sprite.scale.x = Background.NEBULA_SCALE\n              sprite.scale.y = Background.NEBULA_SCALE\n\n              this.container.addChild(sprite)\n\n              let starCount = 0\n              texture = TextureService.STAR_TEXTURE\n              while(starCount < Background.STAR_DENSITY) {\n                starCount+=1\n                sprite = new PIXI.Sprite(texture)\n                sprite.x = (x*CHUNK_SIZE) + (firstChunkX*CHUNK_SIZE) + (CHUNK_SIZE*this.rng.random())\n                sprite.x += NEBULA_MAX_OFFSET * Math.round( (this.rng.random()*2.0)-1.0 )\n                sprite.y = (y*CHUNK_SIZE) + (firstChunkY*CHUNK_SIZE) + (CHUNK_SIZE*this.rng.random())\n                sprite.y += NEBULA_MAX_OFFSET * Math.round( (this.rng.random()*2.0)-1.0 )\n                sprite.anchor.set(0.5)\n\n                sprite.parallax = this.rng.random()*Background.MAX_PARALLAX\n                sprite.blendMode = this.blendMode\n\n                sprite.originX = sprite.x\n                sprite.originY = sprite.y\n\n                let inverseParallaxNormalized = 1.0-(sprite.parallax/Background.MAX_PARALLAX)\n                sprite.scale.x = ( (Background.STAR_SCALE) + (inverseParallaxNormalized*Background.STAR_SCALE) )/2.0\n                sprite.scale.y = ( (Background.STAR_SCALE) + (inverseParallaxNormalized*Background.STAR_SCALE) )/2.0\n\n                this.starContainer.addChild(sprite)\n              }\n\n            }\n          }\n        }\n      }\n    }\n  }\n\n  refreshZoom (zoomPercent) {\n    this.zoomPercent = zoomPercent\n\n    if (this.container) {\n      this.container.visible = zoomPercent > Background.zoomLevelDefinitions.nebulas\n    }\n    if (this.starContainer) {\n      this.starContainer.visible = zoomPercent > Background.zoomLevelDefinitions.stars\n    }\n  }\n\n  onTick (deltaTime, viewportData) {\n    this.time += deltaTime*1000\n    let compressedTime = this.time*this.timeScale\n    for (let i = 0; i < this.container.children.length; i++) {\n      let child = this.container.children[i]\n      let deltax = viewportData.center.x-child.originX\n      let deltay = viewportData.center.y-child.originY\n\n      child.x = child.originX + deltax * child.parallax\n      child.y = child.originY + deltay * child.parallax\n\n      if( this.moveNebulas ) { // TODO compare performance of this conditional branch with looping the child array twice\n        child.scale.x = Background.NEBULA_SCALE + Math.sin(child.baseScaleTime+compressedTime)*Background.NEBULA_DELTA_SCALE\n        child.rotation = child.baseRotation + Math.sin(child.baseRotationTime+compressedTime)*Background.NEBULA_DELTA_ROTATION\n      }\n    }\n\n    for (let i = 0; i < this.starContainer.children.length; i++) {\n      let child = this.starContainer.children[i]\n      let deltax = viewportData.center.x-child.originX\n      let deltay = viewportData.center.y-child.originY\n\n      child.x = child.originX + deltax * child.parallax\n      child.y = child.originY + deltay * child.parallax\n    }\n  }\n\n  _getNumberFromHexString( colorString ) {\n    let hexString = colorString.replace(/^#/, '')\n\n    if( !(/^[0-9A-F]{6}$/i.test(hexString)) ) { throw new Error('Invalid Hex Color String') }\n\n    let hex = parseInt(hexString, 16)\n\n    return hex\n  }\n}\n\nexport default Background\n"],
  "mappings": "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",
  "names": ["gameHelper", "TextureService"]
}
