{
  "version": 3,
  "sources": ["../../../../client/src/game/map.js"],
  "sourcesContent": ["import * as PIXI from 'pixi.js-legacy'\nimport Background from './background'\nimport Star from './star'\nimport Carrier from './carrier'\nimport Waypoints from './waypoints'\nimport RulerPoints from './rulerPoints'\nimport Territories from './territories'\nimport PlayerNames from './playerNames'\nimport EventEmitter from 'events'\nimport gameHelper from '../services/gameHelper'\nimport AnimationService from './animation'\nimport PathManager from './PathManager'\nimport OrbitalLocationLayer from './orbital'\nimport WormHoleLayer from './wormHole'\nimport TooltipLayer from './tooltip'\n\nclass Map extends EventEmitter {\n  static chunkSize = 256\n  // Represents the current game mode, these are as follows:\n  // galaxy - Normal galaxy view\n  // waypoints - Displays waypoints overlay for a given carrier\n  mode = 'galaxy'\n\n  constructor (app, store, gameContainer) {\n    super()\n\n    this.app = app\n    this.store = store\n    this.gameContainer = gameContainer;\n    this.container = new PIXI.Container()\n    this.container.sortableChildren = true\n\n    this.stars = []\n    this.carriers = []\n\n    this.zoomPercent = 0\n    this.minMouseChunkX = 0\n    this.maxMouseChunkX = 0\n    this.minMouseChunkY = 0\n    this.maxMouseChunkY = 0\n\n    this.zoomPercent = 100\n    this.lastZoomPercent = 100\n  }\n\n  _setupContainers () {\n    this.chunksContainer = new PIXI.Container()\n    this.backgroundContainer = new PIXI.Container()\n    this.territoryContainer = new PIXI.Container()\n    this.playerNamesContainer = new PIXI.Container()\n    this.orbitalContainer = new PIXI.Container()\n    this.wormHoleContainer = new PIXI.Container()\n    this.starContainer = new PIXI.Container()\n    this.carrierContainer = new PIXI.Container()\n    this.waypointContainer = new PIXI.Container()\n    this.rulerPointContainer = new PIXI.Container()\n    this.highlightLocationsContainer = new PIXI.Container()\n    this.tooltipContainer = new PIXI.Container()\n\n    this.container.addChild(this.backgroundContainer)\n    this.container.addChild(this.territoryContainer)\n    this.container.addChild(this.wormHoleContainer)\n    this.container.addChild(this.pathManager.container)\n    this.container.addChild(this.rulerPointContainer)\n    this.container.addChild(this.waypointContainer)\n    this.container.addChild(this.chunksContainer)\n    this.container.addChild(this.orbitalContainer)\n    this.container.addChild(this.starContainer)\n    this.container.addChild(this.carrierContainer)\n    this.container.addChild(this.highlightLocationsContainer)\n    this.container.addChild(this.playerNamesContainer)\n    this.container.addChild(this.tooltipContainer)\n  }\n\n  setup (game, userSettings) {\n    this.userSettings = userSettings\n    this.game = game\n\n    this.pathManager = new PathManager( game, userSettings, this )\n\n\n    // Cleanup events\n    this.stars.forEach(s => s.removeAllListeners())\n    this.carriers.forEach(s => s.removeAllListeners())\n\n    this.container.removeChildren()\n    this._setupContainers()\n\n    // Reset the canvas\n    this.stars = []\n    this.carriers = []\n\n    // Add stars\n    for (let i = 0; i < game.galaxy.stars.length; i++) {\n      this.setupStar(game, userSettings, game.galaxy.stars[i])\n    }\n\n    // Add carriers\n    for (let i = 0; i < game.galaxy.carriers.length; i++) {\n      this.setupCarrier(game, userSettings, game.galaxy.carriers[i])\n    }\n\n    // -----------\n    // Setup Waypoints\n    if (this.waypoints) {\n      this.waypoints.removeAllListeners()\n    }\n\n    this.waypoints = new Waypoints()\n    this.waypoints.setup(game)\n    this.waypoints.onWaypointCreatedHandler = this.waypoints.on('onWaypointCreated', this.onWaypointCreated.bind(this))\n    this.waypoints.onWaypointOutOfRangeHandler = this.waypoints.on('onWaypointOutOfRange', this.onWaypointOutOfRange.bind(this))\n\n    this.waypointContainer.addChild(this.waypoints.container)\n\n    // -----------\n    // Setup Ruler Points\n    if (this.rulerPoints) {\n      this.rulerPoints.removeAllListeners()\n    }\n\n    this.rulerPoints = new RulerPoints()\n    this.rulerPoints.setup(game)\n    this.rulerPoints.onRulerPointCreatedHandler = this.rulerPoints.on('onRulerPointCreated', this.onRulerPointCreated.bind(this))\n    this.rulerPoints.onRulerPointsClearedHandler = this.rulerPoints.on('onRulerPointsCleared', this.onRulerPointsCleared.bind(this))\n    this.rulerPoints.onRulerPointRemovedHandler = this.rulerPoints.on('onRulerPointRemoved', this.onRulerPointRemoved.bind(this))\n\n    this.rulerPointContainer.addChild(this.rulerPoints.container)\n\n    // -----------\n    // Setup Territories\n    this.territories = new Territories()\n    this.territories.setup(game, userSettings)\n\n    this.territoryContainer.addChild(this.territories.container)\n    this.territories.draw(userSettings)\n\n    // -----------\n    // Setup Player Names\n    this.playerNames = new PlayerNames()\n    this.playerNames.setup(game, userSettings)\n\n    this.playerNamesContainer.addChild(this.playerNames.container)\n    this.playerNames.draw()\n\n    // -----------\n    // Setup Background\n    this.background = new Background()\n    this.background.setup(game, userSettings)\n\n    this.backgroundContainer.addChild(this.background.container)\n    this.backgroundContainer.addChild(this.background.starContainer)\n    this.background.draw()\n\n    // -----------\n    // Setup Worm Hole Paths\n    if (this._isWormHolesEnabled()) {\n      this.wormHoleLayer = new WormHoleLayer()\n      this.drawWormHoles()\n      this.wormHoleContainer.addChild(this.wormHoleLayer.container)\n    }\n\n    // -----------\n    // Setup Orbital Locations\n    if (this._isOrbitalMapEnabled()) {\n      this.orbitalLayer = new OrbitalLocationLayer()\n      this.orbitalLayer.setup(game)\n  \n      this.orbitalContainer.addChild(this.orbitalLayer.container)\n    }\n    \n    // Setup Chunks\n    this._setupChunks()\n\n    this.tooltipLayer = new TooltipLayer()\n    this.tooltipLayer.setup(this.game)\n    this.tooltipContainer.addChild(this.tooltipLayer.container)\n  }\n\n  setupStar (game, userSettings, starData) {\n    let star = this.stars.find(x => x.data._id === starData._id)\n\n    if (!star) {\n      star = new Star(this.app)\n      this.stars.push(star)\n\n      this.starContainer.addChild(star.fixedContainer)\n\n      star.on('onStarClicked', this.onStarClicked.bind(this))\n      star.on('onStarRightClicked', this.onStarRightClicked.bind(this))\n      star.on('onStarMouseOver', this.onStarMouseOver.bind(this))\n      star.on('onStarMouseOut', this.onStarMouseOut.bind(this))\n      star.on('onSelected', this.onStarSelected.bind(this))\n      star.on('onUnselected', this.onStarUnselected.bind(this))\n    }\n\n    star.setup(this.game, starData, userSettings, game.galaxy.players, game.galaxy.carriers, game.constants.distances.lightYear)\n\n    return star\n  }\n\n  setupCarrier (game, userSettings, carrierData) {\n    let carrier = this.carriers.find(x => x.data._id === carrierData._id)\n\n    if (!carrier) {\n      carrier = new Carrier( this.pathManager )\n      this.carriers.push(carrier)\n\n      this.carrierContainer.addChild(carrier.fixedContainer)\n\n      carrier.on('onCarrierClicked', this.onCarrierClicked.bind(this))\n      carrier.on('onCarrierRightClicked', this.onCarrierRightClicked.bind(this))\n      carrier.on('onCarrierMouseOver', this.onCarrierMouseOver.bind(this))\n      carrier.on('onCarrierMouseOut', this.onCarrierMouseOut.bind(this))\n      carrier.on('onSelected', this.onCarrierSelected.bind(this))\n      carrier.on('onUnselected', this.onCarrierUnselected.bind(this))\n    }\n\n    let player = gameHelper.getPlayerById(game, carrierData.ownedByPlayerId)\n\n    carrier.setup(carrierData, userSettings, this.stars, player, game.constants.distances.lightYear)\n\n    return carrier\n  }\n\n  draw () {\n    this.drawGalaxyCenter()\n\n    if (this.mode === 'waypoints') {\n      this.drawWaypoints()\n    } else {\n      this.drawStars()\n      this.drawCarriers()\n      this.clearWaypoints()\n    }\n\n    if (this.mode === 'ruler') {\n      this.drawRulerPoints()\n    } else {\n      this.clearRulerPoints()\n    }\n  }\n\n  drawGalaxyCenter () {\n    // TODO: Is there any need to display the galaxy center for non orbital games?\n    if (this._isOrbitalMapEnabled() && this.game.constants.distances.galaxyCenterLocation) {\n        let galaxyCenterGraphics = new PIXI.Graphics()\n        let location = this.game.constants.distances.galaxyCenterLocation\n        let size = 10\n\n        galaxyCenterGraphics.lineStyle(2, 0xFFFFFF, 1)\n        galaxyCenterGraphics.moveTo(location.x, location.y - size)\n        galaxyCenterGraphics.lineTo(location.x, location.y + size)\n        galaxyCenterGraphics.moveTo(location.x - size, location.y)\n        galaxyCenterGraphics.lineTo(location.x + size, location.y)\n        galaxyCenterGraphics.alpha = 0.75\n\n        this.starContainer.addChild(galaxyCenterGraphics)\n    }\n  }\n\n  _isOrbitalMapEnabled () {\n    return this.game.constants.distances.galaxyCenterLocation && this.game.settings.orbitalMechanics.enabled === 'enabled'\n  }\n\n  _isWormHolesEnabled () {\n    return this.game.settings.specialGalaxy.randomWormHoles\n      || this.game.galaxy.stars.find(s => s.wormHoleToStarId)\n  }\n\n  _setupChunks() {\n    if(this.chunksContainer) {\n      this.chunksContainer.removeChildren()\n    }\n\n    let carrierMinX = gameHelper.calculateMinCarrierX(this.game)\n    let carrierMinY = gameHelper.calculateMinCarrierY(this.game)\n    let carrierMaxX = gameHelper.calculateMaxCarrierX(this.game)\n    let carrierMaxY = gameHelper.calculateMaxCarrierY(this.game)\n\n    let starMinX = gameHelper.calculateMinStarX(this.game)\n    let starMinY = gameHelper.calculateMinStarY(this.game)\n    let starMaxX = gameHelper.calculateMaxStarX(this.game)\n    let starMaxY = gameHelper.calculateMaxStarY(this.game)\n\n    let minX = Math.min(carrierMinX, starMinX)\n    let minY = Math.min(carrierMinY, starMinY)\n    let maxX = Math.max(carrierMaxX, starMaxX)\n    let maxY = Math.max(carrierMaxY, starMaxY)\n\n    this.firstChunkX = Math.floor(minX/Map.chunkSize)\n    this.firstChunkY = Math.floor(minY/Map.chunkSize)\n\n    this.lastChunkX = Math.floor(maxX/Map.chunkSize)\n    this.lastChunkY = Math.floor(maxY/Map.chunkSize)\n\n    this.numof_chunkX = this.lastChunkX-this.firstChunkX+1\n    this.numof_chunkY = this.lastChunkY-this.firstChunkY+1\n\n    let chunkColumns = Array(this.numof_chunkX)\n    for(let i = 0; i<this.numof_chunkX; i++) { chunkColumns[i] = Array(this.numof_chunkY) }\n\n    this.chunks = chunkColumns\n\n    for(let ix=0; ix<this.numof_chunkX; ix++) {\n      for(let iy=0; iy<this.numof_chunkY; iy++) {\n        this.chunks[ix][iy] = new PIXI.Container()\n        this.chunksContainer.addChild(this.chunks[ix][iy])\n        this.chunks[ix][iy].mapObjects = Array()\n        if(false)\n        {\n        let chunkVisualizer = new PIXI.Graphics()\n        chunkVisualizer.alpha = 0.5\n        chunkVisualizer.lineStyle(4, 0xFF0000, 1);\n        chunkVisualizer.beginFill(0xDE3249);\n        chunkVisualizer.drawRect(\n          (this.firstChunkX+ix)*Map.chunkSize, (this.firstChunkY+iy)*Map.chunkSize,\n          Map.chunkSize, Map.chunkSize\n        );\n        chunkVisualizer.endFill();\n        this.chunks[ix][iy].addChild(chunkVisualizer)\n        this.chunks[ix][iy].visualizer = chunkVisualizer\n        }\n      }\n    }\n\n    this.stars.forEach( s => this.addContainerToChunk(s, this.chunks, this.firstChunkX, this.firstChunkY) )\n    this.carriers.forEach( c => this.addContainerToChunk(c, this.chunks, this.firstChunkX, this.firstChunkY) )\n  }\n\n  addContainerToChunk (mapObject, chunks, firstX, firstY) { // Star or carrier\n    let chunkX = Math.floor(mapObject.data.location.x/Map.chunkSize)\n    let chunkY = Math.floor(mapObject.data.location.y/Map.chunkSize)\n    let ix = chunkX-firstX\n    let iy = chunkY-firstY\n\n    chunks[ix][iy].addChild(mapObject.container)\n    chunks[ix][iy].mapObjects.push(mapObject)\n  }\n\n  removeContainerFromChunk (mapObject, chunks, firstX, firstY) {\n    let chunkX = Math.floor(mapObject.data.location.x/Map.chunkSize)\n    let chunkY = Math.floor(mapObject.data.location.y/Map.chunkSize)\n    let ix = chunkX-firstX\n    let iy = chunkY-firstY\n\n    chunks[ix][iy].removeChild(mapObject.container)\n    let index = chunks[ix][iy].mapObjects.indexOf(mapObject)\n    if (index > -1) { chunks[ix][iy].mapObjects.splice(index, 1) }\n  }\n\n  removeMapObjectFromChunks (mapObject, chunks) {\n    for (let chunkX of chunks) {\n      for (let chunkY of chunkX) {\n        if (chunkY.mapObjects.indexOf(mapObject) > -1) {\n          chunkY.mapObjects.splice(chunkY.mapObjects.indexOf(mapObject), 1)\n          chunkY.removeChild(mapObject.container)\n        }\n      }\n    }\n  }\n\n  reloadGame (game, userSettings) {\n    this.game = game\n\n    this.pathManager.setup(game, userSettings)\n\n    // Check for stars that are no longer in scanning range.\n    for (let i = 0; i < this.stars.length; i++) {\n      let star = this.stars[i]\n      let gameStar = gameHelper.getStarById(game, star.data._id)\n\n      if (!gameStar) {\n        this._undrawStar(star)\n        i--\n      }\n    }\n\n    // Check for carriers that are no longer in scanning range or have been destroyed.\n    for (let i = 0; i < this.carriers.length; i++) {\n      let carrier = this.carriers[i]\n      let gameCarrier = gameHelper.getCarrierById(game, carrier.data._id)\n\n      if (!gameCarrier) {\n        this._undrawCarrier(carrier)\n        i--\n      }\n    }\n\n    // Update all of the stars and add any newly discovered ones.\n    for (let i = 0; i < game.galaxy.stars.length; i++) {\n      let starData = game.galaxy.stars[i]\n      let existing = this.stars.find(x => x.data._id === starData._id)\n\n      if (existing) {\n        existing.setup(this.game, starData, userSettings, game.galaxy.players, game.galaxy.carriers, game.constants.distances.lightYear)\n      } else {\n        existing = this.setupStar(game, userSettings, starData)\n      }\n\n      this.drawStar(existing)\n    }\n\n    // Update all of the carriers and add new ones that have been built.\n    for (let i = 0; i < game.galaxy.carriers.length; i++) {\n      let carrierData = game.galaxy.carriers[i]\n\n      let existing = this.carriers.find(x => x.data._id === carrierData._id)\n\n      if (existing) {\n        let player = gameHelper.getPlayerById(game, carrierData.ownedByPlayerId)\n\n        existing.setup(carrierData, userSettings, this.stars, player, game.constants.distances.lightYear)\n      } else {\n        existing = this.setupCarrier(game, userSettings, carrierData)\n      }\n\n      this.drawCarrier(existing)\n    }\n\n    this.drawTerritories(userSettings)\n    this.drawWormHoles()\n    this.drawPlayerNames()\n\n    this.background.setup(game, userSettings)\n    this.background.draw(game, userSettings)\n\n    this.waypoints.setup(game)\n    this.tooltipLayer.setup(game)\n\n    this._setupChunks()\n  }\n\n\n  _disableCarriersInteractivity() {\n    for (let i = 0; i < this.carriers.length; i++) {\n      let c = this.carriers[i]\n\n      c.disableInteractivity()\n    }\n  }\n\n  _enableCarriersInteractivity() {\n    for (let i = 0; i < this.carriers.length; i++) {\n      let c = this.carriers[i]\n\n      c.enableInteractivity()\n    }\n  }\n\n\n  setMode (mode, args) {\n    let wasWaypoints = this.mode === 'waypoints'\n\n    this.mode = mode\n    this.modeArgs = args\n\n    this.unselectAllCarriers()\n    this.unselectAllStars()\n    this.clearWaypoints()\n    this.clearRulerPoints()\n\n    if (this.mode === 'waypoints') {\n      this._disableCarriersInteractivity()\n      this.drawWaypoints()\n    }\n\n    if (wasWaypoints) {\n      this._enableCarriersInteractivity()\n    }\n\n    if (this.mode === 'ruler') {\n      this.drawRulerPoints()\n    }\n  }\n\n  resetMode () {\n    this.setMode('galaxy', this.modeArgs)\n  }\n\n  removeLastRulerPoint () {\n    this.rulerPoints.removeLastRulerPoint()\n  }\n\n  drawStars () {\n    for (let i = 0; i < this.stars.length; i++) {\n      let star = this.stars[i]\n\n      this.drawStar(star)\n    }\n  }\n\n  drawStar (star) {\n    star.draw()\n    star.onZoomChanging(this.zoomPercent)\n  }\n\n  _undrawStar (star) {\n    star.off('onStarClicked', this.onStarClicked.bind(this))\n    star.off('onStarRightClicked', this.onStarRightClicked.bind(this))\n\n    this.starContainer.removeChild(star.fixedContainer)\n\n    this.removeMapObjectFromChunks(star, this.chunks)\n\n    this.stars.splice(this.stars.indexOf(star), 1)\n\n    star.destroy()\n  }\n\n  drawCarriers () {\n    for (let i = 0; i < this.carriers.length; i++) {\n      let carrier = this.carriers[i]\n\n      this.drawCarrier(carrier)\n    }\n  }\n\n  drawCarrier (carrier) {\n    carrier.draw()\n    carrier.onZoomChanging(this.zoomPercent)\n  }\n\n  _undrawCarrier (carrier) {\n    carrier.removeAllListeners()\n    carrier.cleanupEventHandlers()\n    carrier.clearPaths()\n    \n    this.carrierContainer.removeChild(carrier.fixedContainer)\n\n    this.removeMapObjectFromChunks(carrier, this.chunks)\n\n    this.carriers.splice(this.carriers.indexOf(carrier), 1)\n\n    carrier.destroy()\n  }\n\n  undrawCarrier (carrierData) {\n    let existing = this.carriers.find(x => x.data._id === carrierData._id)\n\n    if (existing) {\n      this._undrawCarrier(existing)\n    }\n  }\n\n  drawWaypoints () {\n    this.waypoints.draw(this.modeArgs)\n\n    for (let i = 0; i < this.carriers.length; i++) {\n      let c = this.carriers[i]\n\n      c.drawCarrierWaypoints()\n    }\n  }\n\n  clearWaypoints () {\n    this.waypoints.clear()\n  }\n\n  drawRulerPoints () {\n    this.rulerPoints.draw(this.modeArgs)\n  }\n\n  clearRulerPoints () {\n    this.rulerPoints.setup(this.game)\n  }\n\n  drawTerritories (userSettings) {\n    this.territories.setup(this.game, userSettings)\n    this.territories.draw(userSettings)\n  }\n\n  drawWormHoles () {\n    if (this._isWormHolesEnabled()) {\n      this.wormHoleLayer.setup(this.game)\n      this.wormHoleLayer.draw()\n    }\n  }\n\n  drawPlayerNames () {\n    this.playerNames.setup(this.game, this.userSettings)\n    this.playerNames.draw(this.userSettings)\n  }\n\n  panToPlayer (game, player) {\n    let empireCenter = gameHelper.getPlayerEmpireCenter(game, player)\n\n    if (!empireCenter) {\n      return\n    }\n\n    this.gameContainer.viewport.moveCenter(empireCenter.x, empireCenter.y)\n\n    let zoomPercent = this.gameContainer.getViewportZoomPercentage()\n\n    this.refreshZoom(zoomPercent)\n  }\n\n  panToUser (game) {\n    let player = gameHelper.getUserPlayer(game)\n\n    if (!player) {\n      this.panToLocation({ x: 0, y: 0 })\n      return\n    }\n\n    this.panToPlayer(game, player)\n  }\n\n  panToStar (star) {\n    this.panToLocation(star.location)\n  }\n\n  panToCarrier (carrier) {\n    this.panToLocation(carrier.location)\n  }\n\n  panToLocation (location) {\n    this.gameContainer.viewport.moveCenter(location.x, location.y)\n  }\n\n  clickStar (starId) {\n    let star = this.stars.find(s => s.data._id === starId)\n\n    star.onClicked()\n    star.select()\n  }\n\n  clickCarrier (carrierId) {\n    let carrier = this.carriers.find(s => s.data._id === carrierId)\n\n    carrier.onClicked()\n    carrier.select()\n  }\n\n  unselectAllStars () {\n    for (let i = 0; i < this.stars.length; i++) {\n      let s = this.stars[i]\n\n      s.unselect()\n    }\n  }\n\n  unselectAllCarriers () {\n    for (let i = 0; i < this.carriers.length; i++) {\n      let c = this.carriers[i]\n\n      c.unselect()\n    }\n  }\n\n  unselectAllStarsExcept (star) {\n    this.stars\n      .filter(s => s.isSelected || s.data._id === star.data._id) // Get only stars that are selected or the e star.\n      .forEach(s => {\n        // Set all other stars to unselected.\n        if (s.data._id !== star.data._id) {\n          s.unselect()\n        }\n      })\n  }\n\n  unselectAllCarriersExcept (carrier) {\n    this.carriers\n      .filter(c => c.isSelected || c.data._id === carrier.data._id) // Get only stars that are selected or the e star.\n      .forEach(c => {\n        // Set all other carriers to unselected.\n        if (c.data._id !== carrier.data._id) {\n          c.unselect()\n        }\n      })\n  }\n\n  onTick(deltaTime) {\n    let viewportWidth = this.gameContainer.viewport.right - this.gameContainer.viewport.left\n    let viewportHeight = this.gameContainer.viewport.bottom - this.gameContainer.viewport.top\n\n    let viewportXRadius = viewportWidth / 2.0\n    let viewportYRadius = viewportHeight / 2.0\n    \n    let viewportCenter = this.gameContainer.viewport.center\n\n    this.lastViewportCenter = this.currentViewportCenter || null\n    this.currentViewportCenter = this.gameContainer.viewport.center\n\n    this.zoomPercent = (this.gameContainer.viewport.screenWidth/viewportWidth) * 100\n\n    let viewportData = {\n      center: viewportCenter,\n      xradius: viewportXRadius,\n      yradius: viewportYRadius\n    }\n\n    //chunk culling\n\n    let firstX = Math.floor(this.gameContainer.viewport.left/Map.chunkSize)\n    let firstY = Math.floor(this.gameContainer.viewport.top/Map.chunkSize)\n\n    let lastX = Math.floor(this.gameContainer.viewport.right/Map.chunkSize)\n    let lastY = Math.floor(this.gameContainer.viewport.bottom/Map.chunkSize)\n\n    let positionChanging = this.lastViewportCenter == null || this.currentViewportCenter.x !== this.lastViewportCenter.x || this.currentViewportCenter.y !== this.lastViewportCenter.y\n    let zoomChanging = Math.abs(this.zoomPercent-this.lastZoomPercent) > (1.0/128.0)\n\n    if (!positionChanging && !zoomChanging) {\n      return\n    }\n\n    for(let ix=0; ix<this.numof_chunkX; ix++) {\n      for(let iy=0; iy<this.numof_chunkY; iy++) {\n        if(\n        (ix>=(firstX-this.firstChunkX))&&(ix<=(lastX-this.firstChunkX)) &&\n        (iy>=(firstY-this.firstChunkY))&&(iy<=(lastY-this.firstChunkY))\n        ) \n        {\n          if( !this.chunks[ix][iy].visible ) {\n            this.chunks[ix][iy].visible = true\n            this.chunks[ix][iy].interactiveChildren = true\n            //this.chunks[ix][iy].visualizer.visible = true\n            for( let mapObject of this.chunks[ix][iy].mapObjects ) {\n              mapObject.onZoomChanging(this.zoomPercent)\n            }\n          }\n          else {\n            if( zoomChanging ) {\n              for( let mapObject of this.chunks[ix][iy].mapObjects ) {\n                mapObject.onZoomChanging(this.zoomPercent)\n              }\n            }\n          }\n        }\n        else {\n          this.chunks[ix][iy].visible = false\n          this.chunks[ix][iy].interactiveChildren = false\n          //this.chunks[ix][iy].visualizer.visible = false\n        }\n      }\n    }\n\n    this.pathManager.onTick(this.zoomPercent, this.gameContainer.viewport, zoomChanging)\n    this.background.onTick(deltaTime, viewportData)\n    this.playerNames.onTick(this.zoomPercent, zoomChanging)\n\n    this.lastZoomPercent = this.zoomPercent\n  }\n\n  onViewportPointerDown(e) {\n    //need Object.assign, wich is weird since pixie says it creates a new point each time\n    this.lastPointerDownPosition = Object.assign({}, e.data.global)\n  }\n\n  //not sure where to put this func\n  isDragMotion(position) {\n    let DRAG_THRESHOLD = 8 //max distance in pixels\n    let dxSquared = Math.pow(Math.abs(this.lastPointerDownPosition.x - position.x),2)\n    let dySquared = Math.pow(Math.abs(this.lastPointerDownPosition.y - position.y),2)\n    let distance = Math.sqrt(dxSquared+dySquared)\n\n    return (distance > DRAG_THRESHOLD)\n  }\n\n  onStarClicked (dic) {\n    // ignore clicks if its a drag motion\n    let e = dic.starData\n    if (dic.eventData && this.isDragMotion(dic.eventData.global)) { return }\n\n    // dispatch click event to the store, so it can be intercepted for adding star name to open message\n    this.store.commit('starClicked', {\n      star: dic.starData,\n      permitCallback: () => {\n        dic.permitCallback && dic.permitCallback()\n\n        // Clicking stars should only raise events to the UI if in galaxy mode.\n        if (this.mode === 'galaxy') {\n          let selectedStar = this.stars.find(x => x.data._id === e._id)\n\n          this.unselectAllCarriers()\n          this.unselectAllStarsExcept(selectedStar)\n\n          if (!this.tryMultiSelect(e.location)) {\n            selectedStar.toggleSelected()\n            this.emit('onStarClicked', e)\n          }\n        } else if (this.mode === 'waypoints') {\n          this.waypoints.onStarClicked(e)\n        } else if (this.mode === 'ruler') {\n          this.rulerPoints.onStarClicked(e)\n        }\n        AnimationService.drawSelectedCircle(this.app, this.container, e.location)\n      }\n    })\n  }\n\n  onStarRightClicked (dic) {\n    // ignore clicks if its a drag motion\n    let e = dic.starData\n    if (dic.eventData && this.isDragMotion(dic.eventData.global)) { return }\n\n    let owningPlayer = gameHelper.getStarOwningPlayer(this.game, dic.starData)\n\n    // dispatch click event to the store, so it can be intercepted for adding star/player name to open message\n    this.store.commit('starRightClicked', {\n      star: dic.starData,\n      player: owningPlayer,\n      permitCallback: () => {\n        dic.permitCallback && dic.permitCallback()\n        \n        if (this.mode === 'galaxy') {\n          this.emit('onStarRightClicked', e)\n        }\n      }\n    })\n  }\n\n  onCarrierClicked (dic) {\n    // ignore clicks if its a drag motion\n    if (dic.eventData && this.isDragMotion(dic.eventData.global)) { return }\n\n    let e = dic.carrierData\n    // Clicking carriers should only raise events to the UI if in galaxy mode.\n    if (this.mode === 'galaxy') {\n      // If the carrier is in orbit, pass the click over to the star instead.\n      if (e.orbiting) {\n        let star = this.stars.find(x => x.data._id === e.orbiting)\n        let eventData = dic ? dic.eventData : null\n\n        return this.onStarClicked({starData: star.data, eventData})\n      }\n\n      let selectedCarrier = this.carriers.find(x => x.data._id === e._id)\n\n      this.unselectAllStars()\n      this.unselectAllCarriersExcept(selectedCarrier)\n\n      selectedCarrier.toggleSelected()\n\n      if (!this.tryMultiSelect(e.location)) {\n        this.emit('onCarrierClicked', e)\n      } else {\n        selectedCarrier.unselect()\n      }\n    } else if (this.mode === 'ruler') {\n      this.rulerPoints.onCarrierClicked(e)\n    }\n\n    AnimationService.drawSelectedCircle(this.app, this.container, e.location)\n  }\n\n  onCarrierRightClicked (e) {\n    if (this.mode === 'galaxy') {\n      this.emit('onCarrierRightClicked', e)\n    }\n  }\n\n  onCarrierMouseOver (e) {\n    // If the carrier is orbiting something then send the mouse over event\n    // to the star.\n    if (e.data.orbiting) {\n      let star = this.stars.find(s => s.data._id === e.data.orbiting)\n      star.onMouseOver()\n    }\n\n    this.tooltipLayer.drawTooltipCarrier(e.data)\n  }\n\n  onCarrierMouseOut (e) {\n    // If the carrier is orbiting something then send the mouse over event\n    // to the star.\n    if (e.data.orbiting) {\n      let star = this.stars.find(s => s.data._id === e.data.orbiting)\n      star.onMouseOut()\n    }\n\n    this.tooltipLayer.clear()\n  }\n\n  onStarMouseOver (e) {\n    this.tooltipLayer.drawTooltipStar(e.data)\n  }\n\n  onStarMouseOut (e) {\n    this.tooltipLayer.clear()\n  }\n\n  onWaypointCreated (e) {\n    this.emit('onWaypointCreated', e)\n  }\n\n  onWaypointOutOfRange (e) {\n    this.emit('onWaypointOutOfRange', e)\n  }\n\n  onRulerPointCreated (e) {\n    this.emit('onRulerPointCreated', e)\n  }\n\n  onRulerPointRemoved (e) {\n    this.emit('onRulerPointRemoved', e)\n  }\n\n  onRulerPointsCleared (e) {\n    this.emit('onRulerPointsCleared', e)\n  }\n\n  tryMultiSelect (location) {\n    // See if there are any other objects close by, if so then\n    // we want to allow the user to select which one they want as there might be\n    // objects on the map that are on top of eachother or very close together.\n    const distance = 10\n\n    let closeStars = this.stars\n      .map(s => {\n        return {\n          ref: s,\n          type: 'star',\n          distance: gameHelper.getDistanceBetweenLocations(location, s.data.location),\n          data: s.data\n        }\n      })\n      .filter(s => s.distance <= distance)\n\n    let closeCarriers = this.carriers\n      .map(s => {\n        return {\n          ref: s,\n          type: 'carrier',\n          distance: gameHelper.getDistanceBetweenLocations(location, s.data.location),\n          data: s.data\n        }\n      })\n      .filter(s => s.distance <= distance)\n\n    // Combine the arrays and order by closest first.\n    let closeObjects = closeStars.concat(closeCarriers)\n      .sort((a, b) => {\n        if (a.type.localeCompare(b.type)) { // Sort the star first\n          return 1\n        }\n\n        return a.distance < b.distance // Then distance ascending.\n      })\n\n    if (closeObjects.length > 1) {\n      let star = closeObjects.find(co => co.type === 'star')\n\n      if (star) {\n        star.ref.toggleSelected() // Select to star to get the ranges drawn on the map\n      }\n\n      let eventObj = closeObjects.map(co => {\n        return {\n          type: co.type,\n          data: co.data,\n          distance: co.distance\n        }\n      })\n\n      this.emit('onObjectsClicked', eventObj)\n\n      return true\n    }\n\n    return false\n  }\n\n  refreshZoom (zoomPercent) {\n    this.zoomPercent = zoomPercent\n\n    this.stars.forEach(s => s.refreshZoom(zoomPercent))\n    this.carriers.forEach(c => c.refreshZoom(zoomPercent))\n\n    if (this.territories) this.territories.refreshZoom(zoomPercent)\n    if (this.playerNames) this.playerNames.refreshZoom(zoomPercent)\n    if (this.background) this.background.refreshZoom(zoomPercent)\n  }\n\n  highlightLocation (location, opacity = 1) {\n    let graphics = new PIXI.Graphics()\n    let radius = 12\n\n    graphics.lineStyle(1, 0xFFFFFF, opacity)\n    graphics.drawStar(location.x, location.y, radius, radius, radius - 3)\n\n    this.highlightLocationsContainer.addChild(graphics)\n  }\n\n  clearHighlightedLocations () {\n    this.highlightLocationsContainer.removeChildren()\n  }\n\n  showIgnoreBulkUpgrade () {\n    for (let star of this.stars) {\n      star.showIgnoreBulkUpgrade()\n    }\n  }\n\n  hideIgnoreBulkUpgrade () {\n    for (let star of this.stars) {\n      star.hideIgnoreBulkUpgrade()\n    }\n  }\n\n  onStarSelected (e) {\n    if (this._isOrbitalMapEnabled()) {\n      this.orbitalLayer.drawStar(e)\n    }\n  }\n\n  onStarUnselected (e) {\n    if (this._isOrbitalMapEnabled()) {\n      this.orbitalLayer.clear()\n    }\n  }\n\n  onCarrierSelected (e) {\n    if (this._isOrbitalMapEnabled()) {\n      this.orbitalLayer.drawCarrier(e)\n    }\n  }\n\n  onCarrierUnselected (e) {\n    if (this._isOrbitalMapEnabled()) {\n      this.orbitalLayer.clear()\n    }\n  }\n}\n\nexport default Map\n"],
  "mappings": "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",
  "names": ["EventEmitter", "PathManager", "Waypoints", "RulerPoints", "Territories", "PlayerNames", "Background", "WormHoleLayer", "OrbitalLocationLayer", "TooltipLayer", "Star", "Carrier", "gameHelper", "AnimationService"]
}
