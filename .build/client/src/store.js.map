{
  "version": 3,
  "sources": ["../../../client/src/store.js"],
  "sourcesContent": ["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport VuexPersist from 'vuex-persist'\nimport eventBus from './eventBus'\nimport GameHelper from './services/gameHelper'\nimport MentionHelper from './services/mentionHelper'\nimport GameContainer from './game/container'\nimport SpecialistService from './services/api/specialist';\n\nVue.use(Vuex)\n\nconst vuexPersist = new VuexPersist({\n  key: 'solaris',\n  storage: localStorage\n})\n\nexport default new Vuex.Store({\n  state: {\n    userId: null,\n    game: null,\n    tick: 0,\n    cachedConversationComposeMessages: {},\n    currentConversation: null,\n    starSpecialists: null,\n    carrierSpecialists: null,\n    settings: null,\n    confirmationDialog: {}\n  },\n  mutations: {\n    // Menu\n    setMenuState (state, menuState) {\n      menuState.state = menuState.state || null\n      menuState.args = menuState.args || null\n\n      // Toggle menu if its already open.\n      if (menuState.state === state.menuState && menuState.args === state.menuArguments) {\n        state.menuArguments = null\n        state.menuState = null\n      } else {\n        state.menuArguments = menuState.args\n        state.menuState = menuState.state\n      }\n\n      eventBus.$emit('onMenuRequested', menuState)\n    },\n    clearMenuState (state) {\n      state.menuState = null\n      state.menuArguments = null\n\n      eventBus.$emit('onMenuRequested', {\n        state: null,\n        args: null\n      })\n    },\n\n    setMenuStateChat (state, menuState) {\n      menuState.state = menuState.state || null\n      menuState.args = menuState.args || null\n\n      state.menuArgumentsChat = menuState.args\n      state.menuStateChat = menuState.state\n    },\n    clearMenuStateChat (state) {\n      state.menuStateChat = null\n      state.menuArgumentsChat = null\n    },\n    // -------\n\n    // TUTORIAL\n    setTutorialPage (state, page) {\n      state.tutorialPage = page || 0\n    },\n    clearTutorialPage (state) {\n      state.tutorialPage = 0\n    },\n    // -------\n\n    setCarrierSpecialists (state, carrierSpecialists) {\n      state.carrierSpecialists = carrierSpecialists;\n    },\n    setStarSpecialists (state, starSpecialists) {\n      state.starSpecialists = starSpecialists;\n    },\n\n    setUserId (state, userId) {\n      state.userId = userId\n    },\n    clearUserId (state) {\n      state.userId = null\n    },\n\n    setUsername (state, username) {\n      state.username = username\n    },\n    clearUsername (state) {\n      state.username = null\n    },\n\n    setRoles (state, roles) {\n      state.roles = roles\n    },\n    clearRoles (state) {\n      state.roles = null\n    },\n\n    setUserCredits (state, credits) {\n      state.userCredits = credits\n    },\n    clearUserCredits (state) {\n      state.userCredits = null\n    },\n\n    setUserIsEstablishedPlayer (state, isEstablishedPlayer) {\n      state.userIsEstablishedPlayer = isEstablishedPlayer\n    },\n    clearUserIsEstablishedPlayer (state) {\n      state.userIsEstablishedPlayer = null\n    },\n\n    setTick (state, tick) {\n      state.tick = tick\n    },\n    setProductionTick (state, tick) {\n      state.productionTick = tick\n    },\n\n    setGame (state, game) {\n      state.game = game\n    },\n    clearGame (state) {\n      state.game = null\n      state.cachedConversationComposeMessages = {}\n      state.currentConversation = null;\n    },\n\n    setSettings (state, settings) {\n      state.settings = settings\n    },\n    clearSettings (state) {\n      state.settings = null\n    },\n    setConfirmationDialogSettings (state, settings) {\n      state.confirmationDialog = settings\n    },\n\n    setUnreadMessages (state, count) {\n      state.unreadMessages = count\n    },\n    clearUnreadMessages (state) {\n      state.unreadMessages = null\n    },\n\n    openConversation (state, data) {\n      state.currentConversation = {\n        id: data,\n        element: null,\n        text: state.cachedConversationComposeMessages[data]\n      }\n    },\n    closeConversation (state) {\n      if (state.currentConversation) {\n        const id = state.currentConversation.id;\n        state.cachedConversationComposeMessages[id] = state.currentConversation.text\n        state.currentConversation = null\n      }\n    },\n    updateCurrentConversationText (state, data) {\n      state.currentConversation.text = data\n    },\n    resetCurrentConversationText (state, data) {\n      state.currentConversation.text = ''\n    },\n    setConversationElement (state, data) {\n      state.currentConversation.element = data\n    },\n    playerClicked (state, data) {\n      if (state.currentConversation) {\n        MentionHelper.addMention(state.currentConversation, 'player', data.player.alias)\n      } else {\n        data.permitCallback(data.player)\n      }\n    },\n    starClicked (state, data) {\n      if (state.currentConversation) {\n        MentionHelper.addMention(state.currentConversation, 'star', data.star.name)\n      } else {\n        data.permitCallback(data.star)\n      }\n    },\n    starRightClicked (state, data) {\n      if (state.currentConversation && data.player) {\n        MentionHelper.addMention(state.currentConversation, 'player', data.player.alias)\n      } else {\n        data.permitCallback(data.star)\n      }\n    },\n    replaceInConversationText (state, data) {\n      MentionHelper.useSuggestion(state.currentConversation, data)\n    },\n\n    // ----------------\n    // Sockets\n\n    gameStarted (state, data) {\n      state.game.state = data.state\n    },\n\n    gamePlayerJoined (state, data) {\n      let player = GameHelper.getPlayerById(state.game, data.playerId)\n\n      player.isOpenSlot = false\n      player.alias = data.alias\n      player.avatar = data.avatar\n      player.defeated = false\n      player.defeatedDate = null\n      player.afk = false\n    },\n\n    gamePlayerQuit (state, data) {\n      let player = GameHelper.getPlayerById(state.game, data.playerId)\n\n      player.isOpenSlot = true\n      player.alias = 'Empty Slot'\n      player.avatar = null\n    },\n\n    gamePlayerReady (state, data) {\n      let player = GameHelper.getPlayerById(state.game, data.playerId)\n\n      player.ready = true\n    },\n\n    gamePlayerNotReady (state, data) {\n      let player = GameHelper.getPlayerById(state.game, data.playerId)\n\n      player.ready = false\n    },\n\n    gamePlayerReadyToQuit (state, data) {\n      let player = GameHelper.getPlayerById(state.game, data.playerId)\n\n      player.readyToQuit = true\n    },\n\n    gamePlayerNotReadyToQuit (state, data) {\n      let player = GameHelper.getPlayerById(state.game, data.playerId)\n\n      player.readyToQuit = false\n    },\n\n    gameStarBulkUpgraded (state, data) {\n      let player = GameHelper.getUserPlayer(state.game)\n\n      data.stars.forEach(s => {\n        let star = GameHelper.getStarById(state.game, s.starId)\n\n        star.infrastructure[data.infrastructureType] = s.infrastructure\n\n        if (star.upgradeCosts && s.infrastructureCost) {\n          star.upgradeCosts[data.infrastructureType] = s.infrastructureCost\n        }\n\n        if (s.manufacturing != null) {\n          player.stats.newShips -= star.manufacturing // Deduct old value\n          star.manufacturing = s.manufacturing\n          player.stats.newShips += s.manufacturing // Add the new value\n        }\n\n        GameContainer.reloadStar(star)\n      })\n\n      player.credits -= data.cost\n      player.stats.newShips = Math.round((player.stats.newShips + Number.EPSILON) * 100) / 100\n\n      if (data.currentResearchTicksEta) {\n        player.currentResearchTicksEta = data.currentResearchTicksEta\n      }\n      \n      if (data.nextResearchTicksEta) {\n        player.nextResearchTicksEta = data.nextResearchTicksEta\n      }\n      \n      // Update player total stats.\n      switch (data.infrastructureType) {\n        case 'economy':\n          player.stats.totalEconomy += data.upgraded\n          break;\n        case 'industry':\n          player.stats.totalIndustry += data.upgraded\n          break;\n        case 'science':\n          player.stats.totalScience += data.upgraded\n          break;\n      }\n    },\n    gameStarWarpGateBuilt (state, data) {\n      let star = GameHelper.getStarById(state.game, data.starId)\n\n      star.warpGate = true\n\n      GameHelper.getUserPlayer(state.game).credits -= data.cost\n\n      GameContainer.reloadStar(star)\n    },\n    gameStarWarpGateDestroyed (state, data) {\n      let star = GameHelper.getStarById(state.game, data.starId)\n\n      star.warpGate = false\n\n      GameContainer.reloadStar(star)\n    },\n    gameStarCarrierBuilt (state, data) {\n      let carrier = GameHelper.getCarrierById(state.game, data.carrier._id)\n\n      if (!carrier) {\n        state.game.galaxy.carriers.push(data.carrier)\n      }\n\n      let star = GameHelper.getStarById(state.game, data.carrier.orbiting)\n      star.ships = data.starShips\n\n      let userPlayer = GameHelper.getUserPlayer(state.game)\n      userPlayer.credits -= star.upgradeCosts.carriers\n      userPlayer.stats.totalCarriers++\n\n      GameContainer.reloadStar(star)\n      GameContainer.reloadCarrier(data.carrier)\n    },\n    gameStarCarrierShipTransferred (state, data) {\n      let star = GameHelper.getStarById(state.game, data.starId)\n      let carrier = GameHelper.getCarrierById(state.game, data.carrierId)\n\n      star.ships = data.starShips\n      carrier.ships = data.carrierShips\n\n      GameContainer.reloadStar(star)\n      GameContainer.reloadCarrier(carrier)\n    },\n    gameStarAllShipsTransferred (state, data) {\n      let star = GameHelper.getStarById(state.game, data.star._id)\n\n      star.ships = data.star.ships\n\n      data.carriers.forEach(carrier => {\n        let mapObjectCarrier = GameHelper.getCarrierById(state.game, carrier._id)\n\n        mapObjectCarrier.ships = carrier.ships\n      })\n    },\n    gameStarAbandoned (state, data) {\n      let star = GameHelper.getStarById(state.game, data.starId)\n\n      let player = GameHelper.getPlayerById(state.game, star.ownedByPlayerId)\n      player.stats.totalStars--\n\n      star.ownedByPlayerId = null\n      star.ships = 0\n\n      // Redraw and remove carriers\n      let carriers = state.game.galaxy.carriers.filter(x => x.orbiting && x.orbiting === star._id && x.ownedByPlayerId === player._id)\n\n      carriers.forEach(c => {\n        GameContainer.undrawCarrier(c)\n        state.game.galaxy.carriers.splice(state.game.galaxy.carriers.indexOf(c), 1)\n      })\n\n      // Redraw the star\n      GameContainer.reloadStar(star)\n    },\n    gameCarrierScuttled (state, data) {\n      let carrier = GameHelper.getCarrierById(state.game, data.carrierId)\n      let star = GameHelper.getStarById(state.game, carrier.orbiting)\n      let player = GameHelper.getPlayerById(state.game, carrier.ownedByPlayerId)\n\n      player.stats.totalCarriers--\n\n      if (carrier.specialistId) {\n        player.stats.totalSpecialists--\n      }\n\n      GameContainer.undrawCarrier(carrier)\n\n      state.game.galaxy.carriers.splice(state.game.galaxy.carriers.indexOf(carrier), 1)\n\n      if (star) {\n        GameContainer.reloadStar(star)\n      }\n    },\n    playerDebtSettled (state, data) {\n      let player = GameHelper.getUserPlayer(state.game)\n\n      if (data.creditorPlayerId === player._id) {\n        if (data.ledgerType === 'credits') {\n          player.credits += data.amount\n        } else {\n          player.creditsSpecialists += data.amount\n        }\n      }\n    },\n    starSpecialistHired (state, data) {\n      let star = GameHelper.getStarById(state.game, data.starId)\n\n      star.specialistId = data.specialist.id\n      star.specialist = data.specialist\n\n      GameContainer.reloadStar(star)\n    },\n    carrierSpecialistHired (state, data) {\n      let carrier = GameHelper.getCarrierById(state.game, data.carrierId)\n\n      carrier.specialistId = data.specialist.id\n      carrier.specialist = data.specialist\n\n      GameContainer.reloadCarrier(carrier)\n    },\n\n    gameStarEconomyUpgraded (state, data) {\n      data.type = 'economy'\n      let star = GameHelper.starInfrastructureUpgraded(state.game, data)\n      GameContainer.reloadStar(star)\n    },\n    gameStarIndustryUpgraded (state, data) {\n      data.type = 'industry'\n      let star = GameHelper.starInfrastructureUpgraded(state.game, data)\n      GameContainer.reloadStar(star)\n    },\n    gameStarScienceUpgraded (state, data) {\n      data.type = 'science'\n      let star = GameHelper.starInfrastructureUpgraded(state.game, data)\n      GameContainer.reloadStar(star)\n    },\n  },\n  actions: {\n    async loadSpecialistData ({ commit, state }) {\n      const gameId = state.game._id;\n\n      let requests = [\n        SpecialistService.getCarrierSpecialists(gameId),\n        SpecialistService.getStarSpecialists(gameId)\n      ]\n\n      const responses = await Promise.all(requests)\n\n      commit('setCarrierSpecialists', responses[0].data)\n      commit('setStarSpecialists', responses[1].data)\n    },\n    async confirm ({ commit, state }, data) {\n      const modal = new bootstrap.Modal(window.$('#confirmModal'), {})\n      const close = async () => {\n        modal.toggle()\n        await new Promise((resolve, reject) => setTimeout(resolve, 400));\n      }\n      return new Promise((resolve, reject) => {\n        const settings = {\n          confirmText: data.confirmText || 'Yes',\n          cancelText: data.cancelText || 'No',\n          hideCancelButton: Boolean(data.hideCancelButton),\n          cover: Boolean(data.cover),\n          titleText: data.titleText,\n          text: data.text,\n          onConfirm: async () => {\n            await close()\n            resolve(true)\n          },\n          onCancel: async () => {\n            await close()\n            resolve(false)\n          }\n        }\n        commit('setConfirmationDialogSettings', settings)\n        modal.toggle()\n      })\n    }\n  },\n  getters: {\n    getConversationMessage: (state) => (conversationId) => {\n      return state.cachedConversationComposeMessages[conversationId] || ''\n    }\n  },\n  plugins: [vuexPersist.plugin]\n})\n"],
  "mappings": "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",
  "names": ["Vue", "Vuex", "VuexPersist", "eventBus", "MentionHelper", "GameHelper", "GameContainer", "SpecialistService"]
}
