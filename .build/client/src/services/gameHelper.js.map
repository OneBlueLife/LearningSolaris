{
  "version": 3,
  "sources": ["../../../../client/src/services/gameHelper.js"],
  "sourcesContent": ["import moment from 'moment'\nimport DiplomacyHelper from './diplomacyHelper'\n\nclass GameHelper {\n  getUserPlayer (game) {\n    // The user's player will be the only player that has a user ID on the player object.\n    return game.galaxy.players.find(p => p.userId)\n  }\n\n  getPlayerByAlias (game, playerName) {\n    return game.galaxy.players.find(p => p.alias === playerName)\n  }\n\n  getPlayerById (game, playerId) {\n    return game.galaxy.players.find(x => x._id === playerId)\n  }\n\n  getPlayerColour (game, playerId) {\n    let player = this.getPlayerById(game, playerId)\n\n    return this.getFriendlyColour(player.colour.value)\n  }\n\n  getFriendlyColour (colour) {\n    return colour.replace('0x', '#')\n  }\n\n  getStarByName (game, starName) {\n    return game.galaxy.stars.find(s => s.name === starName)\n  }\n\n  getStarById (game, starId) {\n    return game.galaxy.stars.find(x => x._id === starId)\n  }\n\n  getCarrierById (game, carrierId) {\n    return game.galaxy.carriers.find(x => x._id === carrierId)\n  }\n\n  getStarOwningPlayer (game, star) {\n    return game.galaxy.players.find(x => x._id === star.ownedByPlayerId)\n  }\n\n  getStarsOwnedByPlayer (player, stars) {\n    return stars.filter(s => s.ownedByPlayerId && s.ownedByPlayerId === player._id)\n  }\n\n  getPlayerHomeStar (player, stars) {\n    return stars.find(s => s._id === player.homeStarId)\n  }\n\n  getCarrierOwningPlayer (game, carrier) {\n    return game.galaxy.players.find(x => x._id === carrier.ownedByPlayerId)\n  }\n\n  isOwnedByUserPlayer (game, carrierOrStar) {\n    const userPlayer = this.getUserPlayer(game)\n\n    return userPlayer && carrierOrStar.ownedByPlayerId === userPlayer._id\n  }\n\n  getCarrierOrbitingStar (game, carrier) {\n    return game.galaxy.stars.find(x => x._id === carrier.orbiting)\n  }\n\n  getCarriersOrbitingStar (game, star) {\n    return game.galaxy.carriers\n      .filter(x => x.orbiting === star._id)\n      .sort((a, b) => (a.ticksEta || 0) - (b.ticksEta || 0))\n  }\n\n  isCarrierInTransit (carrier) {\n    return carrier.orbiting == null\n  }\n\n  isCarrierInTransitToWaypoint (carrier, waypoint) {\n    return carrier.waypoints.indexOf(waypoint) === 0 && this.isCarrierInTransit(carrier)\n  }\n\n  getStarTotalKnownShips (game, star) {\n    let carriers = this.getCarriersOrbitingStar(game, star)\n\n    return (star.ships || 0) + carriers.reduce((sum, c) => sum + (c.ships || 0), 0)\n  }\n\n  getHyperspaceDistance (game, player, carrier) {\n    return ((carrier.effectiveTechs.hyperspace || 1) + 1.5) * game.constants.distances.lightYear\n  }\n\n  getScanningLevelByDistance (game, distance) {\n    let distancePerLevel = Math.ceil(distance / game.constants.distances.lightYear - 1)\n    return distancePerLevel || 1\n  }\n\n  getHyperspaceLevelByDistance (game, distance) {\n    let distancePerLevel = Math.ceil(distance / game.constants.distances.lightYear - 1.5)\n\n    return distancePerLevel || 1\n  }\n\n  getDistanceBetweenLocations (loc1, loc2) {\n    return Math.hypot(loc2.x - loc1.x, loc2.y - loc1.y);\n  }\n\n  getClosestStar (stars, point) {\n    let closestStar = stars[0]\n    let smallerDistance = Number.MAX_VALUE\n\n    for(let star of stars) {\n      let distance = this.getDistanceBetweenLocations(star.location, point)\n\n      if (distance < smallerDistance) {\n        smallerDistance = distance\n        closestStar = star\n      }\n    }\n\n    return {\n      star: closestStar,\n      distance: smallerDistance\n    }\n  }\n\n  getClosestPlayerStar (stars, point, player) {\n    let closestStar = stars[0]\n    let smallerDistance = Number.MAX_VALUE\n\n    let playerStars = this.getStarsOwnedByPlayer(player, stars)\n\n    for(let star of playerStars) {\n      let distance = this.getDistanceBetweenLocations(star.location, point)\n\n      if (distance < smallerDistance ) {\n        smallerDistance = distance\n        closestStar = star\n      }\n    }\n\n    return closestStar\n  }\n\n  getAngleBetweenLocations (loc1, loc2) {\n    return Math.atan2(loc2.y - loc1.y, loc2.x - loc1.x)\n  }\n\n  getPointFromLocation (loc, angle, distance) {\n    return {\n      x: loc.x + (Math.cos(angle) * distance),\n      y: loc.y + (Math.sin(angle) * distance)\n    }\n  }\n\n  getTicksBetweenLocations (game, carrier, locs, tickDistanceModifier = 1) {\n    let totalTicks = 0\n    let tickDistance = game.settings.specialGalaxy.carrierSpeed * tickDistanceModifier\n\n    // Factor in any local speed modifers\n    if (carrier && carrier.specialist && carrier.specialist.modifiers.local) {\n      tickDistance *= carrier.specialist.modifiers.local.speed || 1\n    }\n\n    for (let i = 1; i < locs.length; i++) {\n      let prevLoc = locs[i - 1]\n      let currLoc = locs[i]\n      let distance = this.getDistanceBetweenLocations(prevLoc.location, currLoc.location)\n\n      let ticks\n\n      // Check for worm holes\n      if (prevLoc.type === 'star' && currLoc.type === 'star' && \n        prevLoc.object.wormHoleToStarId === currLoc.object._id && currLoc.object.wormHoleToStarId === prevLoc.object._id) {\n        ticks = 1\n      } else {\n        ticks = Math.ceil(distance / tickDistance)\n      }\n\n      totalTicks += ticks\n    }\n\n    return totalTicks\n  }\n\n  getActualTicksBetweenLocations (game, player, carrier, sourceStar, destinationStar, hyperspaceDistance) {\n    const instantSpeed = this.isStarPairWormHole(sourceStar, destinationStar)\n\n    if (instantSpeed) {\n      return 1 // 1 tick for worm hole pairs\n    }\n\n    // If the carrier is within hyperspace range and can travel at warp speed, then return the warp speed ticks\n    // otherwise return the normal speed\n    const distanceBetweenStars = this.getDistanceBetweenLocations(sourceStar.location, destinationStar.location)\n\n    const isInHyperspaceRange = distanceBetweenStars <= hyperspaceDistance\n    const canWarpSpeed = this.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar)\n    \n    if (isInHyperspaceRange && canWarpSpeed) {\n      return this.getTicksBetweenLocations(game, carrier, [sourceStar, destinationStar], game.constants.distances.warpSpeedMultiplier)\n    }\n\n    return this.getTicksBetweenLocations(game, carrier, [sourceStar, destinationStar])\n  }\n\n  getTicksToProduction (game, currentTick, currentProductionTick) {\n    let productionTicks = game.settings.galaxy.productionTicks\n\n    let ticksToProduction = ((currentProductionTick + 1) * productionTicks) - currentTick\n\n    return ticksToProduction\n  }\n\n  getCountdownTime (game, date) {\n    if (date == null) {\n      return 'Unknown'\n    }\n\n    let relativeTo = moment().utc()\n    let t = moment(date).utc() - relativeTo // Deduct the future date from now.\n\n    return t\n  }\n\n  getCountdownTimeString (game, date, largestUnitOnly = false) {\n    if (date == null) {\n      return 'Unknown'\n    }\n\n    if (this.isGameFinished(game)) {\n      return 'N/A'\n    }\n\n    let t = this.getCountdownTime(game, date)\n\n    return this.getDateToString(t, largestUnitOnly)\n  }\n\n  getCountdownTimeStringByTicks (game, ticks, useNowDate = false, largestUnitOnly = false) {\n    if (game == null) {\n      return ''\n    }\n\n    if (game.settings.gameTime.gameType === 'realTime') {\n      let date = useNowDate ? moment().utc() : game.state.lastTickDate\n\n      let timeRemainingEtaDate = this.calculateTimeByTicks(ticks, game.settings.gameTime.speed, date)\n\n      let timeRemainingEta = this.getCountdownTimeString(game, timeRemainingEtaDate, largestUnitOnly)\n\n      return timeRemainingEta\n    }\n\n    return `${ticks} ticks`\n  }\n\n  getDateToString (date, largestUnitOnly = false) {\n    let days = Math.floor(date / (1000 * 60 * 60 * 24))\n    let hours = Math.floor((date % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n    let mins = Math.floor((date % (1000 * 60 * 60)) / (1000 * 60))\n    let secs = Math.floor((date % (1000 * 60)) / 1000)\n\n    if (secs < 0) {\n      return 'Pending...'\n    }\n\n    let str = ''\n    let showDays = false\n    let showHours = false\n\n    if (days > 0) {\n      str += `${days}d `\n      showDays = true\n\n      if (largestUnitOnly && hours === 0 && mins === 0 && secs === 0) {\n        return str\n      }\n    }\n\n    if (showDays || hours > 0) {\n      str += `${hours}h `\n      showHours = true\n\n      if (largestUnitOnly && mins === 0 && secs === 0) {\n        return str\n      }\n    }\n\n    if (showHours || mins > 0) {\n      str += `${mins}m `\n\n      if (largestUnitOnly && secs === 0) {\n        return str\n      }\n    }\n\n    str += `${secs}s`\n\n    return str\n  }\n\n  getCountdownTimeForProductionCycle (game) {\n    const ticksToProduction = this.getTicksToProduction(game, game.state.tick, game.state.productionTick);\n\n    return this.calculateTimeByTicks(ticksToProduction, game.settings.gameTime.speed, game.state.lastTickDate);\n  }\n\n  getCountdownTimeForTurnTimeout (game) {\n    return moment(game.state.lastTickDate).utc().add('minutes', game.settings.gameTime.maxTurnWait)\n  }\n\n  getCountdownTimeStringForTurnTimeout (game) {\n    return this.getCountdownTimeString(game, this.getCountdownTimeForTurnTimeout(game))\n  }\n\n  // TODO: This has all been copy/pasted from the API services\n  // is there a way to share these functions in a core library?\n  calculateWaypointTicks(game, carrier, waypoint) {\n    const delayTicks = waypoint.delayTicks || 0\n\n    let carrierOwner = this.getPlayerById(game, carrier.ownedByPlayerId)\n\n    // if the waypoint is going to the same star then it is at least 1\n    // tick, plus any delay ticks.\n    if (waypoint.source === waypoint.destination) {\n        return 1 + delayTicks\n    }\n\n    let sourceStar = this.getStarById(game, waypoint.source)\n    let destinationStar = this.getStarById(game, waypoint.destination)\n\n    // If the carrier can travel instantly then it'll take 1 tick + any delay.\n    let instantSpeed = sourceStar && this.isStarPairWormHole(sourceStar, destinationStar)\n\n    if (instantSpeed) {\n        return 1 + delayTicks\n    }\n\n    let source = sourceStar == null ? carrier.location : sourceStar.location\n    let destination = destinationStar.location\n\n    // If the carrier is already en-route, then the number of ticks will be relative\n    // to where the carrier is currently positioned.\n    if (!carrier.orbiting && carrier.waypoints[0]._id === waypoint._id) {\n        source = carrier.location\n    }\n\n    let distance = this.getDistanceBetweenLocations(source, destination)\n    let warpSpeed = this.canTravelAtWarpSpeed(game, carrierOwner, carrier, sourceStar, destinationStar)\n\n    // Calculate how far the carrier will move per tick.\n    let tickDistance = this.getCarrierDistancePerTick(game, carrier, warpSpeed, instantSpeed)\n    let ticks = 1\n\n    if (tickDistance) {\n        ticks = Math.ceil(distance / tickDistance)\n    }\n\n    ticks += delayTicks // Add any delay ticks the waypoint has.\n\n    return ticks;\n  }\n\n  calculateWaypointTicksEta(game, carrier, waypoint) {\n    let totalTicks = 0\n\n    for (let i = 0; i < carrier.waypoints.length; i++) {\n        let cwaypoint = carrier.waypoints[i]\n\n        totalTicks += this.calculateWaypointTicks(game, carrier, cwaypoint)\n\n        if (cwaypoint === waypoint) {\n            break\n        }\n    }\n\n    return totalTicks\n  }\n\n  calculateTimeByTicks (ticks, speedInSeconds, relativeTo = null) {\n    if (relativeTo == null) {\n      relativeTo = moment().utc()\n    } else {\n      relativeTo = moment(relativeTo).utc()\n    }\n\n    return relativeTo.add(ticks * speedInSeconds, 'seconds')\n  }\n\n  canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar) {\n    // Double check for destroyed stars.\n    if (sourceStar == null || destinationStar == null) {\n        return false\n    }\n\n    // If both stars have warp gates and they are both owned by players...\n    if (sourceStar.warpGate && destinationStar.warpGate && sourceStar.ownedByPlayerId && destinationStar.ownedByPlayerId) {\n        // If both stars are owned by the player or by allies then carriers can always move at warp.\n        let sourceAllied = sourceStar.ownedByPlayerId === carrier.ownedByPlayerId || (DiplomacyHelper.isFormalAlliancesEnabled(game) && DiplomacyHelper.isDiplomaticStatusToPlayersAllied(game, sourceStar.ownedByPlayerId, [carrier.ownedByPlayerId]))\n        let desinationAllied = destinationStar.ownedByPlayerId === carrier.ownedByPlayerId || (DiplomacyHelper.isFormalAlliancesEnabled(game) && DiplomacyHelper.isDiplomaticStatusToPlayersAllied(game, destinationStar.ownedByPlayerId, [carrier.ownedByPlayerId]))\n\n        // If both stars are owned by the player then carriers can always move at warp.\n        if (sourceAllied && desinationAllied) {\n            return true\n        }\n\n        // If one of the stars are not owned by the current player then we need to check for\n        // warp scramblers.\n\n        // But if the carrier has the warp stabilizer specialist then it can travel at warp speed no matter\n        // which player it belongs to or whether the stars it is travelling to or from have locked warp gates.\n        if (carrier.specialistId && carrier.specialist) {\n            let carrierSpecialist = carrier.specialist\n\n            if (carrierSpecialist.modifiers.special && carrierSpecialist.modifiers.special.unlockWarpGates) {\n                return true\n            }\n        }\n\n        // If either star has a warp scrambler present then carriers cannot move at warp.\n        // Note that we only need to check for scramblers on stars that do not belong to the player.\n        if (!sourceAllied && sourceStar.specialistId && sourceStar.specialist) {\n            let specialist = sourceStar.specialist\n\n            if (specialist.modifiers.special && specialist.modifiers.special.lockWarpGates) {\n                return false\n            }\n        }\n\n        if (!desinationAllied && destinationStar.specialistId && destinationStar.specialist) {\n            let specialist = destinationStar.specialist\n\n            if (specialist.modifiers.special && specialist.modifiers.special.lockWarpGates) {\n                return false\n            }\n        }\n\n        // If none of the stars have scramblers then warp speed ahead.\n        return true\n    }\n\n    return false\n  }\n\n  getCarrierDistancePerTick(game, carrier, warpSpeed = false, instantSpeed = false) {\n    if (instantSpeed) {\n        return null\n    }\n\n    let distanceModifier = warpSpeed ? game.constants.distances.warpSpeedMultiplier : 1\n\n    if (carrier.specialistId && carrier.specialist) {\n        let specialist = carrier.specialist\n\n        if (specialist.modifiers.local) {\n            distanceModifier *= (specialist.modifiers.local.speed || 1)\n        }\n    }\n\n    return game.settings.specialGalaxy.carrierSpeed * distanceModifier;\n  }\n\n  canLoop (game, player, carrier) {\n    if (carrier.waypoints.length < 2 || carrier.isGift) {\n      return false\n    }\n\n    // TODO: Calculate effective techs for the carrier. Need to find a way to share this\n    // logic with the server.\n\n    // Check whether the last waypoint is in range of the first waypoint.\n    let firstWaypoint = carrier.waypoints[0]\n    let lastWaypoint = carrier.waypoints[carrier.waypoints.length - 1]\n\n    let firstWaypointStar = this.getStarById(game, firstWaypoint.destination)\n    let lastWaypointStar = this.getStarById(game, lastWaypoint.destination)\n\n    if (firstWaypointStar == null || lastWaypointStar == null) {\n      return false\n    }\n\n    if (this.isStarPairWormHole(firstWaypointStar, lastWaypointStar)) {\n      return true\n    }\n\n    let distanceBetweenStars = this.getDistanceBetweenLocations(firstWaypointStar.location, lastWaypointStar.location)\n    let hyperspaceDistance = this.getHyperspaceDistance(game, player, carrier)\n\n    return distanceBetweenStars <= hyperspaceDistance\n  }\n\n  isStarPairWormHole (sourceStar, destinationStar) {\n    return sourceStar\n      && destinationStar\n      && sourceStar.wormHoleToStarId\n      && destinationStar.wormHoleToStarId\n      && sourceStar.wormHoleToStarId === destinationStar._id\n      && destinationStar.wormHoleToStarId === sourceStar._id\n  }\n\n  isGameWaitingForPlayers (game) {\n    return game.state.startDate == null\n  }\n\n  isGamePaused (game) {\n    return game.state.paused\n  }\n\n  isGameNotStarted (game) {\n    return !game.state.startDate\n  }\n\n  isGameInProgress (game) {\n    return !this.isGameWaitingForPlayers(game) && !this.isGamePaused(game) && game.state.startDate != null && moment().utc().diff(game.state.startDate) >= 0 && !game.state.endDate\n  }\n\n  isGamePendingStart (game) {\n    return !this.isGameWaitingForPlayers(game) && !this.isGamePaused(game) && game.state.startDate != null && moment().utc().diff(game.state.startDate) < 0\n  }\n\n  isGameFinished (game) {\n    return game.state.endDate != null\n  }\n\n  isDarkModeExtra (game) {\n    return game.settings.specialGalaxy.darkGalaxy === 'extra'\n  }\n\n  isDarkMode (game) {\n    return (game.settings.specialGalaxy.darkGalaxy === 'standard' || game.settings.specialGalaxy.darkGalaxy === 'extra') ||\n          (game.settings.specialGalaxy.darkGalaxy === 'start' && game.state.startDate == null)\n  }\n\n  isDarkFogged (game) {\n    return game.settings.specialGalaxy.darkGalaxy === 'fog'\n  }\n\n  isTradeEnabled (game) {\n    return game.settings.player.tradeCredits || game.settings.player.tradeCreditsSpecialists || game.settings.player.tradeCost\n  }\n\n  isOrbitalMechanicsEnabled (game) {\n    return game.settings.orbitalMechanics.enabled === 'enabled'\n  }\n\n  isConquestAllStars (game) {\n    return game.settings.general.mode === 'conquest' && game.settings.conquest.victoryCondition === 'starPercentage'\n  }\n\n  isConquestHomeStars (game) {\n    return game.settings.general.mode === 'conquest' && game.settings.conquest.victoryCondition === 'homeStarPercentage'\n  }\n\n  isKingOfTheHillMode (game) {\n    return game.settings.general.mode === 'kingOfTheHill'\n  }\n\n  isTutorialGame (game) {\n    return game.settings.general.type === 'tutorial'\n  }\n\n  isSpectatingEnabled (game) {\n    return game.settings.general.spectators === 'enabled'\n  }\n\n  getGameStatusText (game) {\n    if (this.isGamePendingStart(game)) {\n      return 'Waiting to start'\n    }\n\n    if (this.isGameInProgress(game)) {\n      return 'In progress'\n    }\n\n    if (this.isGameFinished(game)) {\n      return 'Finished'\n    }\n\n    if (this.isGamePaused(game)) {\n      return 'Paused'\n    }\n\n    return 'Unknown'\n  }\n\n  playerHasLowestTechLevel (game, techKey, player) {\n    const levels = [...new Set(game.galaxy.players\n      .filter(p => p.research != null)\n      .map(p => {\n        return p.research[techKey].level\n      }))]\n\n    // If all players have the same level then nobody has the lowest.\n    if (levels.length === 1) {\n      return false\n    }\n\n    const minLevel = levels.sort((a, b) => a - b)[0]\n\n    return minLevel === player.research[techKey].level\n  }\n\n  playerHasHighestTechLevel (game, techKey, player) {\n    const levels = [...new Set(game.galaxy.players\n      .filter(p => p.research != null)\n      .map(p => {\n        return p.research[techKey].level\n      }))]\n\n    // If all players have the same level then nobody has the highest.\n    if (levels.length === 1) {\n      return false\n    }\n\n    const maxLevel = levels.sort((a, b) => b - a)[0]\n\n    return maxLevel === player.research[techKey].level\n  }\n\n  userPlayerHasHighestTechLevel (game, techKey) {\n    const userPlayer = this.getUserPlayer(game)\n\n    return this.playerHasHighestTechLevel(game, techKey, userPlayer)\n  }\n\n  userPlayerHasLowestTechLevel (game, techKey) {\n    const userPlayer = this.getUserPlayer(game)\n\n    return this.playerHasLowestTechLevel(game, techKey, userPlayer)\n  }\n\n  getPlayerStatus (player) {\n    if (player.defeated && !player.afk) {\n      return 'Defeated'\n    } else if (player.defeated && player.afk) {\n      return 'AFK'\n    }\n\n    return 'Unknown'\n  }\n\n  getSortedLeaderboardPlayerList (game) {\n    // Sort by total number of stars, then by total ships, then by total carriers.\n    // Note that this sorting is different from the server side sorting as\n    // on the UI we want to preserve defeated player positions relative to how many\n    // stars they have as long as the game is in progress.\n    let playerStats = [...game.galaxy.players]\n\n    const sortPlayers = (a, b) => {\n      // If its a conquest and home star victory then sort by home stars first, then by total stars.\n      if (this.isConquestHomeStars(game)) {\n        if (a.stats.totalHomeStars > b.stats.totalHomeStars) return -1;\n        if (a.stats.totalHomeStars < b.stats.totalHomeStars) return 1;\n      }\n\n      if (this.isKingOfTheHillMode(game) && a.isKingOfTheHill !== b.isKingOfTheHill) {\n        if (a.isKingOfTheHill) return -1;\n        if (b.isKingOfTheHill) return 1;\n      }\n\n      // Sort by total stars descending\n      if (a.stats.totalStars > b.stats.totalStars) return -1;\n      if (a.stats.totalStars < b.stats.totalStars) return 1;\n\n      // Then by total ships descending\n      if (a.stats.totalShips > b.stats.totalShips) return -1\n      if (a.stats.totalShips < b.stats.totalShips) return 1\n\n      // Then by total carriers descending\n      if (a.stats.totalCarriers > b.stats.totalCarriers) return -1\n      if (a.stats.totalCarriers < b.stats.totalCarriers) return 1\n\n      // Then by defeated date descending\n      if (a.defeated && b.defeated) {\n        if (moment(a.defeatedDate) > moment(b.defeatedDate)) return -1\n        if (moment(a.defeatedDate) < moment(b.defeatedDate)) return 1\n      }\n\n      // Sort defeated players last.\n      return (a.defeated === b.defeated) ? 0 : a.defeated ? 1 : -1\n    }\n\n    if (this.isGameFinished(game)) {\n      // Sort the undefeated players first.\n      let undefeatedLeaderboard = playerStats\n        .filter(x => !x.defeated)\n        .sort(sortPlayers);\n\n      // Sort the defeated players next.\n      let defeatedLeaderboard = playerStats\n        .filter(x => x.defeated)\n        .sort(sortPlayers);\n\n      // Join both sorted arrays together to produce the leaderboard.\n      let leaderboard = undefeatedLeaderboard.concat(defeatedLeaderboard)\n\n      return leaderboard\n    } else {\n      return playerStats.sort(sortPlayers)\n    }\n  }\n\n  isNormalAnonymity (game) {\n    return game.settings.general.anonymity === 'normal'\n  }\n\n  isExtraAnonymity (game) {\n    return game.settings.general.anonymity === 'extra'\n  }\n\n  isHiddenPlayerOnlineStatus (game) {\n    return game.settings.general.playerOnlineStatus === 'hidden'\n  }\n\n  isPlayerOnline (player) {\n    if (player.isOnline == null) {\n      return false;\n    }\n    else if (player.isOnline) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  getOnlineStatus (player) {\n    if (player.isOnline == null || player.lastSeen == null) {\n      return ''\n    }\n    else if (player.isOnline) {\n      return 'Online Now'\n    }\n    else {\n      return moment(player.lastSeen).utc().fromNow()\n    }\n  }\n\n  calculateGalaxyCenterX (game) {\n    let starFieldLeft = this.calculateMinStarX(game)\n    let starFieldRight = this.calculateMaxStarX(game)\n    return starFieldLeft + ((starFieldRight - starFieldLeft) / 2.0)\n  }\n\n  calculateGalaxyCenterY (game) {\n    let starFieldTop = this.calculateMinStarY(game)\n    let starFieldBottom = this.calculateMaxStarY(game)\n    return starFieldTop + ((starFieldBottom - starFieldTop) / 2.0)\n  }\n\n  calculateMinStarX (game) {\n    if (!game.galaxy.stars.length) { return 0 }\n\n    return game.galaxy.stars.sort((a, b) => a.location.x - b.location.x)[0].location.x\n  }\n\n  calculateMinStarY (game) {\n    if (!game.galaxy.stars.length) { return 0 }\n\n    return game.galaxy.stars.sort((a, b) => a.location.y - b.location.y)[0].location.y\n  }\n\n  calculateMaxStarX (game) {\n    if (!game.galaxy.stars.length) { return 0 }\n\n    return game.galaxy.stars.sort((a, b) => b.location.x - a.location.x)[0].location.x\n  }\n\n  calculateMaxStarY (game) {\n    if (!game.galaxy.stars.length) { return 0 }\n\n    return game.galaxy.stars.sort((a, b) => b.location.y - a.location.y)[0].location.y\n  }\n\n  calculateMinCarrierX (game) {\n    if (!game.galaxy.carriers.length) { return 0 }\n\n    return game.galaxy.carriers.sort((a, b) => a.location.x - b.location.x)[0].location.x\n  }\n\n  calculateMinCarrierY (game) {\n    if (!game.galaxy.carriers.length) { return 0 }\n\n    return game.galaxy.carriers.sort((a, b) => a.location.y - b.location.y)[0].location.y\n  }\n\n  calculateMaxCarrierX (game) {\n    if (!game.galaxy.carriers.length) { return 0 }\n\n    return game.galaxy.carriers.sort((a, b) => b.location.x - a.location.x)[0].location.x\n  }\n\n  calculateMaxCarrierY (game) {\n    if (!game.galaxy.carriers.length) { return 0 }\n\n    return game.galaxy.carriers.sort((a, b) => b.location.y - a.location.y)[0].location.y\n  }\n\n  isSpecialistsEnabled (game) {\n    return game.settings.specialGalaxy.specialistCost !== 'none'\n  }\n\n  isSpecialistsTechnologyEnabled (game) {\n    return game.settings.technology.researchCosts.specialists !== 'none'\n  }\n\n  isSpecialistsCurrencyCredits (game) {\n    return this.isSpecialistsEnabled(game) && game.settings.specialGalaxy.specialistsCurrency === 'credits'\n  }\n\n  isSpecialistsCurrencyCreditsSpecialists (game) {\n    return this.isSpecialistsEnabled(game) && game.settings.specialGalaxy.specialistsCurrency === 'creditsSpecialists'\n  }\n\n  getDateString (date) {\n    date = moment(date).utc().toDate()\n\n    let dayOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n    let monthOfYear = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n    return `${dayOfWeek[date.getDay()]} ${date.getDate()} ${monthOfYear[date.getMonth()]} ${date.getHours() < 10 ? '0' + date.getHours() : date.getHours()}:${date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()}`\n  }\n\n  getPlayerEmpireCenter (game, player) {\n    // Get all of the player's stars.\n    let playerStars = this.getStarsOwnedByPlayer(player, game.galaxy.stars)\n\n    if (!playerStars.length) {\n      return null\n    }\n\n    // Work out the center point of all stars\n    let centerX = playerStars.reduce((sum, s) => sum + s.location.x, 0) / playerStars.length\n    let centerY = playerStars.reduce((sum, s) => sum + s.location.y, 0) / playerStars.length\n\n    let closestStar = this.getClosestPlayerStar(game.galaxy.stars, { x: centerX, y: centerY }, player)\n\n    return closestStar.location\n  }\n\n  getGamePlayerShapesCount (game) {\n    return new Set([...game.galaxy.players.map(p => p.shape)]).size\n  }\n\n  isRealTimeGame(game) {\n    return game.settings.gameTime.gameType === 'realTime';\n  }\n\n  isTurnBasedGame(game) {\n    return game.settings.gameTime.gameType === 'turnBased';\n  }\n\n  is1v1Game (game) {\n    return ['1v1_rt', '1v1_tb'].includes(game.settings.general.type)\n  }\n\n  listAllUndefeatedPlayers (game) {\n    let undefeatedPlayers\n\n    if (this.isTutorialGame(game)) {\n      undefeatedPlayers = game.galaxy.players.filter(p => p.userId)\n    } else {\n      undefeatedPlayers = game.galaxy.players.filter(p => !p.defeated)\n    }\n\n    return undefeatedPlayers\n  }\n\n  isAllUndefeatedPlayersReady(game) {\n    let undefeatedPlayers = this.listAllUndefeatedPlayers(game)\n\n    return undefeatedPlayers.filter(x => x.ready).length === undefeatedPlayers.length\n  }\n\n  isAllUndefeatedPlayersReadyToQuit(game) {\n      let undefeatedPlayers = this.listAllUndefeatedPlayers(game)\n\n      return undefeatedPlayers.filter(x => x.readyToQuit).length === undefeatedPlayers.length\n  }\n\n  gameHasOpenSlots (game) {\n    if (this.isGameFinished(game)) {\n      return false\n    }\n\n    return game.galaxy.players.filter(p => p.isOpenSlot).length > 0\n  }\n\n  canTick(game) {\n    if (this.isGameFinished(game)) {\n      return false\n    }\n\n    if (this.isAllUndefeatedPlayersReadyToQuit(game)) {\n      return true\n    }\n\n    let lastTick = moment(game.state.lastTickDate).utc();\n    let nextTick;\n\n    if (this.isRealTimeGame(game)) {\n        // If in real time mode, then calculate when the next tick will be and work out if we have reached that tick.\n        nextTick = moment(lastTick).utc().add(game.settings.gameTime.speed, 'seconds');\n    } else if (this.isTurnBasedGame(game)) {\n      let isAllPlayersReady = this.isAllUndefeatedPlayersReady(game)\n\n      if (isAllPlayersReady) {\n        return true\n      }\n\n        nextTick = moment(lastTick).utc().add(game.settings.gameTime.maxTurnWait, 'minutes');\n    } else {\n        throw new Error(`Unsupported game type.`);\n    }\n\n    return nextTick.diff(moment().utc(), 'seconds') <= 0;\n  }\n\n  starInfrastructureUpgraded(game, data) {\n    let userPlayer = this.getUserPlayer(game)\n\n    userPlayer.credits -= data.cost\n\n    if (data.currentResearchTicksEta != null) {\n      userPlayer.currentResearchTicksEta = data.currentResearchTicksEta\n    }\n\n    if (data.nextResearchTicksEta != null) {\n      userPlayer.nextResearchTicksEta = data.nextResearchTicksEta\n    }\n\n    let star = this.getStarById(game, data.starId)\n\n    star.upgradeCosts[data.type] = data.nextCost\n    star.infrastructure[data.type] = data.infrastructure\n\n    if (data.manufacturing) {\n      let manufacturingDifference = +data.manufacturing - star.manufacturing\n\n      star.manufacturing = +data.manufacturing.toFixed(2)\n\n      userPlayer.stats.newShips = +(userPlayer.stats.newShips + manufacturingDifference).toFixed(2)\n    }\n\n    switch (data.type) {\n      case 'economy':\n        userPlayer.stats.totalEconomy++\n        break;\n      case 'industry':\n        userPlayer.stats.totalIndustry++\n        break;\n      case 'science':\n        userPlayer.stats.totalScience++\n        break;\n    }\n\n    return star\n  }\n\n  isDeadStar(star) {\n    return star.naturalResources != null && star.naturalResources.economy <= 0 && star.naturalResources.industry <= 0 && star.naturalResources.science <= 0\n  }\n\n  isSplitResources(game) {\n    return game.settings.specialGalaxy.splitResources === 'enabled';\n  }\n\n  isInGuild (guild, userId) {\n    return guild.members.find(m => m._id === userId)\n      || guild.officers.find(m => m._id === userId)\n      || (guild.leader && guild.leader._id === userId)\n  }\n\n  isUserSpectatingGame (game) {\n    return !this.getUserPlayer(game) // If the user isn't in the game then they are spectating\n  }\n\n  _getBankingCredits (game, player) {\n    const bankingEnabled = game.settings.technology.startingTechnologyLevel['banking'] > 0\n\n    if (!bankingEnabled || !player.stats.totalStars || !player.research || !player.research.banking) {\n      return 0\n    }\n\n    const bankingLevel = player.research.banking.level\n\n    switch (game.settings.technology.bankingReward) {\n      case 'standard':\n          return Math.round((bankingLevel * 75) + (0.15 * bankingLevel * player.stats.totalEconomy))\n      case 'legacy':\n          return bankingLevel * 75\n    }\n  }\n\n  _getUpkeepCosts(game, player) {\n    const upkeepCosts = {\n      'none': 0,\n      'cheap': 1,\n      'standard': 3,\n      'expensive': 6\n    };\n\n    const costPerCarrier = upkeepCosts[game.settings.specialGalaxy.carrierUpkeepCost];\n\n    if (!costPerCarrier) {\n        return 0;\n    }\n\n    return player.stats.totalCarriers * costPerCarrier;\n  }\n\n  calculateIncomeMinusUpkeep (game, player) {\n    const fromEconomy = player.stats.totalEconomy * 10\n    return fromEconomy + this._getBankingCredits(game, player)\n  }\n\n  calculateIncome (game, player) {\n    const fromEconomy = player.stats.totalEconomy * 10\n    const upkeep = this._getUpkeepCosts(game, player);\n    return fromEconomy - upkeep  + this._getBankingCredits(game, player);\n  }\n\n  isStarHasMultiplePlayersInOrbit (game, star) {\n    let carriersInOrbit = this.getCarriersOrbitingStar(game, star)\n    let playerIds = [...new Set(carriersInOrbit.map(c => c.ownedByPlayerId))]\n\n    if (playerIds.indexOf(star.ownedByPlayerId) > -1) {\n      playerIds.splice(playerIds.indexOf(star.ownedByPlayerId), 1)\n    }\n\n    return playerIds.length\n  }\n\n  getGameTypeFriendlyText (game) {\n    return {\n      'tutorial': 'Tutorial',\n      'new_player_rt': 'New Players',\n      'standard_rt': 'Standard',\n      'standard_tb': 'Standard - TB',\n      '1v1_rt': '1 vs. 1',\n      '1v1_tb': '1 vs. 1 - TB',\n      '32_player_rt': '32 Players',\n      'custom': 'Custom',\n      'special_dark': 'Dark Galaxy',\n      'special_fog': 'Fogged Galaxy',\n      'special_ultraDark': 'Ultra Dark Galaxy',\n      'special_orbital': 'Orbital',\n      'special_battleRoyale': 'Battle Royale',\n      'special_homeStar': 'Capital Stars',\n      'special_homeStarElimination': 'Elimination',\n      'special_anonymous': 'Anonymous',\n      'special_kingOfTheHill': 'King Of The Hill',\n      'special_tinyGalaxy': 'Tiny Galaxy',\n      'special_freeForAll': 'Free For All',\n      'special_arcade': 'Arcade'\n    }[game.settings.general.type]\n  }\n\n  isNewPlayerGame (game) {\n    return ['new_player_rt', 'new_player_tb'].includes(game.settings.general.type)\n  }\n\n  isCustomGame (game) {\n    return game.settings.general.type === 'custom'\n  }\n\n  isFluxGame (game) {\n    return game.settings.general.fluxEnabled === 'enabled'\n  }\n\n  isFeaturedGame (game) {\n    return game.settings.general.featured === true\n  }\n\n  getLedgerGameEventPlayerSummary (game, gameEvent) {\n    const debtor = this.getPlayerById(game, gameEvent.data.debtorPlayerId)\n    const creditor = this.getPlayerById(game, gameEvent.data.creditorPlayerId)\n    const isCreditor = this.getUserPlayer(game) == creditor\n\n    return {\n      debtor,\n      creditor,\n      isCreditor\n    }\n  }\n\n  calculateCombatEventShipCount(star, carriers, key) {\n    let array = star ? carriers.concat([star]) : carriers //Add the star if we need to\n\n    let unscrambled = array.filter(c => c[key] !== \"???\")\n    let scrambled = array.filter(c => c[key] === \"???\")\n\n    if (scrambled.length === unscrambled.length) return \"???\" //If everything is scrambled, the total is scrambled.\n    \n    let result = unscrambled.reduce((sum, c) => sum + c[key], 0).toString() //Add up all the ships\n\n    if (scrambled.length) { //If any carriers are scramled, add a *\n      result += \"*\"\n    }\n\n    return result\n  }\n\n  isPopulationCapped(game) {\n    return game.settings.player.populationCap.enabled === 'enabled'\n  }\n}\n\nexport default new GameHelper()\n"],
  "mappings": "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",
  "names": ["moment", "DiplomacyHelper"]
}
