{
  "version": 3,
  "sources": ["../../../../../client/src/services/api/user.js"],
  "sourcesContent": ["import axios from 'axios'\nimport BaseApiService from './base'\n\nclass UserService extends BaseApiService {\n  getMyUserInfo () {\n    return axios.get(this.BASE_URL + 'user', { withCredentials: true })\n  }\n\n  getUserCredits () {\n    return axios.get(this.BASE_URL + 'user/credits', { withCredentials: true })\n  }\n\n  getUserAchievements (userId) {\n    return axios.get(this.BASE_URL + 'user/achievements/' + userId, { withCredentials: true })\n  }\n\n  getUserAvatars () {\n    return axios.get(this.BASE_URL + 'user/avatars', { withCredentials: true })\n  }\n\n  purchaseAvatar (avatarId) {\n    return axios.post(this.BASE_URL + 'user/avatars/' + avatarId + '/purchase', {}, { withCredentials: true })\n  }\n\n  getGameSettings () {\n    return axios.get(this.BASE_URL + 'user/settings', { withCredentials: true })\n  }\n\n  saveGameSettings (settings) {\n    return axios.put(this.BASE_URL + 'user/settings', settings, { withCredentials: true })\n  }\n\n  getSubscriptions () {\n    return axios.get(this.BASE_URL + 'user/subscriptions', { withCredentials: true })\n  }\n\n  saveSubscriptions (subscriptions) {\n    return axios.put(this.BASE_URL + 'user/subscriptions', subscriptions, { withCredentials: true })\n  }\n\n  createUser (email, username, password, recaptchaToken) {\n    return axios.post(this.BASE_URL + 'user', {\n      email: email,\n      username: username,\n      password: password,\n      recaptchaToken: recaptchaToken\n    })\n  }\n\n  toggleEmailNotifications (enabled) {\n    return axios.put(this.BASE_URL + 'user/changeEmailPreference', {\n      enabled\n    },\n      { withCredentials: true })\n  }\n\n  toggleEmailOtherNotifications (enabled) {\n    return axios.put(this.BASE_URL + 'user/changeEmailOtherPreference', {\n      enabled\n    },\n      { withCredentials: true })\n  }\n\n  updateEmailAddress (email) {\n    return axios.put(this.BASE_URL + 'user/changeEmailAddress', {\n      email\n    },\n      { withCredentials: true })\n  }\n\n  updateUsername (username) {\n    return axios.put(this.BASE_URL + 'user/changeUsername', {\n      username\n    },\n      { withCredentials: true })\n  }\n\n  updatePassword (currentPassword, newPassword) {\n    return axios.put(this.BASE_URL + 'user/changePassword', {\n      currentPassword, newPassword\n    },\n      { withCredentials: true })\n  }\n\n  requestResetPassword (email) {\n    return axios.post(this.BASE_URL + 'user/requestResetPassword', {\n      email\n    })\n  }\n\n  resetPassword (token, newPassword) {\n    return axios.post(this.BASE_URL + 'user/resetPassword', {\n      token, newPassword\n    })\n  }\n\n  requestUsername (email) {\n    return axios.post(this.BASE_URL + 'user/requestUsername', {\n      email\n    })\n  }\n\n  getLeaderboard (limit, sortingKey, skip) {\n    return axios.get(this.BASE_URL + 'user/leaderboard',\n      {\n        withCredentials: true,\n        params: {\n          limit,\n          sortingKey,\n          skip\n        }\n      })\n  }\n\n  closeAccount () {\n    return axios.delete(this.BASE_URL + 'user/closeAccount',\n      { withCredentials: true })\n  }\n}\n\nexport default new UserService()\n"],
  "mappings": "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",
  "names": ["BaseApiService", "axios"]
}
