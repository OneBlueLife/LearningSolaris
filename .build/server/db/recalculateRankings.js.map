{
  "version": 3,
  "sources": ["../../../server/db/recalculateRankings.ts"],
  "sourcesContent": ["import config from '../config';\nimport mongooseLoader from '.';\nimport containerLoader from '../services';\nimport { DependencyContainer } from '../services/types/DependencyContainer';\nimport { User } from '../services/types/User';\n\nlet mongo,\n    container: DependencyContainer;\n\nfunction binarySearchUsers(users: User[], id: string) {\n    let start = 0;\n    let end = users.length - 1;\n\n    while (start <= end) {\n        let middle = Math.floor((start + end) / 2);\n        let user = users[middle];\n\n        if (user._id.toString() === id.toString()) {\n            // found the id\n            return user;\n        } else if (user._id.toString() < id.toString()) {\n            // continue searching to the right\n            start = middle + 1;\n        } else {\n            // search searching to the left\n            end = middle - 1;\n        }\n    }\n\n    // id wasn't found\n    // Return the old way\n    return users.find(s => s._id.toString() === id.toString())!;\n}\n\nasync function startup() {\n    mongo = await mongooseLoader(config, {\n        syncIndexes: true,\n        poolSize: 1\n    });\n\n    container = containerLoader(config, null);\n    \n    console.log('Recalculating all player ranks...');\n\n    console.log(`Resetting users...`);\n    await container.userService.userRepo.updateMany({}, {\n        $set: {\n            'achievements.level': 1,\n            'achievements.rank': 0,\n            'achievements.eloRating': null,\n            'achievements.victories': 0,\n            'achievements.victories1v1': 0,\n            'achievements.completed': 0,\n            'achievements.quit': 0,\n            'achievements.afk': 0,\n            'achievements.defeated': 0,\n            'achievements.defeated1v1': 0,\n            'achievements.joined': 0,\n            'achievements.badges.victor32': 0,\n            'achievements.badges.special_dark': 0,\n            'achievements.badges.special_fog': 0,\n            'achievements.badges.special_ultraDark': 0,\n            'achievements.badges.special_orbital': 0,\n            'achievements.badges.special_battleRoyale': 0,\n            'achievements.badges.special_homeStar': 0,\n            'achievements.badges.special_homeStarElimination': 0,\n            'achievements.badges.special_anonymous': 0,\n            'achievements.badges.special_kingOfTheHill': 0,\n            'achievements.badges.special_tinyGalaxy': 0,\n            'achievements.badges.special_freeForAll': 0,\n            'achievements.badges.special_arcade': 0,\n        }\n    });\n    console.log(`Done.`);\n\n    let users = await container.userService.userRepo.find({}, {\n        _id: 1,\n        achievements: 1\n    },\n    { _id: 1 });\n\n    console.log(`Total users: ${users.length}`);\n\n    let dbQuery = {\n        'state.endDate': { $ne: null },\n        'settings.general.type': { $ne: 'tutorial' }\n    };\n\n    let total = (await container.gameService.gameRepo.count(dbQuery));\n\n    console.log(`Recalculating rank for ${total} games...`);\n    \n    let page = 0;\n    let pageSize = 10;\n    let totalPages = Math.ceil(total / pageSize);\n\n    const incAchievement = (userId: string, key: string) => {\n        let u = binarySearchUsers(users, userId);\n\n        if (u) {\n            u.achievements[key]++;\n        }\n    };\n\n    do {\n        let games = await container.gameService.gameRepo.find(dbQuery, {},\n        { _id: 1 },\n        pageSize,\n        pageSize * page);\n\n        for (let game of games) {\n            // All players\n            let playerUserIds: string[] = game.galaxy.players.filter(p => p.userId).map(p => p.userId!.toString());\n            // Quitters\n            let quitterUserIds: string[] = game.quitters.filter(q => q != null).map(q => q.toString());\n            // Afkers and in game afk players\n            let afkerUserIds: string[] = [...new Set(game.afkers.filter(a => a != null).map(a => a.toString()).concat(game.galaxy.players.filter(p => p.userId && p.afk).map(p => p.userId!.toString())))] as string[];\n            // In game defeated players (not afk)\n            let defeatedUserIds: string[] = game.galaxy.players.filter(p => p.userId && p.defeated && !p.afk).map(p => p.userId!.toString());\n            // In game completed players (not defeated or afk)\n            let completedUserIds: string[] = game.galaxy.players.filter(p => p.userId && !p.defeated && !p.afk).map(p => p.userId!.toString());\n            // All players + quitters + afkers\n            let joinerUserIds: string[] = [...new Set(playerUserIds.concat(quitterUserIds).concat(afkerUserIds))];\n\n            joinerUserIds.forEach(j => incAchievement(j, 'joined'));\n            quitterUserIds.forEach(q => incAchievement(q, 'quit'));\n            afkerUserIds.forEach(a => incAchievement(a, 'afk'));\n            completedUserIds.forEach(c => incAchievement(c, 'completed'));\n            defeatedUserIds.forEach(d => incAchievement(d, 'defeated'));\n\n            // Recalculate the final leaderboard state.\n            let leaderboard = container.leaderboardService.getGameLeaderboard(game).leaderboard;\n\n            game.state.leaderboard = leaderboard.map(l => l.player._id);\n\n            // Recalculate rank and victories\n            container.gameTickService._awardEndGameRank(game, users, false);\n        }\n\n        let leaderboardWrites = games.map(game => {\n            return {\n                updateOne: {\n                    filter: {\n                        _id: game._id\n                    },\n                    update: {\n                        'state.leaderboard': game.state.leaderboard\n                    }\n                }\n            }\n        });\n\n        await container.gameService.gameRepo.bulkWrite(leaderboardWrites);\n\n        page++;\n\n        console.log(`Page ${page}/${totalPages}`);\n    } while (page <= totalPages);\n\n    console.log(`Done.`);\n\n    let dbWrites = users.map(user => {\n        return {\n            updateOne: {\n                filter: {\n                    _id: user._id\n                },\n                update: {\n                    'achievements.level': user.achievements.level,\n                    'achievements.rank': user.achievements.rank,\n                    'achievements.eloRating': user.achievements.eloRating,\n                    'achievements.victories': user.achievements.victories,\n                    'achievements.victories1v1': user.achievements.victories1v1,\n                    'achievements.completed': user.achievements.completed,\n                    'achievements.quit': user.achievements.quit,\n                    'achievements.afk': user.achievements.afk,\n                    'achievements.defeated': user.achievements.defeated,\n                    'achievements.defeated1v1': user.achievements.defeated1v1,\n                    'achievements.joined': user.achievements.joined,\n                    'achievements.badges.victor32': user.achievements.badges.victor32,\n                    'achievements.badges.special_dark': user.achievements.badges.special_dark,\n                    'achievements.badges.special_fog': user.achievements.badges.special_fog,\n                    'achievements.badges.special_ultraDark': user.achievements.badges.special_ultraDark,\n                    'achievements.badges.special_orbital': user.achievements.badges.special_orbital,\n                    'achievements.badges.special_battleRoyale': user.achievements.badges.special_battleRoyale,\n                    'achievements.badges.special_homeStar': user.achievements.badges.special_homeStar,\n                    'achievements.badges.special_homeStarElimination': user.achievements.badges.special_homeStarElimination,\n                    'achievements.badges.special_anonymous': user.achievements.badges.special_anonymous,\n                    'achievements.badges.special_kingOfTheHill': user.achievements.badges.special_kingOfTheHill,\n                    'achievements.badges.special_tinyGalaxy': user.achievements.badges.special_tinyGalaxy,\n                    'achievements.badges.special_freeForAll': user.achievements.badges.special_freeForAll,\n                    'achievements.badges.special_arcade': user.achievements.badges.special_arcade,\n                }\n            }\n        }\n    });\n\n    console.log(`Updating users...`);\n    await container.userService.userRepo.bulkWrite(dbWrites);\n    console.log(`Users updated.`);\n}\n\nprocess.on('SIGINT', async () => {\n    await shutdown();\n});\n\nasync function shutdown() {\n    console.log('Shutting down...');\n\n    await mongo.disconnect();\n\n    console.log('Shutdown complete.');\n    \n    process.exit();\n}\n\nstartup().then(async () => {\n    console.log('Done.');\n\n    await shutdown();\n}).catch(async err => {\n    console.error(err);\n\n    await shutdown();\n});\n\nexport {};\n"],
  "mappings": "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",
  "names": ["mongooseLoader", "config", "containerLoader"]
}
