{
  "version": 3,
  "sources": ["../../../server/db/index.ts"],
  "sourcesContent": ["const mongoose = require('mongoose');\n\nimport EventModel from './models/Event';\nimport GameModel from './models/Game';\nimport GuildModel from './models/Guild';\nimport HistoryModel from './models/History';\nimport UserModel from './models/User';\nimport PaymentModel from './models/Payment';\n\nexport default async (config, options) => {\n\n    async function unlockAgendaJobs(db) {\n        try {\n            const collection = await db.connection.db.collection('agendaJobs');\n    \n            const numUnlocked = await collection.updateMany({\n                lockedAt: { $exists: true }\n                // lastFinishedAt:{$exists:false} \n            }, {\n                $unset: { \n                lockedAt : undefined,\n                lastModifiedBy:undefined,\n                    lastRunAt:undefined\n                },\n                $set: { nextRunAt:new Date() }\n            });\n    \n            console.log(`Unlocked #${numUnlocked.modifiedCount} jobs.`);\n        } catch (e) {\n            console.error(e);\n        }\n    }\n    \n    async function syncIndexes() {\n        console.log('Syncing indexes...');\n        await EventModel.syncIndexes();\n        await GameModel.syncIndexes();\n        await GuildModel.syncIndexes();\n        await HistoryModel.syncIndexes();\n        await UserModel.syncIndexes();\n        await PaymentModel.syncIndexes();\n        // TODO ReportModel?\n        console.log('Indexes synced.');\n    }\n    \n    const dbConnection = mongoose.connection;\n\n    dbConnection.on('error', console.error.bind(console, 'connection error:'));\n\n    options = options || {};\n    options.connectionString = options.connectionString || config.connectionString;\n    options.syncIndexes = options.syncIndexes == null ? false : options.syncIndexes;\n    options.unlockJobs = options.unlockJobs == null ? false : options.unlockJobs;\n    options.poolSize = options.poolSize || 5;\n\n    console.log(`Connecting to database: ${options.connectionString}`);\n\n    const db = await mongoose.connect(options.connectionString, {\n        useUnifiedTopology: true,\n        useNewUrlParser: true,\n        useCreateIndex: true,\n        keepAlive: true,\n        poolSize: options.poolSize\n    });\n\n    if (options.syncIndexes) {\n        await syncIndexes();\n    }\n\n    if (options.unlockJobs) {\n        await unlockAgendaJobs(db);\n    }\n\n    console.log('MongoDB intialized.');\n\n    return db;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAAuB;AACvB,kBAAsB;AACtB,mBAAuB;AACvB,qBAAyB;AACzB,kBAAsB;AACtB,qBAAyB;AAPzB,MAAM,WAAW,QAAQ,UAAU;AASnC,IAAO,aAAQ,OAAO,QAAQ,YAAY;AAEtC,iBAAe,iBAAiBA,KAAI;AAChC,QAAI;AACA,YAAM,aAAa,MAAMA,IAAG,WAAW,GAAG,WAAW,YAAY;AAEjE,YAAM,cAAc,MAAM,WAAW,WAAW;AAAA,QAC5C,UAAU,EAAE,SAAS,KAAK;AAAA,MAE9B,GAAG;AAAA,QACC,QAAQ;AAAA,UACR,UAAW;AAAA,UACX,gBAAe;AAAA,UACX,WAAU;AAAA,QACd;AAAA,QACA,MAAM,EAAE,WAAU,IAAI,KAAK,EAAE;AAAA,MACjC,CAAC;AAED,cAAQ,IAAI,aAAa,YAAY,qBAAqB;AAAA,IAC9D,SAAS,GAAP;AACE,cAAQ,MAAM,CAAC;AAAA,IACnB;AAAA,EACJ;AAEA,iBAAe,cAAc;AACzB,YAAQ,IAAI,oBAAoB;AAChC,UAAM,aAAAC,QAAW,YAAY;AAC7B,UAAM,YAAAC,QAAU,YAAY;AAC5B,UAAM,aAAAC,QAAW,YAAY;AAC7B,UAAM,eAAAC,QAAa,YAAY;AAC/B,UAAM,YAAAC,QAAU,YAAY;AAC5B,UAAM,eAAAC,QAAa,YAAY;AAE/B,YAAQ,IAAI,iBAAiB;AAAA,EACjC;AAEA,QAAM,eAAe,SAAS;AAE9B,eAAa,GAAG,SAAS,QAAQ,MAAM,KAAK,SAAS,mBAAmB,CAAC;AAEzE,YAAU,WAAW,CAAC;AACtB,UAAQ,mBAAmB,QAAQ,oBAAoB,OAAO;AAC9D,UAAQ,cAAc,QAAQ,eAAe,OAAO,QAAQ,QAAQ;AACpE,UAAQ,aAAa,QAAQ,cAAc,OAAO,QAAQ,QAAQ;AAClE,UAAQ,WAAW,QAAQ,YAAY;AAEvC,UAAQ,IAAI,2BAA2B,QAAQ,kBAAkB;AAEjE,QAAM,KAAK,MAAM,SAAS,QAAQ,QAAQ,kBAAkB;AAAA,IACxD,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,gBAAgB;AAAA,IAChB,WAAW;AAAA,IACX,UAAU,QAAQ;AAAA,EACtB,CAAC;AAED,MAAI,QAAQ,aAAa;AACrB,UAAM,YAAY;AAAA,EACtB;AAEA,MAAI,QAAQ,YAAY;AACpB,UAAM,iBAAiB,EAAE;AAAA,EAC7B;AAEA,UAAQ,IAAI,qBAAqB;AAEjC,SAAO;AACX;",
  "names": ["db", "EventModel", "GameModel", "GuildModel", "HistoryModel", "UserModel", "PaymentModel"]
}
