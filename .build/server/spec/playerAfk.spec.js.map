{
  "version": 3,
  "sources": ["../../../server/spec/playerAfk.spec.ts"],
  "sourcesContent": ["import moment from \"moment\";\nimport CarrierService from \"../services/carrier\";\nimport GameStateService from \"../services/gameState\";\nimport GameTypeService from \"../services/gameType\";\nimport PlayerService from \"../services/player\";\nimport PlayerAfkService from \"../services/playerAfk\"\nimport Repository from \"../services/repository\";\nimport StarService from \"../services/star\";\nimport { Game } from \"../services/types/Game\";\nimport { Player } from \"../services/types/Player\";\nconst mongoose = require('mongoose');\n\ndescribe('Player AFK Service', () => {\n    let service: PlayerAfkService;\n\n    let game: Game;\n    let player: Player;\n    let gameRepo: Repository<Game>;\n    let playerService: PlayerService;\n    let starService: StarService;\n    let carrierService: CarrierService;\n    let gameTypeService: GameTypeService;\n    let gameStateService: GameStateService;\n\n    beforeEach(() => {\n        gameStateService = {\n            isStarted(game: Game) {\n                return true;\n            }\n        } as GameStateService;\n\n        gameTypeService = {\n            isTurnBasedGame(game: Game) {\n                return false;\n            }\n        } as GameTypeService;\n\n        game = {\n            state: {\n                startDate: moment().utc().toDate()\n            },\n            settings: {\n                galaxy: {\n                    productionTicks: 20\n                },\n                gameTime: {\n                    speed: 1800,\n                    afk: {\n                        lastSeenTimeout: 2,\n                        turnTimeout: 3,\n                        cycleTimeout: 4\n                    }\n                }\n            }\n        } as Game;\n\n        player = {\n            defeated: false,\n            afk: false,\n            userId: mongoose.Types.ObjectId(),\n            lastSeen: null\n        } as Player;\n\n        service = new PlayerAfkService(gameRepo, playerService, starService, carrierService, gameTypeService, gameStateService);\n    });\n\n    describe('Is AI Controlled', () => {\n        it('should return true if the player is defeated', () => {\n            player.defeated = true;\n            player.userId = mongoose.Types.ObjectId();\n\n            const result = service.isAIControlled(game, player, false);\n    \n            expect(result).toBeTrue();\n        });\n\n        it('should return true if the player is not controlled by a user', () => {\n            player.defeated = false;\n            player.userId = null;\n\n            const result = service.isAIControlled(game, player, false);\n    \n            expect(result).toBeTrue();\n        });\n\n        it('should return false if the player is controlled by a user and is not defeated', () => {\n            player.defeated = false;\n            player.userId = mongoose.Types.ObjectId();\n\n            const result = service.isAIControlled(game, player, false);\n    \n            expect(result).toBeFalse();\n        });\n    });\n\n    describe('Pseudo AFK', () => {\n        it('should return false if the game has not started yet', () => {\n            gameStateService.isStarted = (game: Game) => {\n                return false;\n            };\n\n            game.state.startDate = null;\n    \n            const result = service.isPsuedoAfk(game, player);\n    \n            expect(result).toBeFalse();\n        });\n    \n        it('should return false if the game has not been playing for 12 hours', () => {\n            const result = service.isPsuedoAfk(game, player);\n    \n            expect(result).toBeFalse();\n        });\n    \n        it('should return true if the player has not been seen at all', () => {\n            game.state.startDate = moment().utc().subtract(1, 'day').toDate();\n    \n            player.lastSeen = null;\n            \n            const result = service.isPsuedoAfk(game, player);\n    \n            expect(result).toBeTrue();\n        });\n    \n        it('should return true if the player has not been seen since the start of the game', () => {\n            game.state.startDate = moment().utc().subtract(1, 'day').toDate();\n            \n            player.lastSeen = game.state.startDate;\n            \n            const result = service.isPsuedoAfk(game, player);\n    \n            expect(result).toBeTrue();\n        });\n    \n        it('should return true if the player has not been seen since before the start of the game', () => {\n            game.state.startDate = moment().utc().subtract(1, 'day').toDate();\n            \n            player.lastSeen = moment().utc().subtract(2, 'days').toDate();\n            \n            const result = service.isPsuedoAfk(game, player);\n    \n            expect(result).toBeTrue();\n        });\n    \n        it('should return false if the player has been seen since the start of the game', () => {\n            game.state.startDate = moment().utc().subtract(1, 'day').toDate();\n            \n            player.lastSeen = moment().utc().toDate();\n            \n            const result = service.isPsuedoAfk(game, player);\n    \n            expect(result).toBeFalse();\n        });\n    });\n\n    describe('Is AFK', () => {\n        it('should return true if the player is already afk', () => {\n            player.afk = true;\n            \n            const result = service.isAfk(game, player);\n    \n            expect(result).toBeTrue();\n        });\n\n        it('should return true if the player has not been seen for the last seen timeout', () => {\n            player.lastSeen = moment().utc().subtract(game.settings.gameTime.afk.lastSeenTimeout, 'days').toDate();\n            \n            const result = service.isAfk(game, player);\n    \n            expect(result).toBeTrue();\n        });\n\n        it('should return true if the player has missed too many turns', () => {\n            gameTypeService.isTurnBasedGame = (game: Game) => { return true; };\n\n            player.lastSeen = moment().utc().toDate();\n            player.missedTurns = game.settings.gameTime.afk.turnTimeout;\n            \n            const result = service.isAfk(game, player);\n\n            expect(result).toBeTrue();\n        });\n\n        it('should return true if the player has missed too many cycles', () => {\n            const seconds = game.settings.galaxy.productionTicks * game.settings.gameTime.speed * game.settings.gameTime.afk.cycleTimeout;\n\n            player.lastSeen = moment().utc().subtract(seconds, 'seconds').toDate();\n            \n            const result = service.isAfk(game, player);\n\n            expect(result).toBeTrue();\n        });\n\n        it('should return false if the player has missed too many cycles but seen less than 12h ago', () => {\n            game.settings.galaxy.productionTicks = 1;\n            game.settings.gameTime.speed = 30;\n            game.settings.gameTime.afk.cycleTimeout = 1;\n\n            const seconds = game.settings.galaxy.productionTicks * game.settings.gameTime.speed * game.settings.gameTime.afk.cycleTimeout;\n\n            player.lastSeen = moment().utc().subtract(seconds, 'seconds').toDate();\n            \n            const result = service.isAfk(game, player);\n\n            expect(result).toBeFalse();\n        });\n    });\n});\n"],
  "mappings": "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",
  "names": ["game", "moment", "PlayerAfkService"]
}
