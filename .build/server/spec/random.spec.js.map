{
  "version": 3,
  "sources": ["../../../server/spec/random.spec.ts"],
  "sourcesContent": ["import RandomService from '../services/random';\n\ndescribe('random', () => {\n\n    let randomService;\n\n    beforeEach(() => {\n        randomService = new RandomService();\n    });\n\n    it('should generate a random number', () => {\n        const max = 10;\n        const res = randomService.getRandomNumber(max);\n        \n        expect(res).toBeGreaterThanOrEqual(0);\n        expect(res).toBeLessThan(max);\n    });\n\n    it('should generate a random number between x and y', () => {\n        const min = 0;\n        const max = 10;\n\n        const res = randomService.getRandomNumberBetween(min, max);\n        \n        expect(res).toBeGreaterThanOrEqual(min);\n        expect(res).toBeLessThanOrEqual(max);\n    });\n\n    it('should generate a random angle', () => {\n        const res = randomService.getRandomAngle();\n        \n        expect(res).toBeGreaterThanOrEqual(0);\n        expect(res).toBeLessThanOrEqual(1 + Math.PI * 2);\n    });\n\n    it('should generate a random position in a circle', () => {\n        const radius = 10;\n\n        const res = randomService.getRandomPositionInCircle(radius);\n\n        expect(res).not.toBe(null);\n\n        expect(res.x).toBeGreaterThanOrEqual(radius * -1);\n        expect(res.x).toBeLessThanOrEqual(radius);\n\n        expect(res.y).toBeGreaterThanOrEqual(radius * -1);\n        expect(res.y).toBeLessThanOrEqual(radius);\n    });\n\n\n    describe('generateStarNaturalResources', () => {\n\n        const minResourceValue = 10;\n        const maxResourceValue = 50;\n        let radius;\n\n        it('should generate a minimum resource score', () => {\n\n            radius = 5;\n            let x = 3\n            let y = 4;\n\n            let res = randomService.generateStarNaturalResources(radius, x, y, minResourceValue, maxResourceValue);\n            expect(res).toBe(minResourceValue);\n\n            radius = Math.sqrt(5);\n            x = 1;\n            y = 2;\n\n            res = randomService.generateStarNaturalResources(radius, x, y,minResourceValue, maxResourceValue);\n            expect(res).toBe(minResourceValue);\n        });\n\n        it('should generate a maximum resource score', () => {\n\n            let radius = 5;\n            let x = 0\n            let y = 0;\n\n            let res = randomService.generateStarNaturalResources(radius, x, y, minResourceValue, maxResourceValue);\n            expect(res).toBe(maxResourceValue);\n\n            radius = 10;\n            res = randomService.generateStarNaturalResources(radius, x, y, minResourceValue, maxResourceValue);\n            expect(res).toBe(maxResourceValue);\n        });\n\n        it('should generate a resource score based on the distance from the centre', () => {\n\n            const radius = 5;\n            let x = 0\n            let y = 0;\n\n            // @ts-ignore\n            let limit = Math.sqrt(Math.pow(radius)/2);\n\n            let lastRes = maxResourceValue;\n\n            for(let i = 0; i < limit; i+=0.5) {\n\n                x = i;\n                y = i;\n             \n                let res = randomService.generateStarNaturalResources(radius, x, y, minResourceValue, maxResourceValue);\n\n                expect(res).toBeGreaterThanOrEqual(minResourceValue);\n                expect(res).toBeLessThanOrEqual(maxResourceValue);\n\n                expect(res).toBeLessThan(lastRes);\n\n                lastRes = res;\n            }\n        })\n    });\n\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,oBAA0B;AAE1B,SAAS,UAAU,MAAM;AAErB,MAAI;AAEJ,aAAW,MAAM;AACb,oBAAgB,IAAI,cAAAA,QAAc;AAAA,EACtC,CAAC;AAED,KAAG,mCAAmC,MAAM;AACxC,UAAM,MAAM;AACZ,UAAM,MAAM,cAAc,gBAAgB,GAAG;AAE7C,WAAO,GAAG,EAAE,uBAAuB,CAAC;AACpC,WAAO,GAAG,EAAE,aAAa,GAAG;AAAA,EAChC,CAAC;AAED,KAAG,mDAAmD,MAAM;AACxD,UAAM,MAAM;AACZ,UAAM,MAAM;AAEZ,UAAM,MAAM,cAAc,uBAAuB,KAAK,GAAG;AAEzD,WAAO,GAAG,EAAE,uBAAuB,GAAG;AACtC,WAAO,GAAG,EAAE,oBAAoB,GAAG;AAAA,EACvC,CAAC;AAED,KAAG,kCAAkC,MAAM;AACvC,UAAM,MAAM,cAAc,eAAe;AAEzC,WAAO,GAAG,EAAE,uBAAuB,CAAC;AACpC,WAAO,GAAG,EAAE,oBAAoB,IAAI,KAAK,KAAK,CAAC;AAAA,EACnD,CAAC;AAED,KAAG,iDAAiD,MAAM;AACtD,UAAM,SAAS;AAEf,UAAM,MAAM,cAAc,0BAA0B,MAAM;AAE1D,WAAO,GAAG,EAAE,IAAI,KAAK,IAAI;AAEzB,WAAO,IAAI,CAAC,EAAE,uBAAuB,SAAS,EAAE;AAChD,WAAO,IAAI,CAAC,EAAE,oBAAoB,MAAM;AAExC,WAAO,IAAI,CAAC,EAAE,uBAAuB,SAAS,EAAE;AAChD,WAAO,IAAI,CAAC,EAAE,oBAAoB,MAAM;AAAA,EAC5C,CAAC;AAGD,WAAS,gCAAgC,MAAM;AAE3C,UAAM,mBAAmB;AACzB,UAAM,mBAAmB;AACzB,QAAI;AAEJ,OAAG,4CAA4C,MAAM;AAEjD,eAAS;AACT,UAAI,IAAI;AACR,UAAI,IAAI;AAER,UAAI,MAAM,cAAc,6BAA6B,QAAQ,GAAG,GAAG,kBAAkB,gBAAgB;AACrG,aAAO,GAAG,EAAE,KAAK,gBAAgB;AAEjC,eAAS,KAAK,KAAK,CAAC;AACpB,UAAI;AACJ,UAAI;AAEJ,YAAM,cAAc,6BAA6B,QAAQ,GAAG,GAAE,kBAAkB,gBAAgB;AAChG,aAAO,GAAG,EAAE,KAAK,gBAAgB;AAAA,IACrC,CAAC;AAED,OAAG,4CAA4C,MAAM;AAEjD,UAAIC,UAAS;AACb,UAAI,IAAI;AACR,UAAI,IAAI;AAER,UAAI,MAAM,cAAc,6BAA6BA,SAAQ,GAAG,GAAG,kBAAkB,gBAAgB;AACrG,aAAO,GAAG,EAAE,KAAK,gBAAgB;AAEjC,MAAAA,UAAS;AACT,YAAM,cAAc,6BAA6BA,SAAQ,GAAG,GAAG,kBAAkB,gBAAgB;AACjG,aAAO,GAAG,EAAE,KAAK,gBAAgB;AAAA,IACrC,CAAC;AAED,OAAG,0EAA0E,MAAM;AAE/E,YAAMA,UAAS;AACf,UAAI,IAAI;AACR,UAAI,IAAI;AAGR,UAAI,QAAQ,KAAK,KAAK,KAAK,IAAIA,OAAM,IAAE,CAAC;AAExC,UAAI,UAAU;AAEd,eAAQ,IAAI,GAAG,IAAI,OAAO,KAAG,KAAK;AAE9B,YAAI;AACJ,YAAI;AAEJ,YAAI,MAAM,cAAc,6BAA6BA,SAAQ,GAAG,GAAG,kBAAkB,gBAAgB;AAErG,eAAO,GAAG,EAAE,uBAAuB,gBAAgB;AACnD,eAAO,GAAG,EAAE,oBAAoB,gBAAgB;AAEhD,eAAO,GAAG,EAAE,aAAa,OAAO;AAEhC,kBAAU;AAAA,MACd;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AAEL,CAAC;",
  "names": ["RandomService", "radius"]
}
