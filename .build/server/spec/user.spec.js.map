{
  "version": 3,
  "sources": ["../../../server/spec/user.spec.ts"],
  "sourcesContent": ["import UserService from '../services/user';\n\nconst fakeBcrypt = {\n    compare(password1, password2) {\n        return password1 == password2;\n    },\n    hash(password) {\n        return password; // Doesn't need to do anything fancy.\n    }\n};\n\nlet userList: any[] = [];\n\nconst fakeUserModel = {\n\n};\n\nconst fakeUserRepo = {\n    async findById(id) {\n        return Promise.resolve(userList.find(x => x._id == id));\n    },\n    async findOne(user) {\n        return Promise.resolve(userList.find(x => x.email == user.email));\n    },\n    async updateOne(user) {\n        return Promise.resolve(user);\n    }\n};\n\ndescribe('user', () => {\n    let service;\n\n    beforeAll(() => {\n        // @ts-ignore\n        service = new UserService(fakeUserModel, fakeUserRepo, fakeBcrypt);\n\n        userList = [\n            {\n                _id: 1,\n                email: 'test@test.com',\n                username: 'hello',\n                password: 'test',\n                save() {\n                    return true;\n                }\n            },\n            {\n                _id: 2,\n                email: 'test2@test.com',\n                username: 'world',\n                password: 'test',\n                save() {\n                    return true;\n                }\n            },\n        ];\n    });\n\n    // it('should get the current user by ID', async (done) => {\n    //     let result = await service.getMe(1);\n\n    //     expect(result._id).toBe(1);\n\n    //     done();\n    // });\n\n    it('should get a user by ID', async () => {\n        let result = await service.getById(2);\n\n        expect(result._id).toBe(2);\n    });\n\n    it('should check if a user exists', async () => {\n        let result = await service.userExists('test@test.com');\n\n        expect(result).toBeTruthy();\n    });\n\n    it('should check if a user exists in a different case', async () => {\n        let result = await service.userExists('tesT@test.com');\n\n        expect(result).toBeTruthy();\n    });\n\n\n    it('should check if a user does not exist', async () => {\n        let result = await service.userExists('fffff');\n\n        expect(result).toBeFalsy();\n    });\n\n    it('should fail to update the password of a user if the passwords do not match', async () => {\n        let userId = 1;\n        let oldPassword = 'yyyy';\n        let newPassword = 'xxxx';\n\n        try {\n            await service.updatePassword(userId, oldPassword, newPassword);\n        } catch (err: any) {\n            expect(err.message).toBe('The current password is incorrect.');\n        }\n    });\n\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,kBAAwB;AAExB,MAAM,aAAa;AAAA,EACf,QAAQ,WAAW,WAAW;AAC1B,WAAO,aAAa;AAAA,EACxB;AAAA,EACA,KAAK,UAAU;AACX,WAAO;AAAA,EACX;AACJ;AAEA,IAAI,WAAkB,CAAC;AAEvB,MAAM,gBAAgB,CAEtB;AAEA,MAAM,eAAe;AAAA,EACjB,MAAM,SAAS,IAAI;AACf,WAAO,QAAQ,QAAQ,SAAS,KAAK,OAAK,EAAE,OAAO,EAAE,CAAC;AAAA,EAC1D;AAAA,EACA,MAAM,QAAQ,MAAM;AAChB,WAAO,QAAQ,QAAQ,SAAS,KAAK,OAAK,EAAE,SAAS,KAAK,KAAK,CAAC;AAAA,EACpE;AAAA,EACA,MAAM,UAAU,MAAM;AAClB,WAAO,QAAQ,QAAQ,IAAI;AAAA,EAC/B;AACJ;AAEA,SAAS,QAAQ,MAAM;AACnB,MAAI;AAEJ,YAAU,MAAM;AAEZ,cAAU,IAAI,YAAAA,QAAY,eAAe,cAAc,UAAU;AAEjE,eAAW;AAAA,MACP;AAAA,QACI,KAAK;AAAA,QACL,OAAO;AAAA,QACP,UAAU;AAAA,QACV,UAAU;AAAA,QACV,OAAO;AACH,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,MACA;AAAA,QACI,KAAK;AAAA,QACL,OAAO;AAAA,QACP,UAAU;AAAA,QACV,UAAU;AAAA,QACV,OAAO;AACH,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ,CAAC;AAUD,KAAG,2BAA2B,YAAY;AACtC,QAAI,SAAS,MAAM,QAAQ,QAAQ,CAAC;AAEpC,WAAO,OAAO,GAAG,EAAE,KAAK,CAAC;AAAA,EAC7B,CAAC;AAED,KAAG,iCAAiC,YAAY;AAC5C,QAAI,SAAS,MAAM,QAAQ,WAAW,eAAe;AAErD,WAAO,MAAM,EAAE,WAAW;AAAA,EAC9B,CAAC;AAED,KAAG,qDAAqD,YAAY;AAChE,QAAI,SAAS,MAAM,QAAQ,WAAW,eAAe;AAErD,WAAO,MAAM,EAAE,WAAW;AAAA,EAC9B,CAAC;AAGD,KAAG,yCAAyC,YAAY;AACpD,QAAI,SAAS,MAAM,QAAQ,WAAW,OAAO;AAE7C,WAAO,MAAM,EAAE,UAAU;AAAA,EAC7B,CAAC;AAED,KAAG,8EAA8E,YAAY;AACzF,QAAI,SAAS;AACb,QAAI,cAAc;AAClB,QAAI,cAAc;AAElB,QAAI;AACA,YAAM,QAAQ,eAAe,QAAQ,aAAa,WAAW;AAAA,IACjE,SAAS,KAAP;AACE,aAAO,IAAI,OAAO,EAAE,KAAK,oCAAoC;AAAA,IACjE;AAAA,EACJ,CAAC;AAEL,CAAC;",
  "names": ["UserService"]
}
