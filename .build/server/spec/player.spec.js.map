{
  "version": 3,
  "sources": ["../../../server/spec/player.spec.ts"],
  "sourcesContent": ["const mongoose = require('mongoose');\n\nimport DistanceService from '../services/distance';\nimport StarDistanceService from '../services/starDistance';\nimport MapService from '../services/map';\nimport RandomService from '../services/random';\nimport StarService from '../services/star';\nimport CarrierService from '../services/carrier';\nimport PlayerService from '../services/player';\nimport NameService from '../services/name';\nimport TechnologyService from '../services/technology';\n\nconst gameNames = require('../config/game/gameNames');\nconst starNames = require('../config/game/starNames');\n\nconst game = {\n    settings: {\n        general: {\n            playerLimit: 4\n        },\n        player: {\n            startingCredits: 500,\n            startingShips: 10,\n            startingStars: 3,\n            startingInfrastructure: {\n                economy: 5,\n                industry: 5,\n                science: 1\n            },\n            developmentCost: {\n                economy: 'standard',\n                industry: 'standard',\n                science: 'standard'\n            }\n        },\n        technology: {\n            startingTechnologyLevel: {\n                terraforming: 1,\n                experimentation: 1,\n                scanning: 1,\n                hyperspace: 1,\n                manufacturing: 1,\n                banking: 1,\n                weapons: 1,\n                specialists: 1\n            },\n            researchCosts: {\n                terraforming: 'standard',\n                experimentation: 'standard',\n                scanning: 'standard',\n                hyperspace: 'standard',\n                manufacturing: 'standard',\n                banking: 'standard',\n                weapons: 'standard',\n                specialists: 'standard'\n            }\n        },\n        galaxy: {\n            galaxyType: 'circular'\n        },\n        specialGalaxy: {\n            playerDistribution: 'circular',\n            carrierSpeed: 5\n        }\n    },\n    constants: {\n        distances: {\n            lightYear: 30,\n            minDistanceBetweenStars: 30,\n            maxDistanceBetweenStars: 300\n        },\n        star: {\n            resources: {\n                minNaturalResources: 10,\n                maxNaturalResources: 50\n            }\n        }\n    },\n    galaxy: {\n        stars: []\n    }\n}\n\nfunction generateStarGrid() {\n    let stars: any[] = [];\n    let i = 0;\n\n    // Generate a grid of stars.\n    for(let x = 0; x < 100; x += 10) {\n        for(let y = 0; y < 100; y += 10) {\n            i++;\n\n            stars.push({\n                _id: new mongoose.Types.ObjectId(),\n                name: `Star ${i}`,\n                location: {\n                    x, y\n                },\n                infrastructure: {},\n                naturalResources: {}\n            });\n        }\n    }\n\n    return stars;\n}\n\nfunction assertNewPlayer(newPlayer, colour) {\n    colour = colour || newPlayer.colour;\n\n    expect(newPlayer).not.toBe(null);\n    expect(newPlayer._id).not.toBe(null);\n    expect(newPlayer.userId).toBe(null);\n    expect(newPlayer.alias).not.toBe(null);\n    expect(newPlayer.credits).toEqual(game.settings.player.startingCredits);\n    expect(newPlayer.colour).toBe(colour);\n\n    for(var key in newPlayer.research) {\n        const res1 = newPlayer.research[key].level;\n        const res2 = game.settings.technology.startingTechnologyLevel[key];\n        expect(res1).toEqual(res2);\n    }\n}\n\ndescribe('player', () => {\n\n    let randomService;\n    let distanceService;\n    let starDistanceService;\n    let carrierService;\n    let starService;\n    let nameService;\n    let mapService;\n    let technologyService;\n    let playerService;\n\n    beforeEach(() => {\n        // Use real services because I cannot fathom how to fake all this shit.\n        randomService = new RandomService();\n        distanceService = new DistanceService();\n        starDistanceService = new StarDistanceService(distanceService);\n        // @ts-ignore\n        carrierService = new CarrierService();\n        // @ts-ignore\n        starService = new StarService({}, randomService);\n        // @ts-ignore\n        nameService = new NameService(gameNames, starNames, randomService);\n        // @ts-ignore\n        mapService = new MapService(randomService, starService, distanceService, starDistanceService, nameService);\n        // @ts-ignore\n        technologyService = new TechnologyService();\n        // @ts-ignore\n        playerService = new PlayerService(null, randomService, mapService, starService, carrierService, starDistanceService, technologyService);\n    });\n\n    it('should create an empty player', () => {\n        const yellow = { alias: 'Yellow', value: '0xFFC000' };\n\n        const newPlayer = playerService.createEmptyPlayer(game, yellow);\n\n        assertNewPlayer(newPlayer, yellow);\n    });\n\n    it('should create a list of empty players', () => {\n        const allStars: any[] = generateStarGrid();\n        // @ts-ignore\n        game.galaxy.stars = allStars;\n        const players = playerService.createEmptyPlayers(game);\n\n        expect(players.length).toEqual(game.settings.general.playerLimit);\n\n        for(let i = 0; i < players.length; i++) {\n            let newPlayer = players[i];\n\n            assertNewPlayer(newPlayer, null);\n\n            // Assert owned stars.\n            const starsOwned = allStars.filter(x => x.ownedByPlayerId === newPlayer._id);\n\n            expect(starsOwned.length).toEqual(game.settings.player.startingStars);\n\n            // Assert non-home star ships.\n            starsOwned.filter(x => !x.homeStar).forEach(s => {\n                expect(s.ships).toEqual(game.settings.player.startingShips);\n            });\n\n            // Assert home star.\n            const homeStar: any = allStars.find(x => x._id === newPlayer.homeStarId);\n            \n            expect(homeStar.ships).toEqual(game.settings.player.startingShips);\n        }\n    });\n\n});\n"],
  "mappings": "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",
  "names": ["RandomService", "DistanceService", "StarDistanceService", "CarrierService", "StarService", "NameService", "MapService", "TechnologyService", "PlayerService"]
}
