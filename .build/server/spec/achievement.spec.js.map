{
  "version": 3,
  "sources": ["../../../server/spec/achievement.spec.ts"],
  "sourcesContent": ["import AchievementService from '../services/achievement';\n\nconst userId = 'abc';\n\ndescribe('achievement', () => {\n    const incrementAchievementTest = async (key: string, incrementAmount: number, incrementFunctionCallback) => {\n        let calls = 0;\n\n        const fakeUserRepo = {\n            async updateOne(query, update) {\n                if (query._id === userId \n                    && update.$inc[key] == incrementAmount) {\n                    calls++;\n                }\n            }\n        };\n\n        const fakeGuildService = {};\n\n        // @ts-ignore\n        let service = new AchievementService(fakeUserRepo, fakeGuildService);\n        \n        await incrementFunctionCallback(service);\n\n        expect(calls).toBe(1);\n    }\n\n    it('should increment specialists hired achievement', async () => {\n        incrementAchievementTest('achievements.infrastructure.specialistsHired', 1, async (service) => {\n            await service.incrementSpecialistsHired(userId, 1);\n        });\n    });\n\n    it('should increment warp gates built achievement', async () => {\n        incrementAchievementTest('achievements.infrastructure.warpGates', 1, async (service) => {\n            await service.incrementWarpGatesBuilt(userId, 1);\n        });\n    });\n\n    it('should increment warp gates destroyed achievement', async () => {\n        incrementAchievementTest('achievements.infrastructure.warpGatesDestroyed', 1, async (service) => {\n            await service.incrementWarpGatesDestroyed(userId, 1);\n        });\n    });\n\n    it('should increment carriers built achievement', async () => {\n        incrementAchievementTest('achievements.infrastructure.carriers', 1, async (service) => {\n            await service.incrementCarriersBuilt(userId, 1);\n        });\n    });\n\n    it('should increment infrastructure economy built achievement', async () => {\n        incrementAchievementTest('achievements.infrastructure.economy', 1, async (service) => {\n            await service.incrementInfrastructureBuilt('economy', userId, 1);\n        });\n    });\n\n    it('should increment infrastructure industry built achievement', async () => {\n        incrementAchievementTest('achievements.infrastructure.industry', 1, async (service) => {\n            await service.incrementInfrastructureBuilt('industry', userId, 1);\n        });\n    });\n\n    it('should increment infrastructure science built achievement', async () => {\n        incrementAchievementTest('achievements.infrastructure.science', 1, async (service) => {\n            await service.incrementInfrastructureBuilt('science', userId, 1);\n        });\n    });\n\n    it('should increment trade credits sent achievement', async () => {\n        incrementAchievementTest('achievements.trade.creditsSent', 1, async (service) => {\n            await service.incrementTradeCreditsSent(userId, 1);\n        });\n    });\n\n    it('should increment trade credits received achievement', async () => {\n        incrementAchievementTest('achievements.trade.creditsReceived', 1, async (service) => {\n            await service.incrementTradeCreditsReceived(userId, 1);\n        });\n    });\n\n    it('should increment trade credits specialists sent achievement', async () => {\n        incrementAchievementTest('achievements.trade.creditsSpecialistsSent', 1, async (service) => {\n            await service.incrementTradeCreditsSpecialistsSent(userId, 1);\n        });\n    });\n\n    it('should increment trade credits specialists received achievement', async () => {\n        incrementAchievementTest('achievements.trade.creditsSpecialistsReceived', 1, async (service) => {\n            await service.incrementTradeCreditsSpecialistsReceived(userId, 1);\n        });\n    });\n\n    it('should increment trade technology sent achievement', async () => {\n        incrementAchievementTest('achievements.trade.technologySent', 1, async (service) => {\n            await service.incrementTradeTechnologySent(userId, 1);\n        });\n    });\n\n    it('should increment trade technology received achievement', async () => {\n        incrementAchievementTest('achievements.trade.technologyReceived', 1, async (service) => {\n            await service.incrementTradeTechnologyReceived(userId, 1);\n        });\n    });\n\n    it('should increment trade renown sent achievement', async () => {\n        incrementAchievementTest('achievements.trade.renownSent', 1, async (service) => {\n            await service.incrementRenownSent(userId, 1);\n        });\n    });\n\n    it('should increment trade renown received achievement', async () => {\n        incrementAchievementTest('achievements.renown', 1, async (service) => {\n            await service.incrementRenownReceived(userId, 1);\n        });\n    });\n\n    it('should increment defeated achievement', async () => {\n        incrementAchievementTest('achievements.defeated', 1, async (service) => {\n            await service.incrementDefeated(userId, 1);\n        });\n    });\n\n    it('should increment joined achievement', async () => {\n        incrementAchievementTest('achievements.joined', 1, async (service) => {\n            await service.incrementJoined(userId, 1);\n        });\n    });\n\n    it('should increment quit achievement', async () => {\n        incrementAchievementTest('achievements.quit', 1, async (service) => {\n            await service.incrementQuit(userId, 1);\n        });\n    });\n\n});\n"],
  "mappings": "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",
  "names": ["AchievementService"]
}
