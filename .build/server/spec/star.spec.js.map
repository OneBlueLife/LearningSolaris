{
  "version": 3,
  "sources": ["../../../server/spec/star.spec.ts"],
  "sourcesContent": ["import StarService from '../services/star';\nconst starNames = require('../config/game/starNames');\n\nconst fakeRandomService = {\n    getRandomNumber(max) {\n        return max;\n    },\n    getRandomNumberBetween(min, max) {\n        return max;\n    },\n    getRandomPositionInCircle(radius) {\n        return radius;\n    },\n    getRandomPositionInCircleFromOrigin(originX, originY, radius) {\n        return radius;\n    },\n    generateStarNaturalResources() {\n        return 10;\n    }\n};\n\nconst fakeStarNameService = {\n    index: 0,\n    getRandomStarName() {\n        return `Test ${this.index++}`;\n    }\n};\n\nconst fakeDistanceService = {\n\n}\n\nconst fakeStarDistanceService = {\n\n}\n\nconst game = {\n    constants: {\n        star: {\n            resources: {\n                minNaturalResources: 10,\n                maxNaturalResources: 50\n            }\n        }\n    }\n};\n\ndescribe('star', () => {\n\n    let starService;\n\n    beforeEach(() => {\n        // @ts-ignore\n        starService = new StarService({}, fakeRandomService, fakeStarNameService, fakeDistanceService, fakeStarDistanceService);\n    });\n\n    it('should generate an unowned star', () => {\n        const name = 'test star name';\n\n        const newStar = starService.generateUnownedStar(name, { x: 0, y: 0 }, {\n            economy: 10,\n            industry: 10,\n            science: 10\n        });\n\n        expect(newStar).not.toBe(null);\n        expect(newStar._id).not.toBe(null);\n        expect(newStar.name).toEqual(name);\n        expect(newStar.naturalResources.economy).toBeGreaterThanOrEqual(game.constants.star.resources.minNaturalResources);\n        expect(newStar.naturalResources.economy).toBeLessThanOrEqual(game.constants.star.resources.maxNaturalResources);\n        expect(newStar.naturalResources.industry).toBeGreaterThanOrEqual(game.constants.star.resources.minNaturalResources);\n        expect(newStar.naturalResources.industry).toBeLessThanOrEqual(game.constants.star.resources.maxNaturalResources);\n        expect(newStar.naturalResources.science).toBeGreaterThanOrEqual(game.constants.star.resources.minNaturalResources);\n        expect(newStar.naturalResources.science).toBeLessThanOrEqual(game.constants.star.resources.maxNaturalResources);\n        expect(newStar.location).not.toBe(null);\n    });\n\n    it('should calculate terraformed resources', () => {\n        const star1 = {\n            naturalResources: {\n                economy: 34,\n                industry: 34,\n                science: 34\n            }\n        };\n        const star2 = {\n            naturalResources: {\n                economy: 23,\n                industry: 53,\n                science: 10\n            }\n        }\n\n        const result1 = starService.calculateTerraformedResources(star1, 5); // Normal resources\n        const result2 = starService.calculateTerraformedResources(star2, 2); // Split resources\n\n        expect(result1.economy).toBe(59);\n        expect(result1.industry).toBe(59);\n        expect(result1.science).toBe(59);\n\n        expect(result2.economy).toBe(33);\n        expect(result2.industry).toBe(63);\n        expect(result2.science).toBe(20);\n    });\n\n    it('should setup a player\\'s home star', () => {\n        const newPlayer = {\n            _id: 1\n        }\n\n        const homeStar = {\n            _id: 2,\n            infrastructure: {\n                economy: 0,\n                industry: 0,\n                science: 0\n            },\n            naturalResources: {},\n            ownedByPlayerId: 0,\n            ships: 0\n        };\n\n        const gameSettings = {\n            player: {\n                startingShips: 10,\n                startingInfrastructure: {\n                    economy: 10,\n                    industry: 10,\n                    science: 1\n                }\n            },\n            galaxy: {\n                galaxyType: 'irregular'\n            }\n        };\n\n        starService.setupHomeStar(game, homeStar, newPlayer, gameSettings);\n\n        expect(homeStar.ownedByPlayerId).toBe(newPlayer._id);\n        expect(homeStar.ships).toEqual(gameSettings.player.startingShips);\n        expect(homeStar.infrastructure.economy).toEqual(gameSettings.player.startingInfrastructure.economy);\n        expect(homeStar.infrastructure.industry).toEqual(gameSettings.player.startingInfrastructure.industry);\n        expect(homeStar.infrastructure.science).toEqual(gameSettings.player.startingInfrastructure.science);\n    });\n    \n});\n"],
  "mappings": "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",
  "names": ["StarService"]
}
