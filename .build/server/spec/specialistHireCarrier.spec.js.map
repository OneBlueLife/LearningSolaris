{
  "version": 3,
  "sources": ["../../../server/spec/specialistHireCarrier.spec.ts"],
  "sourcesContent": ["const mongoose = require('mongoose');\nimport SpecialistHireService from '../services/specialistHire';\n\ndescribe('specialistHire - Carrier', () => {\n\n    // -------------\n    // Mock Objects\n\n    function setup() {\n        let obj = {\n            service: {} as any,\n            gameRepo: {\n                bulkWrite: () => {}\n            },\n            specialistService: {} as any,\n            technologyService: {\n                getCarrierEffectiveTechnologyLevels: () => {}\n            },\n            achievementService: {\n                incrementSpecialistsHired: () => {}\n            },\n            waypointService: {\n                cullWaypointsByHyperspaceRangeDB: () => {}\n            },\n            playerService: {} as any,\n            playerCreditsService: {} as any,\n            starService: {\n                isOwnedByPlayer: () => { return true; },\n                getById: () => { return {} as any; },\n                isDeadStar: () => { return false; }\n            },\n            gameTypeService: {\n                isTutorialGame: () => { return false; }\n            },\n            specialistBanService: {\n                isCarrierSpecialistBanned: () => { return false; }\n            },\n            game: { \n                settings: {\n                    specialGalaxy: {\n                        specialistCost: 'standard',\n                        specialistsCurrency: 'credits',\n                        specialistBans: {\n                            star: [] as any[],\n                            carrier: [] as any[]\n                        }\n                    }\n                },\n                galaxy: {\n                    carriers: [] as any[],\n                    stars: [] as any[]\n                }\n            },\n            playerId: new mongoose.Types.ObjectId(),\n            player: {\n                _id: null,\n                credits: 0,\n                creditsSpecialists: 0\n            },\n            carrierId: new mongoose.Types.ObjectId(),\n            starId: new mongoose.Types.ObjectId(),\n            specialistId: 1\n        };\n\n        obj.player._id = obj.playerId;\n\n        // @ts-ignore\n        obj.service = new SpecialistHireService(obj.gameRepo, obj.specialistService, obj.achievementService, obj.waypointService, obj.playerCreditsService, obj.starService, obj.gameTypeService, obj.specialistBanService, obj.technologyService);\n\n        return obj;\n    }\n\n    function carrierUnowned(testObj) {\n        return {\n            _id: testObj.carrierId,\n            ownedByPlayerId: new mongoose.Types.ObjectId(),\n            orbiting: testObj.starId,\n            specialistId: null\n        };\n    }\n\n    function carrierInTransit(testObj) {\n        return {\n            _id: testObj.carrierId,\n            ownedByPlayerId: testObj.playerId,\n            orbiting: null,\n            specialistId: null\n        };\n    }\n    \n    function carrierInOrbit(testObj) {\n        return {\n            _id: testObj.carrierId,\n            ownedByPlayerId: testObj.playerId,\n            orbiting: testObj.starId,\n            specialistId: null\n        };\n    }\n\n    function starBasic(testObj) {\n        return {\n            _id: testObj.starId,\n            ownedByPlayerId: testObj.playerId\n        };\n    }\n\n    function carrierInOrbitWithSpec(testObj, specId) {\n        return {\n            _id: testObj.carrierId,\n            ownedByPlayerId: testObj.playerId,\n            orbiting: testObj.starId,\n            specialistId: specId || null\n        };\n    }\n\n    function specialistBasic(testObj) {\n        return {\n            id: testObj.specialistId\n        }\n    }\n\n    // -------------\n\n    it('should throw an error if specialists are disabled', async () => {\n        let testObj = setup();\n        let hasError = false;\n\n        testObj.game.settings.specialGalaxy.specialistCost = 'none';\n\n        try {\n            await testObj.service.hireCarrierSpecialist(testObj.game, testObj.player, testObj.carrierId, testObj.specialistId);\n        } catch (err: any) {\n            hasError = true;\n            expect(err.message).toContain('disabled the hiring of specialists');\n        }\n        \n        expect(hasError).toBeTruthy();\n    });\n\n    it('should throw an error if the specialist is banned', async () => {\n        let testObj = setup();\n        let hasError = false;\n\n        testObj.specialistBanService.isCarrierSpecialistBanned = () => true;\n\n        try {\n            await testObj.service.hireCarrierSpecialist(testObj.game, testObj.player, testObj.carrierId, testObj.specialistId);\n        } catch (err: any) {\n            hasError = true;\n            expect(err.message).toContain('banned');\n        }\n        \n        expect(hasError).toBeTruthy();\n    });\n\n    it('should throw an error if the carrier does not exist', async () => {\n        let testObj = setup();\n        let hasError = false;\n\n        testObj.game.galaxy.carriers.push(carrierUnowned(testObj));\n\n        try {\n            await testObj.service.hireCarrierSpecialist(testObj.game, testObj.player, testObj.carrierId, testObj.specialistId);\n        } catch (err: any) {\n            hasError = true;\n            expect(err.message).toContain('you do not own');\n        }\n        \n        expect(hasError).toBeTruthy();\n    });\n\n    it('should throw an error if the carrier is not in orbit', async () => {\n        let testObj = setup();\n        let hasError = false;\n\n        testObj.game.galaxy.carriers.push(carrierInTransit(testObj));\n\n        try {\n            await testObj.service.hireCarrierSpecialist(testObj.game, testObj.player, testObj.carrierId, testObj.specialistId);\n        } catch (err: any) {\n            hasError = true;\n            expect(err.message).toContain('in transit');\n        }\n        \n        expect(hasError).toBeTruthy();\n    });\n\n    it('should throw an error trying to hire the specialist on a dead star', async () => {\n        let testObj = setup();\n        let hasError = false;\n        let star = starBasic(testObj);\n\n        testObj.game.galaxy.carriers.push(carrierInOrbit(testObj));\n        testObj.game.galaxy.stars.push(star);\n\n        testObj.specialistService.getByIdCarrier = (id) => {\n            return null;\n        };\n\n        testObj.starService.getById = () => {\n            return star;\n        };\n\n        testObj.starService.isDeadStar = () => {\n            return true;\n        };\n\n        try {\n            await testObj.service.hireCarrierSpecialist(testObj.game, testObj.player, testObj.carrierId, testObj.specialistId);\n        } catch (err: any) {\n            hasError = true;\n            expect(err.message).toContain('dead star');\n        }\n        \n        expect(hasError).toBeTruthy();\n    });\n\n    it('should throw an error if the specialist does not exist', async () => {\n        let testObj = setup();\n        let hasError = false;\n        let star = starBasic(testObj);\n\n        testObj.game.galaxy.carriers.push(carrierInOrbit(testObj));\n        testObj.game.galaxy.stars.push(star);\n\n        testObj.specialistService.getByIdCarrier = (id) => {\n            return null;\n        };\n\n        testObj.starService.getById = () => {\n            return star;\n        };\n\n        testObj.starService.isDeadStar = () => {\n            return false;\n        };\n\n        try {\n            await testObj.service.hireCarrierSpecialist(testObj.game, testObj.player, testObj.carrierId, testObj.specialistId);\n        } catch (err: any) {\n            hasError = true;\n            expect(err.message).toContain('does not exist');\n        }\n        \n        expect(hasError).toBeTruthy();\n    });\n\n    it('should throw an error if the specialist is already on the carrier', async () => {\n        let testObj = setup();\n        let hasError = false;\n        let star = starBasic(testObj);\n\n        testObj.game.galaxy.carriers.push(carrierInOrbitWithSpec(testObj, testObj.specialistId));\n        testObj.game.galaxy.stars.push(star);\n\n        testObj.specialistService.getByIdCarrier = (id) => {\n            return specialistBasic(testObj);\n        };\n\n        testObj.starService.getById = () => {\n            return star;\n        };\n\n        testObj.starService.isDeadStar = () => {\n            return false;\n        };\n\n        try {\n            await testObj.service.hireCarrierSpecialist(testObj.game, testObj.player, testObj.carrierId, testObj.specialistId);\n        } catch (err: any) {\n            hasError = true;\n            expect(err.message).toContain('already has the specialist assigned');\n        }\n        \n        expect(hasError).toBeTruthy();\n    });\n\n    it('should throw an error if the player cannot afford the specialist by credits', async () => {\n        let testObj = setup();\n        let hasError = false;\n        let star = starBasic(testObj);\n\n        testObj.game.galaxy.carriers.push(carrierInOrbitWithSpec(testObj, null));\n        testObj.game.galaxy.stars.push(star);\n\n        testObj.specialistService.getByIdCarrier = (id) => {\n            return specialistBasic(testObj);\n        };\n\n        testObj.starService.getById = () => {\n            return star;\n        };\n\n        testObj.starService.isDeadStar = () => {\n            return false;\n        };\n\n        testObj.specialistService.getSpecialistActualCost = () => {\n            return {\n                credits: 1000\n            }\n        };\n\n        testObj.game.settings.specialGalaxy.specialistsCurrency = 'credits';\n        testObj.player.credits = 1;\n\n        try {\n            await testObj.service.hireCarrierSpecialist(testObj.game, testObj.player, testObj.carrierId, testObj.specialistId);\n        } catch (err: any) {\n            hasError = true;\n            expect(err.message).toContain('cannot afford');\n        }\n        \n        expect(hasError).toBeTruthy();\n    });\n\n    it('should throw an error if the player cannot afford the specialist by specialist credits', async () => {\n        let testObj = setup();\n        let hasError = false;\n        let star = starBasic(testObj);\n\n        testObj.game.galaxy.carriers.push(carrierInOrbitWithSpec(testObj, null));\n        testObj.game.galaxy.stars.push(star);\n\n        testObj.specialistService.getByIdCarrier = (id) => {\n            return specialistBasic(testObj);\n        };\n\n        testObj.starService.getById = () => {\n            return star;\n        };\n\n        testObj.starService.isDeadStar = () => {\n            return false;\n        };\n\n        testObj.specialistService.getSpecialistActualCost = () => {\n            return {\n                creditsSpecialists: 1000\n            }\n        };\n\n        testObj.game.settings.specialGalaxy.specialistsCurrency = 'creditsSpecialists';\n        testObj.player.creditsSpecialists = 1;\n\n        try {\n            await testObj.service.hireCarrierSpecialist(testObj.game, testObj.player, testObj.carrierId, testObj.specialistId);\n        } catch (err: any) {\n            hasError = true;\n            expect(err.message).toContain('cannot afford');\n        }\n        \n        expect(hasError).toBeTruthy();\n    });\n\n    it('should assign the specialist to the carrier', async () => {\n        let testObj = setup();\n        let hasError = false;\n        let carrier = carrierInOrbitWithSpec(testObj, null);\n        let star = starBasic(testObj);\n\n        testObj.game.galaxy.carriers.push(carrier);\n        testObj.game.galaxy.stars.push(star);\n\n        testObj.specialistService.getByIdCarrier = (id) => {\n            return specialistBasic(testObj);\n        };\n\n        testObj.starService.getById = () => {\n            return star;\n        };\n\n        testObj.starService.isDeadStar = () => {\n            return false;\n        };\n\n        testObj.specialistService.getSpecialistActualCost = () => {\n            return {\n                credits: 100\n            }\n        };\n\n        testObj.playerCreditsService.addCredits = (game, player, amount: number) => {\n            expect(amount).toBe(-100);\n        };\n\n        testObj.game.settings.specialGalaxy.specialistsCurrency = 'credits';\n        testObj.player.credits = 100;\n\n        try {\n            await testObj.service.hireCarrierSpecialist(testObj.game, testObj.player, testObj.carrierId, testObj.specialistId);\n        } catch (err: any) {\n            hasError = true;\n        }\n        \n        expect(hasError).toBeFalsy();\n        expect(carrier.specialistId).toBe(testObj.specialistId);\n        expect(testObj.player.credits).toBe(0);\n    });\n})"],
  "mappings": "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",
  "names": ["SpecialistHireService"]
}
