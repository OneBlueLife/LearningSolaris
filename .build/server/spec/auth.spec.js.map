{
  "version": 3,
  "sources": ["../../../server/spec/auth.spec.ts"],
  "sourcesContent": ["import AuthService from '../services/auth';\n\nconst fakeBcrypt = {\n    compare(password1: string, password2: string) {\n        return password1 == password2;\n    }\n};\n\nconst fakeUserModel = {\n    async findOne(user) {\n        return Promise.resolve([\n            {\n                _id: 1,\n                email: 'test@test.com',\n                username: 'hello',\n                password: 'test'\n            }\n        ].find(x => x.email == user.email));\n    }\n};\n\ndescribe('auth', () => {\n    let service;\n\n    beforeAll(() => {\n        // @ts-ignore\n        service = new AuthService(fakeUserModel, fakeBcrypt);\n    });\n\n    it('should compare passwords of a user', async () => {\n        let result = await service.login('test@test.com', 'test');\n\n        expect(result._id).toBe(1);\n    });\n\n    it('should fail if the passwords are not the same', async () => {\n        try {\n            await service.login('test@test.com', 'hello');\n\n            throw new Error('Should have thrown an error');\n        } catch (err) {\n            \n        }\n            \n    });\n\n    it('should fail if the email is not valid', async () => {\n        try {\n            await service.login('test', 'hello');\n\n            throw new Error('Should have thrown an error');\n        } catch (err) {\n            \n        }\n    });\n\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,kBAAwB;AAExB,MAAM,aAAa;AAAA,EACf,QAAQ,WAAmB,WAAmB;AAC1C,WAAO,aAAa;AAAA,EACxB;AACJ;AAEA,MAAM,gBAAgB;AAAA,EAClB,MAAM,QAAQ,MAAM;AAChB,WAAO,QAAQ,QAAQ;AAAA,MACnB;AAAA,QACI,KAAK;AAAA,QACL,OAAO;AAAA,QACP,UAAU;AAAA,QACV,UAAU;AAAA,MACd;AAAA,IACJ,EAAE,KAAK,OAAK,EAAE,SAAS,KAAK,KAAK,CAAC;AAAA,EACtC;AACJ;AAEA,SAAS,QAAQ,MAAM;AACnB,MAAI;AAEJ,YAAU,MAAM;AAEZ,cAAU,IAAI,YAAAA,QAAY,eAAe,UAAU;AAAA,EACvD,CAAC;AAED,KAAG,sCAAsC,YAAY;AACjD,QAAI,SAAS,MAAM,QAAQ,MAAM,iBAAiB,MAAM;AAExD,WAAO,OAAO,GAAG,EAAE,KAAK,CAAC;AAAA,EAC7B,CAAC;AAED,KAAG,iDAAiD,YAAY;AAC5D,QAAI;AACA,YAAM,QAAQ,MAAM,iBAAiB,OAAO;AAE5C,YAAM,IAAI,MAAM,6BAA6B;AAAA,IACjD,SAAS,KAAP;AAAA,IAEF;AAAA,EAEJ,CAAC;AAED,KAAG,yCAAyC,YAAY;AACpD,QAAI;AACA,YAAM,QAAQ,MAAM,QAAQ,OAAO;AAEnC,YAAM,IAAI,MAAM,6BAA6B;AAAA,IACjD,SAAS,KAAP;AAAA,IAEF;AAAA,EACJ,CAAC;AAEL,CAAC;",
  "names": ["AuthService"]
}
