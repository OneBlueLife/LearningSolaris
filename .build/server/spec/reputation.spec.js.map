{
  "version": 3,
  "sources": ["../../../server/spec/reputation.spec.ts"],
  "sourcesContent": ["import ReputationService from '../services/reputation';\n\ndescribe('reputation', () => {\n\n    const fakeGameRepo: any = {};\n    const fakePlayerStatisticsService: any = {};\n    const fakeDiplomacyService: any = {\n        isFormalAlliancesEnabled() { return false },\n        getDiplomaticStatusToPlayer() { },\n        declareEnemy() { },\n    };\n    const fakePlayerAfkService: any = {\n        isAIControlled() { return true }\n    };\n\n    let service: ReputationService;\n\n    beforeEach(() => {\n        service = new ReputationService(fakeGameRepo, fakePlayerStatisticsService, fakeDiplomacyService, fakePlayerAfkService);\n    });\n\n    const _playerIdA: any = 1;\n    const _playerIdB: any = 2;\n\n    const setupGame = (repAToB: number, repBToA: number) => {\n        const game: any = {\n            galaxy: {\n                players: [\n                    {\n                        _id: _playerIdA,\n                        defeated: false,\n                        reputations: [\n                            {\n                                playerId: _playerIdB,\n                                score: repAToB\n                            }\n                        ]\n                    },\n                    {\n                        _id: _playerIdB,\n                        defeated: false,\n                        reputations: [\n                            {\n                                playerId: _playerIdA,\n                                score: repBToA\n                            }\n                        ]\n                    }\n                ]\n            }\n        };\n\n        return game;\n    };\n\n    // ------------------\n    // Get reputation\n\n    it('should get the reputation from player A to B', () => {\n        const game = setupGame(1, 2);\n        const playerA = game.galaxy.players[0];\n        const playerB = game.galaxy.players[1];\n\n        let result = service.getReputation(playerA, playerB);\n\n        expect(result.reputation.playerId).toEqual(playerB._id);\n        expect(result.reputation.score).toEqual(1);\n    });\n\n    it('should get the reputation from player B to A', () => {\n        const game = setupGame(1, 2);\n        const playerA = game.galaxy.players[0];\n        const playerB = game.galaxy.players[1];\n\n        let result = service.getReputation(playerB, playerA);\n\n        expect(result.reputation.playerId).toEqual(playerA._id);\n        expect(result.reputation.score).toEqual(2);\n    });\n\n    // ------------------\n    // Increase reputation\n\n    it('should increase the reputation', async () => {\n        const game = setupGame(0, 0);\n        const playerA = game.galaxy.players[0];\n        const playerB = game.galaxy.players[1];\n\n        let result = await service.increaseReputation(game, playerA, playerB, 1, false);\n\n        expect(result.reputation.playerId).toEqual(playerB._id);\n        expect(result.reputation.score).toEqual(1);\n    });\n\n    it('should not increase the reputation if max reputation has been reached', async () => {\n        const game = setupGame(8, 0);\n        const playerA = game.galaxy.players[0];\n        const playerB = game.galaxy.players[1];\n\n        let result = await service.increaseReputation(game, playerA, playerB, 1, false);\n\n        expect(result.reputation.playerId).toEqual(playerB._id);\n        expect(result.reputation.score).toEqual(8);\n    });\n\n    // ------------------\n    // Decrease reputation\n\n    it('should decrease the reputation', async () => {\n        const game = setupGame(0, 0);\n        const playerA = game.galaxy.players[0];\n        const playerB = game.galaxy.players[1];\n\n        let result = await service.decreaseReputation(game, playerA, playerB, false);\n\n        expect(result.reputation.playerId).toEqual(playerB._id);\n        expect(result.reputation.score).toEqual(-1);\n    });\n\n    it('should not decrease the reputation if max reputation has been reached', async () => {\n        const game = setupGame(-8, 0);\n        const playerA = game.galaxy.players[0];\n        const playerB = game.galaxy.players[1];\n\n        let result = await service.decreaseReputation(game, playerA, playerB, false);\n\n        expect(result.reputation.playerId).toEqual(playerB._id);\n        expect(result.reputation.score).toEqual(-8);\n    });\n\n    it('should reset the reputation to 0 if greater than 0', async () => {\n        const game = setupGame(8, 0);\n        const playerA = game.galaxy.players[0];\n        const playerB = game.galaxy.players[1];\n\n        let result = await service.decreaseReputation(game, playerA, playerB, false);\n\n        expect(result.reputation.playerId).toEqual(playerB._id);\n        expect(result.reputation.score).toEqual(0);\n    });\n\n    it('should decrease the reputation by 1 if less than 0', async () => {\n        const game = setupGame(-1, 0);\n        const playerA = game.galaxy.players[0];\n        const playerB = game.galaxy.players[1];\n\n        let result = await service.decreaseReputation(game, playerA, playerB, false);\n\n        expect(result.reputation.playerId).toEqual(playerB._id);\n        expect(result.reputation.score).toEqual(-2);\n    });\n\n    // ------------------\n    // Recalculate diplomatic status\n\n    // Declare allies\n\n    it('should declare allies if above the reputation threshold', async () => {\n        let declaredAlly: boolean = false;\n\n        fakeDiplomacyService.isFormalAlliancesEnabled = () => true;\n        fakeDiplomacyService.declareAlly = () => { declaredAlly = true };\n        fakeDiplomacyService.getDiplomaticStatusToPlayer = () => { \n            return {\n                statusTo: 'neutral',\n                actualStatus: 'neutral' \n            } \n        };\n\n        const game = setupGame(4, 0);\n        const playerA = game.galaxy.players[0];\n        const playerB = game.galaxy.players[1];\n\n        playerA.defeated = true;\n\n        let result = await service.increaseReputation(game, playerA, playerB, 1, false);\n\n        expect(declaredAlly).toBeTrue();\n    });\n\n    it('should not declare allies already allied', async () => {\n        let declaredAlly: boolean = false;\n\n        fakeDiplomacyService.isFormalAlliancesEnabled = () => true;\n        fakeDiplomacyService.declareAlly = () => { declaredAlly = true };\n        fakeDiplomacyService.getDiplomaticStatusToPlayer = () => { \n            return {\n                statusTo: 'allies',\n                actualStatus: 'allies' \n            } \n        };\n\n        const game = setupGame(4, 0);\n        const playerA = game.galaxy.players[0];\n        const playerB = game.galaxy.players[1];\n\n        playerA.defeated = true;\n\n        let result = await service.increaseReputation(game, playerA, playerB, 1, false);\n\n        expect(declaredAlly).toBeFalse();\n    });\n\n    // Declare enemies\n\n    it('should declare enemies if below the reputation threshold', async () => {\n        let declaredEnemy: boolean = false;\n\n        fakeDiplomacyService.isFormalAlliancesEnabled = () => true;\n        fakeDiplomacyService.declareEnemy = () => { declaredEnemy = true };\n        fakeDiplomacyService.getDiplomaticStatusToPlayer = () => { \n            return {\n                statusTo: 'neutral',\n                actualStatus: 'neutral' \n            } \n        };\n\n        const game = setupGame(0, 0);\n        const playerA = game.galaxy.players[0];\n        const playerB = game.galaxy.players[1];\n\n        playerA.defeated = true;\n\n        let result = await service.decreaseReputation(game, playerA, playerB, false);\n\n        expect(declaredEnemy).toBeTrue();\n    });\n\n    it('should not declare enemies already enemies', async () => {\n        let declaredEnemy: boolean = false;\n\n        fakeDiplomacyService.isFormalAlliancesEnabled = () => true;\n        fakeDiplomacyService.declareEnemy = () => { declaredEnemy = true };\n        fakeDiplomacyService.getDiplomaticStatusToPlayer = () => { \n            return {\n                statusTo: 'enemies',\n                actualStatus: 'enemies' \n            } \n        };\n\n        const game = setupGame(0, 0);\n        const playerA = game.galaxy.players[0];\n        const playerB = game.galaxy.players[1];\n\n        playerA.defeated = true;\n\n        let result = await service.decreaseReputation(game, playerA, playerB, false);\n\n        expect(declaredEnemy).toBeFalse();\n    });\n\n    // Declare neutral\n\n    it('should declare neutral if above the enemy threshold', async () => {\n        let declaredNeutral: boolean = false;\n\n        fakeDiplomacyService.isFormalAlliancesEnabled = () => true;\n        fakeDiplomacyService.declareNeutral = () => { declaredNeutral = true };\n        fakeDiplomacyService.getDiplomaticStatusToPlayer = () => { \n            return {\n                statusTo: 'enemies',\n                actualStatus: 'enemies' \n            } \n        };\n\n        const game = setupGame(-1, 0);\n        const playerA = game.galaxy.players[0];\n        const playerB = game.galaxy.players[1];\n\n        playerA.defeated = true;\n\n        let result = await service.increaseReputation(game, playerA, playerB, 1, false);\n\n        expect(declaredNeutral).toBeTrue();\n    });\n\n    it('should not declare neutral if above the enemy threshold and already neutral', async () => {\n        let declaredNeutral: boolean = false;\n\n        fakeDiplomacyService.isFormalAlliancesEnabled = () => true;\n        fakeDiplomacyService.declareNeutral = () => { declaredNeutral = true };\n        fakeDiplomacyService.getDiplomaticStatusToPlayer = () => { \n            return {\n                statusTo: 'neutral',\n                actualStatus: 'neutral' \n            } \n        };\n\n        const game = setupGame(0, 0);\n        const playerA = game.galaxy.players[0];\n        const playerB = game.galaxy.players[1];\n\n        playerA.defeated = true;\n\n        let result = await service.increaseReputation(game, playerA, playerB, 1, false);\n\n        expect(declaredNeutral).toBeFalse();\n    });\n\n    it('should declare neutral if below the allies threshold', async () => {\n        let declaredNeutral: boolean = false;\n\n        fakeDiplomacyService.isFormalAlliancesEnabled = () => true;\n        fakeDiplomacyService.declareNeutral = () => { declaredNeutral = true };\n        fakeDiplomacyService.getDiplomaticStatusToPlayer = () => { \n            return {\n                statusTo: 'allies',\n                actualStatus: 'allies' \n            } \n        };\n\n        const game = setupGame(5, 0);\n        const playerA = game.galaxy.players[0];\n        const playerB = game.galaxy.players[1];\n\n        playerA.defeated = true;\n\n        let result = await service.decreaseReputation(game, playerA, playerB, false);\n\n        expect(declaredNeutral).toBeTrue();\n    });\n\n    it('should not declare neutral if below the allies threshold and already neutral', async () => {\n        let declaredNeutral: boolean = false;\n\n        fakeDiplomacyService.isFormalAlliancesEnabled = () => true;\n        fakeDiplomacyService.declareNeutral = () => { declaredNeutral = true };\n        fakeDiplomacyService.getDiplomaticStatusToPlayer = () => { \n            return {\n                statusTo: 'neutral',\n                actualStatus: 'neutral' \n            } \n        };\n\n        const game = setupGame(4, 0);\n        const playerA = game.galaxy.players[0];\n        const playerB = game.galaxy.players[1];\n\n        playerA.defeated = true;\n\n        let result = await service.decreaseReputation(game, playerA, playerB, false);\n\n        expect(declaredNeutral).toBeFalse();\n    });\n\n});\n"],
  "mappings": "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",
  "names": ["ReputationService"]
}
