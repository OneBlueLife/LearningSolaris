{
  "version": 3,
  "sources": ["../../../server/spec/diplomacy.spec.ts"],
  "sourcesContent": ["import DiplomacyService from '../services/diplomacy';\nimport { DiplomaticState } from '../services/types/Diplomacy';\n\ndescribe('diplomacy', () => {\n\n    const fakeGameRepo: any = {};\n    const fakeEventRepo: any = {};\n    const fakeDiplomacyUpkeepService: any = {};\n\n    let service: DiplomacyService;\n\n    beforeEach(() => {\n        service = new DiplomacyService(fakeGameRepo, fakeEventRepo, fakeDiplomacyUpkeepService);\n    });\n\n    // ------------------------\n    // Formal alliances enabled\n\n    it('should return true if formal alliances is enabled', () => {\n        const game: any = {\n            settings: {\n                diplomacy: {\n                    enabled: 'enabled'\n                }\n            }\n        };\n\n        let result = service.isFormalAlliancesEnabled(game);\n\n        expect(result).toBeTrue();\n    });\n\n    it('should return false if formal alliances is disabled', () => {\n        const game: any = {\n            settings: {\n                diplomacy: {\n                    enabled: 'disabled'\n                }\n            }\n        };\n\n        let result = service.isFormalAlliancesEnabled(game);\n\n        expect(result).toBeFalse();\n    });\n\n    // ------------------------\n    // Trade restricted enabled\n\n    it('should return true if trade restricted is enabled', () => {\n        const game: any = {\n            settings: {\n                diplomacy: {\n                    tradeRestricted: 'enabled'\n                }\n            }\n        };\n\n        let result = service.isTradeRestricted(game);\n\n        expect(result).toBeTrue();\n    });\n\n    it('should return false if trade restricted is disabled', () => {\n        const game: any = {\n            settings: {\n                diplomacy: {\n                    tradeRestricted: 'disabled'\n                }\n            }\n        };\n\n        let result = service.isTradeRestricted(game);\n\n        expect(result).toBeFalse();\n    });\n\n    // ------------------------\n    // Max alliances enabled\n\n    it('should return true if max alliances is enabled', () => {\n        const game: any = {\n            settings: {\n                general: {\n                    playerLimit: 8\n                },\n                diplomacy: {\n                    maxAlliances: 6\n                }\n            }\n        };\n\n        let result = service.isMaxAlliancesEnabled(game);\n\n        expect(result).toBeTrue();\n    });\n\n    it('should return false if max alliances is disabled', () => {\n        const game: any = {\n            settings: {\n                general: {\n                    playerLimit: 8\n                },\n                diplomacy: {\n                    maxAlliances: 7\n                }\n            }\n        };\n\n        let result = service.isMaxAlliancesEnabled(game);\n\n        expect(result).toBeFalse();\n    });\n\n    // ------------------------\n    // Gloal events enabled\n\n    it('should return true if global events is enabled', () => {\n        const game: any = {\n            settings: {\n                diplomacy: {\n                    globalEvents: 'enabled'\n                }\n            }\n        };\n\n        let result = service.isGlobalEventsEnabled(game);\n\n        expect(result).toBeTrue();\n    });\n\n    it('should return false if global events is disabled', () => {\n        const game: any = {\n            settings: {\n                diplomacy: {\n                    globalEvents: 'disabled'\n                }\n            }\n        };\n\n        let result = service.isGlobalEventsEnabled(game);\n\n        expect(result).toBeFalse();\n    });\n\n    // ------------------------\n    // Get diplomatic status to player\n\n    const _playerIdA: any = 1;\n    const _playerAliasA: string = 'Player 1';\n\n    const _playerIdB: any = 2;\n    const _playerAliasB: string = 'Player 2';\n\n    const setupPlayerDiplomacyGame = (playerAStatusToB: DiplomaticState, playerBStatusToA: DiplomaticState) => {\n        const game: any = {\n            galaxy: {\n                players: [\n                    {\n                        _id: _playerIdA,\n                        alias: _playerAliasA,\n                        diplomacy: [\n                            {\n                                playerId: _playerIdB,\n                                status: playerAStatusToB\n                            }\n                        ]\n                    },\n                    {\n                        _id: _playerIdB,\n                        alias: _playerAliasB,\n                        diplomacy: [\n                            {\n                                playerId: _playerIdA,\n                                status: playerBStatusToA\n                            }\n                        ]\n                    }\n                ]\n            }\n        };\n\n        return game;\n    };\n\n    const assertGetDiplomaticStatusToPlayer = (playerAStatusToB: DiplomaticState, playerBStatusToA: DiplomaticState, expectedStatus: DiplomaticState) => {\n        const game = setupPlayerDiplomacyGame(playerAStatusToB, playerBStatusToA);\n\n        let result = service.getDiplomaticStatusToPlayer(game, _playerIdA, _playerIdB);\n\n        expect(result.playerIdFrom).toBe(_playerIdA);\n        expect(result.playerIdTo).toBe(_playerIdB);\n        expect(result.playerFromAlias).toBe(_playerAliasA);\n        expect(result.playerToAlias).toBe(_playerAliasB);\n        expect(result.statusFrom).toBe(playerBStatusToA);\n        expect(result.statusTo).toBe(playerAStatusToB);\n        expect(result.actualStatus).toBe(expectedStatus);\n    };\n\n    it('should return allies if players are allied', () => {\n        assertGetDiplomaticStatusToPlayer('allies', 'allies', 'allies');\n    });\n\n    it('should return neutral if at least one or both players are neutral', () => {\n        assertGetDiplomaticStatusToPlayer('allies', 'neutral', 'neutral');\n        assertGetDiplomaticStatusToPlayer('neutral', 'allies', 'neutral');\n        assertGetDiplomaticStatusToPlayer('neutral', 'neutral', 'neutral');\n    });\n\n    it('should return enemies if at least one player is enemies', () => {\n        assertGetDiplomaticStatusToPlayer('allies', 'enemies', 'enemies');\n        assertGetDiplomaticStatusToPlayer('neutral', 'enemies', 'enemies');\n        assertGetDiplomaticStatusToPlayer('enemies', 'allies', 'enemies');\n        assertGetDiplomaticStatusToPlayer('enemies', 'neutral', 'enemies');\n        assertGetDiplomaticStatusToPlayer('enemies', 'enemies', 'enemies');\n    });\n\n    // ------------------------\n    // Get diplomatic status between players\n\n    const assertGetDiplomaticStatusBetweenPlayers = (playerAStatusToB: DiplomaticState, playerBStatusToA: DiplomaticState, expectedStatus: DiplomaticState) => {\n        const game = setupPlayerDiplomacyGame(playerAStatusToB, playerBStatusToA);\n\n        let result = service.getDiplomaticStatusBetweenPlayers(game, [_playerIdA, _playerIdB]);\n\n        expect(result).toBe(expectedStatus);\n    };\n\n    it('should return allies if all players are allied', () => {\n        assertGetDiplomaticStatusBetweenPlayers('allies', 'allies', 'allies');\n    });\n\n    it('should return neutral if all players are neutral', () => {\n        assertGetDiplomaticStatusBetweenPlayers('allies', 'neutral', 'neutral');\n        assertGetDiplomaticStatusBetweenPlayers('neutral', 'allies', 'neutral');\n        assertGetDiplomaticStatusBetweenPlayers('neutral', 'neutral', 'neutral');\n    });\n\n    it('should return enemies if at least one player is enemies', () => {\n        assertGetDiplomaticStatusBetweenPlayers('allies', 'enemies', 'enemies');\n        assertGetDiplomaticStatusBetweenPlayers('neutral', 'enemies', 'enemies');\n        assertGetDiplomaticStatusBetweenPlayers('enemies', 'allies', 'enemies');\n        assertGetDiplomaticStatusBetweenPlayers('enemies', 'neutral', 'enemies');\n        assertGetDiplomaticStatusBetweenPlayers('enemies', 'enemies', 'enemies');\n    });\n\n});\n"],
  "mappings": "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",
  "names": ["DiplomacyService"]
}
