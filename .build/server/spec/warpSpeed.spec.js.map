{
  "version": 3,
  "sources": ["../../../server/spec/warpSpeed.spec.ts"],
  "sourcesContent": ["import CarrierMovementService from '../services/carrierMovement';\nimport StarService from '../services/star';\nconst mongoose = require('mongoose');\n\nlet playerId,\n    carrierId,\n    sourceStarId,\n    destinationStarId;\n\nlet game,\n    player,\n    carrier,\n    sourceStar,\n    destinationStar,\n    starSpecialist,\n    carrierSpecialist,\n    isFormalAlliancesEnabled,\n    isDiplomaticStatusToPlayersAllied;\n\nlet gameRepo, \n    distanceService, \n    specialistService,\n    diplomacyService,\n    starService,\n    carrierGiftService;\n\nspecialistService = {\n    getByIdStar() {\n        return starSpecialist;\n    },\n    getByIdCarrier() {\n        return carrierSpecialist;\n    }\n}\n\ndiplomacyService = {\n    isFormalAlliancesEnabled() {\n        return isFormalAlliancesEnabled;\n    },\n    isDiplomaticStatusToPlayersAllied() {\n        return isDiplomaticStatusToPlayersAllied;\n    }\n}\n\ndescribe('warp speed', () => {\n\n    // @ts-ignore\n    const service = new CarrierMovementService(gameRepo, distanceService, starService, specialistService, diplomacyService, carrierGiftService);\n\n    beforeEach(() => {\n        // Default values:\n        playerId = new mongoose.Types.ObjectId();\n        carrierId = new mongoose.Types.ObjectId();\n        sourceStarId = new mongoose.Types.ObjectId();\n        destinationStarId = new mongoose.Types.ObjectId();\n\n        isFormalAlliancesEnabled = false;\n        isDiplomaticStatusToPlayersAllied = false;\n\n        game = { };\n\n        player = {\n            _id: playerId\n        };\n\n        carrier = {\n            _id: carrierId,\n            specialistId: null,\n            ownedByPlayerId: playerId\n        };\n\n        sourceStar = {\n            _id: sourceStarId,\n            ownedByPlayerId: playerId,\n            warpGate: true,\n            specialistId: null\n        };\n\n        destinationStar = {\n            _id: destinationStarId,\n            ownedByPlayerId: playerId,\n            warpGate: true,\n            specialistId: null\n        };\n\n        starSpecialist = null;\n    });\n\n    it('should not travel at warp speed if source or destination are not warp gates - source star', async () => {\n        sourceStar.warpGate = false;\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeFalsy();\n    });\n\n    it('should not travel at warp speed if source or destination are not warp gates - destination star', async () => {\n        destinationStar.warpGate = false;\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeFalsy();\n    });\n\n    it('should not travel at warp speed if source or destination are not warp gates - both stars', async () => {\n        sourceStar.warpGate = false;\n        destinationStar.warpGate = false;\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeFalsy();\n    });\n\n    it('should not travel at warp speed if source or destination are not owned by a player - source star', async () => {\n        sourceStar.ownedByPlayerId = null;\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeFalsy();\n    });\n\n    it('should not travel at warp speed if source or destination are not owned by a player - destination star', async () => {\n        destinationStar.ownedByPlayerId = null;\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeFalsy();\n    });\n\n    it('should not travel at warp speed if source or destination are not owned by a player - both stars', async () => {\n        sourceStar.ownedByPlayerId = null;\n        destinationStar.ownedByPlayerId = null;\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeFalsy();\n    });\n\n    it('should travel at warp speed if source and destination are owned by the same player', async () => {\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeTruthy();\n    });\n\n    it('should travel at warp speed if source and destination are not owned by the same player - source star', async () => {\n        sourceStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeTruthy();\n    });\n\n    it('should travel at warp speed if source and destination are not owned by the same player - destination star', async () => {\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeTruthy();\n    });\n\n    it('should not travel at warp speed if source and destination are not owned by the same player and source is warp scrambler', async () => {\n        sourceStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        sourceStar.specialistId = 1;\n        starSpecialist = {\n            modifiers: {\n                special: {\n                    lockWarpGates: true\n                }\n            }\n        };\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeFalsy();\n    });\n\n    it('should not travel at warp speed if source and destination are not owned by the same player and destination is warp scrambler', async () => {\n        sourceStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        destinationStar.specialistId = 1;\n        starSpecialist = {\n            modifiers: {\n                special: {\n                    lockWarpGates: true\n                }\n            }\n        };\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeFalsy();\n    });\n\n    it('should not travel at warp speed if source is owned by the player and destination is not owned by the same player and destination is warp scrambler', async () => {\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        destinationStar.specialistId = 1;\n        starSpecialist = {\n            modifiers: {\n                special: {\n                    lockWarpGates: true\n                }\n            }\n        };\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeFalsy();\n    });\n\n    it('should travel at warp speed if source and destination are not owned by the same player and source is not a warp scrambler', async () => {\n        sourceStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        sourceStar.specialistId = 1;\n        starSpecialist = {\n            modifiers: {\n                special: {\n                    lockWarpGates: false\n                }\n            }\n        };\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeTruthy();\n    });\n\n    it('should travel at warp speed if source and destination are not owned by the same player and destination is not a warp scrambler', async () => {\n        sourceStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        destinationStar.specialistId = 1;\n        starSpecialist = {\n            modifiers: {\n                special: {\n                    lockWarpGates: false\n                }\n            }\n        };\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeTruthy();\n    });\n\n    it('should travel at warp speed if source and destination are not owned by the same player carrier unlocks warp gates', async () => {\n        sourceStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        carrier.specialistId = 1;\n        carrierSpecialist = {\n            modifiers: {\n                special: {\n                    unlockWarpGates: true\n                }\n            }\n        };\n        \n        destinationStar.specialistId = 1;\n        sourceStar.specialistId = 1;\n        starSpecialist = {\n            modifiers: {\n                special: {\n                    lockWarpGates: true\n                }\n            }\n        };\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeTruthy();\n    });\n\n    it('should not travel at warp speed if source and destination are not owned by the same player carrier does not unlock warp gates', async () => {\n        sourceStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        carrier.specialistId = 1;\n        carrierSpecialist = {\n            modifiers: {\n                special: {\n                    unlockWarpGates: false\n                }\n            }\n        };\n        \n        destinationStar.specialistId = 1;\n        sourceStar.specialistId = 1;\n        starSpecialist = {\n            modifiers: {\n                special: {\n                    lockWarpGates: true\n                }\n            }\n        };\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeFalsy();\n    });\n\n    it('should travel at warp speed if source and destination allied', async () => {\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        isFormalAlliancesEnabled = true;\n        isDiplomaticStatusToPlayersAllied = true;\n\n        sourceStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeTruthy();\n    });\n\n    it('should travel at warp speed if source and destination enemies', async () => {\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        isFormalAlliancesEnabled = true;\n        isDiplomaticStatusToPlayersAllied = false;\n        \n        sourceStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeTruthy();\n    });\n\n    it('should travel at warp speed if source and destination allied and warp scrambled', async () => {\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        isFormalAlliancesEnabled = true;\n        isDiplomaticStatusToPlayersAllied = true;\n\n        sourceStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        destinationStar.specialistId = 1;\n        sourceStar.specialistId = 1;\n        starSpecialist = {\n            modifiers: {\n                special: {\n                    lockWarpGates: true\n                }\n            }\n        };\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeTruthy();\n    });\n\n    it('should not travel at warp speed if source and destination enemies and warp scrambled', async () => {\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        isFormalAlliancesEnabled = true;\n        isDiplomaticStatusToPlayersAllied = false;\n\n        sourceStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        destinationStar.specialistId = 1;\n        sourceStar.specialistId = 1;\n        starSpecialist = {\n            modifiers: {\n                special: {\n                    lockWarpGates: true\n                }\n            }\n        };\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeFalsy();\n    });\n\n    it('should travel at warp speed if source and destination enemies and warp scrambled but carrier unlocks warp gates', async () => {\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        isFormalAlliancesEnabled = true;\n        isDiplomaticStatusToPlayersAllied = false;\n\n        sourceStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n        destinationStar.ownedByPlayerId = new mongoose.Types.ObjectId();\n\n        carrier.specialistId = 1;\n        carrierSpecialist = {\n            modifiers: {\n                special: {\n                    unlockWarpGates: true\n                }\n            }\n        };\n\n        destinationStar.specialistId = 1;\n        sourceStar.specialistId = 1;\n        starSpecialist = {\n            modifiers: {\n                special: {\n                    lockWarpGates: true\n                }\n            }\n        };\n\n        const warpSpeed = service.canTravelAtWarpSpeed(game, player, carrier, sourceStar, destinationStar);\n        \n        expect(warpSpeed).toBeTruthy();\n    });\n\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,6BAAmC;AAEnC,MAAM,WAAW,QAAQ,UAAU;AAEnC,IAAI,UACA,WACA,cACA;AAEJ,IAAI,MACA,QACA,SACA,YACA,iBACA,gBACA,mBACA,0BACA;AAEJ,IAAI,UACA,iBACA,mBACA,kBACA,aACA;AAEJ,oBAAoB;AAAA,EAChB,cAAc;AACV,WAAO;AAAA,EACX;AAAA,EACA,iBAAiB;AACb,WAAO;AAAA,EACX;AACJ;AAEA,mBAAmB;AAAA,EACf,2BAA2B;AACvB,WAAO;AAAA,EACX;AAAA,EACA,oCAAoC;AAChC,WAAO;AAAA,EACX;AACJ;AAEA,SAAS,cAAc,MAAM;AAGzB,QAAM,UAAU,IAAI,uBAAAA,QAAuB,UAAU,iBAAiB,aAAa,mBAAmB,kBAAkB,kBAAkB;AAE1I,aAAW,MAAM;AAEb,eAAW,IAAI,SAAS,MAAM,SAAS;AACvC,gBAAY,IAAI,SAAS,MAAM,SAAS;AACxC,mBAAe,IAAI,SAAS,MAAM,SAAS;AAC3C,wBAAoB,IAAI,SAAS,MAAM,SAAS;AAEhD,+BAA2B;AAC3B,wCAAoC;AAEpC,WAAO,CAAE;AAET,aAAS;AAAA,MACL,KAAK;AAAA,IACT;AAEA,cAAU;AAAA,MACN,KAAK;AAAA,MACL,cAAc;AAAA,MACd,iBAAiB;AAAA,IACrB;AAEA,iBAAa;AAAA,MACT,KAAK;AAAA,MACL,iBAAiB;AAAA,MACjB,UAAU;AAAA,MACV,cAAc;AAAA,IAClB;AAEA,sBAAkB;AAAA,MACd,KAAK;AAAA,MACL,iBAAiB;AAAA,MACjB,UAAU;AAAA,MACV,cAAc;AAAA,IAClB;AAEA,qBAAiB;AAAA,EACrB,CAAC;AAED,KAAG,6FAA6F,YAAY;AACxG,eAAW,WAAW;AAEtB,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,UAAU;AAAA,EAChC,CAAC;AAED,KAAG,kGAAkG,YAAY;AAC7G,oBAAgB,WAAW;AAE3B,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,UAAU;AAAA,EAChC,CAAC;AAED,KAAG,4FAA4F,YAAY;AACvG,eAAW,WAAW;AACtB,oBAAgB,WAAW;AAE3B,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,UAAU;AAAA,EAChC,CAAC;AAED,KAAG,oGAAoG,YAAY;AAC/G,eAAW,kBAAkB;AAE7B,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,UAAU;AAAA,EAChC,CAAC;AAED,KAAG,yGAAyG,YAAY;AACpH,oBAAgB,kBAAkB;AAElC,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,UAAU;AAAA,EAChC,CAAC;AAED,KAAG,mGAAmG,YAAY;AAC9G,eAAW,kBAAkB;AAC7B,oBAAgB,kBAAkB;AAElC,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,UAAU;AAAA,EAChC,CAAC;AAED,KAAG,sFAAsF,YAAY;AACjG,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,WAAW;AAAA,EACjC,CAAC;AAED,KAAG,wGAAwG,YAAY;AACnH,eAAW,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAEzD,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,WAAW;AAAA,EACjC,CAAC;AAED,KAAG,6GAA6G,YAAY;AACxH,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,WAAW;AAAA,EACjC,CAAC;AAED,KAAG,2HAA2H,YAAY;AACtI,eAAW,kBAAkB,IAAI,SAAS,MAAM,SAAS;AACzD,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,eAAW,eAAe;AAC1B,qBAAiB;AAAA,MACb,WAAW;AAAA,QACP,SAAS;AAAA,UACL,eAAe;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,UAAU;AAAA,EAChC,CAAC;AAED,KAAG,gIAAgI,YAAY;AAC3I,eAAW,kBAAkB,IAAI,SAAS,MAAM,SAAS;AACzD,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,oBAAgB,eAAe;AAC/B,qBAAiB;AAAA,MACb,WAAW;AAAA,QACP,SAAS;AAAA,UACL,eAAe;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,UAAU;AAAA,EAChC,CAAC;AAED,KAAG,sJAAsJ,YAAY;AACjK,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,oBAAgB,eAAe;AAC/B,qBAAiB;AAAA,MACb,WAAW;AAAA,QACP,SAAS;AAAA,UACL,eAAe;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,UAAU;AAAA,EAChC,CAAC;AAED,KAAG,6HAA6H,YAAY;AACxI,eAAW,kBAAkB,IAAI,SAAS,MAAM,SAAS;AACzD,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,eAAW,eAAe;AAC1B,qBAAiB;AAAA,MACb,WAAW;AAAA,QACP,SAAS;AAAA,UACL,eAAe;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,WAAW;AAAA,EACjC,CAAC;AAED,KAAG,kIAAkI,YAAY;AAC7I,eAAW,kBAAkB,IAAI,SAAS,MAAM,SAAS;AACzD,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,oBAAgB,eAAe;AAC/B,qBAAiB;AAAA,MACb,WAAW;AAAA,QACP,SAAS;AAAA,UACL,eAAe;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,WAAW;AAAA,EACjC,CAAC;AAED,KAAG,qHAAqH,YAAY;AAChI,eAAW,kBAAkB,IAAI,SAAS,MAAM,SAAS;AACzD,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,YAAQ,eAAe;AACvB,wBAAoB;AAAA,MAChB,WAAW;AAAA,QACP,SAAS;AAAA,UACL,iBAAiB;AAAA,QACrB;AAAA,MACJ;AAAA,IACJ;AAEA,oBAAgB,eAAe;AAC/B,eAAW,eAAe;AAC1B,qBAAiB;AAAA,MACb,WAAW;AAAA,QACP,SAAS;AAAA,UACL,eAAe;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,WAAW;AAAA,EACjC,CAAC;AAED,KAAG,iIAAiI,YAAY;AAC5I,eAAW,kBAAkB,IAAI,SAAS,MAAM,SAAS;AACzD,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,YAAQ,eAAe;AACvB,wBAAoB;AAAA,MAChB,WAAW;AAAA,QACP,SAAS;AAAA,UACL,iBAAiB;AAAA,QACrB;AAAA,MACJ;AAAA,IACJ;AAEA,oBAAgB,eAAe;AAC/B,eAAW,eAAe;AAC1B,qBAAiB;AAAA,MACb,WAAW;AAAA,QACP,SAAS;AAAA,UACL,eAAe;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,UAAU;AAAA,EAChC,CAAC;AAED,KAAG,gEAAgE,YAAY;AAC3E,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,+BAA2B;AAC3B,wCAAoC;AAEpC,eAAW,kBAAkB,IAAI,SAAS,MAAM,SAAS;AACzD,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,WAAW;AAAA,EACjC,CAAC;AAED,KAAG,iEAAiE,YAAY;AAC5E,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,+BAA2B;AAC3B,wCAAoC;AAEpC,eAAW,kBAAkB,IAAI,SAAS,MAAM,SAAS;AACzD,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,WAAW;AAAA,EACjC,CAAC;AAED,KAAG,mFAAmF,YAAY;AAC9F,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,+BAA2B;AAC3B,wCAAoC;AAEpC,eAAW,kBAAkB,IAAI,SAAS,MAAM,SAAS;AACzD,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,oBAAgB,eAAe;AAC/B,eAAW,eAAe;AAC1B,qBAAiB;AAAA,MACb,WAAW;AAAA,QACP,SAAS;AAAA,UACL,eAAe;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,WAAW;AAAA,EACjC,CAAC;AAED,KAAG,wFAAwF,YAAY;AACnG,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,+BAA2B;AAC3B,wCAAoC;AAEpC,eAAW,kBAAkB,IAAI,SAAS,MAAM,SAAS;AACzD,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,oBAAgB,eAAe;AAC/B,eAAW,eAAe;AAC1B,qBAAiB;AAAA,MACb,WAAW;AAAA,QACP,SAAS;AAAA,UACL,eAAe;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,UAAU;AAAA,EAChC,CAAC;AAED,KAAG,mHAAmH,YAAY;AAC9H,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,+BAA2B;AAC3B,wCAAoC;AAEpC,eAAW,kBAAkB,IAAI,SAAS,MAAM,SAAS;AACzD,oBAAgB,kBAAkB,IAAI,SAAS,MAAM,SAAS;AAE9D,YAAQ,eAAe;AACvB,wBAAoB;AAAA,MAChB,WAAW;AAAA,QACP,SAAS;AAAA,UACL,iBAAiB;AAAA,QACrB;AAAA,MACJ;AAAA,IACJ;AAEA,oBAAgB,eAAe;AAC/B,eAAW,eAAe;AAC1B,qBAAiB;AAAA,MACb,WAAW;AAAA,QACP,SAAS;AAAA,UACL,eAAe;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,YAAY,QAAQ,qBAAqB,MAAM,QAAQ,SAAS,YAAY,eAAe;AAEjG,WAAO,SAAS,EAAE,WAAW;AAAA,EACjC,CAAC;AAEL,CAAC;",
  "names": ["CarrierMovementService"]
}
