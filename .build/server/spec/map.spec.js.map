{
  "version": 3,
  "sources": ["../../../server/spec/map.spec.ts"],
  "sourcesContent": ["import RandomService from '../services/random';\nimport MapService from '../services/map';\nimport CircularMapService from '../services/maps/circular';\n\nconst game = {\n    settings: {\n        galaxy: {\n            galaxyType: 'circular'\n        },\n        specialGalaxy: {\n            resourceDistribution: 'random'\n        }\n    },\n    constants: {\n        distances: {\n            maxDistanceBetweenStars: 300\n        },\n        star: {\n            resources: {\n                minNaturalResources: 10,\n                maxNaturalResources: 50\n            }\n        }\n    }\n}\n\nconst fakeStarService = {\n    generateUnownedStar(name: string, location) {\n        return {\n            name,\n            location\n        }\n    },\n    generateStarPosition(game, x: number, y: number) {\n        return {\n            x: 10,\n            y: 10\n        }\n    }\n};\n\nconst fakeStarDistanceService = {\n    isStarTooClose(game, star1, star2) {\n        return false;\n    },\n    isDuplicateStarPosition(location, stars) {\n        return false;\n    },\n    isStarLocationTooClose(game, location, stars) {\n        return false;\n    },\n    isLocationTooClose(game, location, locations) {\n        return false;\n    }\n};\n\nconst fakeDistanceService = {\n    getFurthestLocation() {\n        return 1;\n    },\n    getDistanceBetweenLocations() {\n        return 2;\n    }\n};\n\nconst fakeStarNameService = {\n    getRandomStarNames(count: number) {\n        let names: string[] = [];\n\n        for (let i = 0; i < count; i++) {\n            names.push(`Star ${i}`);\n        }\n        \n        return names;\n    }\n};\n\nconst fakeResourceService = {\n    distribute() { }\n};\n\nconst fakeGameTypeService = {\n    isKingOfTheHillMode() { return false; }\n};\n\ndescribe('map', () => {\n\n    const starCount = 10;\n    const playerCount = 2;\n    let randomService;\n    let mapService;\n    let starMapService;\n\n    beforeEach(() => {\n        // Use a real random service because it would not be easy to fake for these tests.\n        randomService = new RandomService();\n        // @ts-ignore\n        starMapService = new CircularMapService(randomService, fakeStarService, fakeStarDistanceService, fakeDistanceService, fakeResourceService, fakeGameTypeService);\n        // @ts-ignore\n        mapService = new MapService(randomService, fakeStarService, fakeStarDistanceService, fakeStarNameService, starMapService);\n    });\n\n    it('should generate a given number of stars', () => {\n        const stars = mapService.generateStars(game, starCount, playerCount).stars;\n        \n        expect(stars).toBeTruthy();\n        expect(stars.length).toEqual(starCount);\n    });\n\n    it('should generate stars with no duplicate names.', () => {\n        const stars = mapService.generateStars(game, starCount, playerCount);\n        \n        for(let i = 0; i < stars.length; i++) {\n            let star = stars[i];\n\n            let duplicates = stars.filter((s) => s.name === star.name);\n\n            // Should equal 1 because we are checking against the same star.\n            expect(duplicates.length).toEqual(1);\n        }\n    });\n\n    // it('close star check should return false if no stars are close', () => {\n    //     let star = {}; // Doesn't need to contain anything because of the fake.\n    //     let otherStars = [{}];\n\n    //     fakeStarDistanceService.isStarTooClose = () => false;\n\n    //     let result = starService.isStarTooCloseToOthers(star, otherStars);\n\n    //     expect(result).toBeFalsy();\n    // });\n\n    // it('close star check should return true if stars are close', () => {\n    //     let star = {}; // Doesn't need to contain anything because of the fake.\n    //     let otherStars = [{}];\n\n    //     fakeStarDistanceService.isStarTooClose = () => true;\n\n    //     let result = starMapService.isStarTooCloseToOthers(star, otherStars);\n\n    //     expect(result).toBeTruthy();\n    // });\n\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,oBAA0B;AAC1B,iBAAuB;AACvB,sBAA+B;AAE/B,MAAM,OAAO;AAAA,EACT,UAAU;AAAA,IACN,QAAQ;AAAA,MACJ,YAAY;AAAA,IAChB;AAAA,IACA,eAAe;AAAA,MACX,sBAAsB;AAAA,IAC1B;AAAA,EACJ;AAAA,EACA,WAAW;AAAA,IACP,WAAW;AAAA,MACP,yBAAyB;AAAA,IAC7B;AAAA,IACA,MAAM;AAAA,MACF,WAAW;AAAA,QACP,qBAAqB;AAAA,QACrB,qBAAqB;AAAA,MACzB;AAAA,IACJ;AAAA,EACJ;AACJ;AAEA,MAAM,kBAAkB;AAAA,EACpB,oBAAoB,MAAc,UAAU;AACxC,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,qBAAqBA,OAAM,GAAW,GAAW;AAC7C,WAAO;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACP;AAAA,EACJ;AACJ;AAEA,MAAM,0BAA0B;AAAA,EAC5B,eAAeA,OAAM,OAAO,OAAO;AAC/B,WAAO;AAAA,EACX;AAAA,EACA,wBAAwB,UAAU,OAAO;AACrC,WAAO;AAAA,EACX;AAAA,EACA,uBAAuBA,OAAM,UAAU,OAAO;AAC1C,WAAO;AAAA,EACX;AAAA,EACA,mBAAmBA,OAAM,UAAU,WAAW;AAC1C,WAAO;AAAA,EACX;AACJ;AAEA,MAAM,sBAAsB;AAAA,EACxB,sBAAsB;AAClB,WAAO;AAAA,EACX;AAAA,EACA,8BAA8B;AAC1B,WAAO;AAAA,EACX;AACJ;AAEA,MAAM,sBAAsB;AAAA,EACxB,mBAAmB,OAAe;AAC9B,QAAI,QAAkB,CAAC;AAEvB,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B,YAAM,KAAK,QAAQ,GAAG;AAAA,IAC1B;AAEA,WAAO;AAAA,EACX;AACJ;AAEA,MAAM,sBAAsB;AAAA,EACxB,aAAa;AAAA,EAAE;AACnB;AAEA,MAAM,sBAAsB;AAAA,EACxB,sBAAsB;AAAE,WAAO;AAAA,EAAO;AAC1C;AAEA,SAAS,OAAO,MAAM;AAElB,QAAM,YAAY;AAClB,QAAM,cAAc;AACpB,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,aAAW,MAAM;AAEb,oBAAgB,IAAI,cAAAC,QAAc;AAElC,qBAAiB,IAAI,gBAAAC,QAAmB,eAAe,iBAAiB,yBAAyB,qBAAqB,qBAAqB,mBAAmB;AAE9J,iBAAa,IAAI,WAAAC,QAAW,eAAe,iBAAiB,yBAAyB,qBAAqB,cAAc;AAAA,EAC5H,CAAC;AAED,KAAG,2CAA2C,MAAM;AAChD,UAAM,QAAQ,WAAW,cAAc,MAAM,WAAW,WAAW,EAAE;AAErE,WAAO,KAAK,EAAE,WAAW;AACzB,WAAO,MAAM,MAAM,EAAE,QAAQ,SAAS;AAAA,EAC1C,CAAC;AAED,KAAG,kDAAkD,MAAM;AACvD,UAAM,QAAQ,WAAW,cAAc,MAAM,WAAW,WAAW;AAEnE,aAAQ,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAClC,UAAI,OAAO,MAAM;AAEjB,UAAI,aAAa,MAAM,OAAO,CAAC,MAAM,EAAE,SAAS,KAAK,IAAI;AAGzD,aAAO,WAAW,MAAM,EAAE,QAAQ,CAAC;AAAA,IACvC;AAAA,EACJ,CAAC;AAwBL,CAAC;",
  "names": ["game", "RandomService", "CircularMapService", "MapService"]
}
