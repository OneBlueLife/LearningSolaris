{
  "version": 3,
  "sources": ["../../../server/spec/damage.spec.ts"],
  "sourcesContent": ["import CombatService from '../services/combat';\nconst mongoose = require('mongoose');\n\ndescribe('damage distribution', () => {\n\n    // @ts-ignore\n    const service = new CombatService();\n\n    it('should distribute damage evenly between star and carrier', async () => {\n        let star = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 5,\n            shipsActual: 5,\n            specialistId: null\n        };\n\n        let carrier = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 10,\n            specialistId: null\n        };\n\n        const combatResult = {\n            star,\n            carriers: [carrier]\n        };\n\n        const damageObjects = [\n            star,\n            carrier\n        ];\n\n        let shipsToKill = 10;\n\n        // @ts-ignore\n        let remaining = service._distributeDamage(combatResult, damageObjects, shipsToKill, true);\n        \n        expect(remaining).toBe(0);\n        expect(star.ships).toBe(0);\n        expect(star.shipsActual).toBe(0);\n        expect(carrier.ships).toBe(5);\n    });\n\n    it('should distribute damage evenly between star and multiple carriers', async () => {\n        let star = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 6,\n            shipsActual: 6,\n            specialistId: null\n        };\n\n        let carrierA = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 6,\n            specialistId: null\n        };\n\n        let carrierB = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 6,\n            specialistId: null\n        };\n\n        const combatResult = {\n            star,\n            carriers: [carrierA, carrierB]\n        };\n\n        const damageObjects = [\n            star,\n            carrierA,\n            carrierB\n        ];\n\n        let shipsToKill = 6;\n\n        // @ts-ignore\n        let remaining = service._distributeDamage(combatResult, damageObjects, shipsToKill, true);\n        \n        expect(remaining).toBe(0);\n        expect(star.ships).toBe(4);\n        expect(star.shipsActual).toBe(4);\n        expect(carrierA.ships).toBe(4);\n        expect(carrierB.ships).toBe(4);\n    });\n\n    it('should distribute damage evenly between multiple carriers - Destroy carriers', async () => {\n        let star = null;\n\n        let carrierA = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 1,\n            specialistId: null\n        };\n\n        let carrierB = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 10,\n            specialistId: null\n        };\n\n        const combatResult = {\n            star,\n            carriers: [carrierA, carrierB]\n        };\n\n        const damageObjects = [\n            carrierA,\n            carrierB\n        ];\n\n        let shipsToKill = 5;\n\n        // @ts-ignore\n        let remaining = service._distributeDamage(combatResult, damageObjects, shipsToKill, true);\n        \n        expect(remaining).toBe(0);\n        expect(carrierA.ships).toBe(0);\n        expect(carrierB.ships).toBe(6);\n    });\n\n    it('should distribute damage evenly between multiple carriers - Do not destroy carriers', async () => {\n        let star = null;\n\n        let carrierA = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 1,\n            specialistId: null\n        };\n\n        let carrierB = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 10,\n            specialistId: null\n        };\n\n        const combatResult = {\n            star,\n            carriers: [carrierA, carrierB]\n        };\n\n        const damageObjects = [\n            carrierA,\n            carrierB\n        ];\n\n        let shipsToKill = 5;\n\n        // @ts-ignore\n        let remaining = service._distributeDamage(combatResult, damageObjects, shipsToKill, false);\n        \n        expect(remaining).toBe(0);\n        expect(carrierA.ships).toBe(1);\n        expect(carrierB.ships).toBe(5);\n    });\n\n    it('should ignore fleets with 0 ships - star', async () => {\n        let star = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 0,\n            shipsActual: 0,\n            specialistId: null\n        };\n\n        let carrierA = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 10,\n            specialistId: null\n        };\n\n        let carrierB = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 10,\n            specialistId: null\n        };\n\n        const combatResult = {\n            star,\n            carriers: [carrierA, carrierB]\n        };\n\n        const damageObjects = [\n            star,\n            carrierA,\n            carrierB\n        ];\n\n        let shipsToKill = 20;\n\n        // @ts-ignore\n        let remaining = service._distributeDamage(combatResult, damageObjects, shipsToKill, true);\n        \n        expect(remaining).toBe(0);\n        expect(star.ships).toBe(0);\n        expect(star.shipsActual).toBe(0);\n        expect(carrierA.ships).toBe(0);\n        expect(carrierB.ships).toBe(0);\n    });\n\n    it('should ignore fleets with 0 ships - carrier', async () => {\n        let star = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 10,\n            shipsActual: 10,\n            specialistId: null\n        };\n\n        let carrierA = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 0,\n            specialistId: null\n        };\n\n        let carrierB = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 10,\n            specialistId: null\n        };\n\n        const combatResult = {\n            star,\n            carriers: [carrierA, carrierB]\n        };\n\n        const damageObjects = [\n            star,\n            carrierA,\n            carrierB\n        ];\n\n        let shipsToKill = 20;\n\n        // @ts-ignore\n        let remaining = service._distributeDamage(combatResult, damageObjects, shipsToKill, true);\n        \n        expect(remaining).toBe(0);\n        expect(star.ships).toBe(0);\n        expect(star.shipsActual).toBe(0);\n        expect(carrierA.ships).toBe(0);\n        expect(carrierB.ships).toBe(0);\n    });\n\n    it('should distribute damage evenly between star and carrier but keep carriers alive', async () => {\n        let star = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 5,\n            shipsActual: 5,\n            specialistId: null\n        };\n\n        let carrier = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 10,\n            specialistId: null\n        };\n\n        const combatResult = {\n            star,\n            carriers: [carrier]\n        };\n\n        const damageObjects = [\n            star,\n            carrier\n        ];\n\n        let shipsToKill = 15;\n\n        // @ts-ignore\n        let remaining = service._distributeDamage(combatResult, damageObjects, shipsToKill, false);\n        \n        expect(remaining).toBe(1);\n        expect(star.ships).toBe(0);\n        expect(star.shipsActual).toBe(0);\n        expect(carrier.ships).toBe(1);\n    });\n\n    it('should distribute damage to largest fleets first - star', async () => {\n        let star = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 100,\n            shipsActual: 100,\n            specialistId: null\n        };\n\n        let carrierA = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 10,\n            specialistId: null\n        };\n\n        let carrierB = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 5,\n            specialistId: null\n        };\n\n        const combatResult = {\n            star,\n            carriers: [carrierA, carrierB]\n        };\n\n        const damageObjects = [\n            star,\n            carrierA,\n            carrierB\n        ];\n\n        let shipsToKill = 114;\n\n        // @ts-ignore\n        let remaining = service._distributeDamage(combatResult, damageObjects, shipsToKill, true);\n        \n        expect(remaining).toBe(0);\n        expect(star.ships).toBe(1);\n        expect(star.shipsActual).toBe(1);\n        expect(carrierA.ships).toBe(0);\n        expect(carrierB.ships).toBe(0);\n    });\n\n    it('should distribute damage to largest fleets first - carrier', async () => {\n        let star = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 10,\n            shipsActual: 10,\n            specialistId: null\n        };\n\n        let carrierA = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 100,\n            specialistId: null\n        };\n\n        let carrierB = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 5,\n            specialistId: null\n        };\n\n        const combatResult = {\n            star,\n            carriers: [carrierA, carrierB]\n        };\n\n        const damageObjects = [\n            star,\n            carrierA,\n            carrierB\n        ];\n\n        let shipsToKill = 114;\n\n        // @ts-ignore\n        let remaining = service._distributeDamage(combatResult, damageObjects, shipsToKill, true);\n        \n        expect(remaining).toBe(0);\n        expect(star.ships).toBe(0);\n        expect(star.shipsActual).toBe(0);\n        expect(carrierA.ships).toBe(1);\n        expect(carrierB.ships).toBe(0);\n    });\n\n    it('should distribute damage to non-specialists first - star specialist', async () => {\n        let star = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 1,\n            shipsActual: 1,\n            specialistId: 1\n        };\n\n        let carrierA = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 1,\n            specialistId: null\n        };\n\n        let carrierB = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 1,\n            specialistId: null\n        };\n\n        const combatResult = {\n            star,\n            carriers: [carrierA, carrierB]\n        };\n\n        const damageObjects = [\n            star,\n            carrierA,\n            carrierB\n        ];\n\n        let shipsToKill = 2;\n\n        // @ts-ignore\n        let remaining = service._distributeDamage(combatResult, damageObjects, shipsToKill, true);\n        \n        expect(remaining).toBe(0);\n        expect(star.ships).toBe(1);\n        expect(star.shipsActual).toBe(1);\n        expect(carrierA.ships).toBe(0);\n        expect(carrierB.ships).toBe(0);\n    });\n\n    it('should distribute damage to non-specialists first - star specialist', async () => {\n        let star = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 1,\n            shipsActual: 1,\n            specialistId: null\n        };\n\n        let carrierA = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 1,\n            specialistId: 1\n        };\n\n        let carrierB = {\n            _id: new mongoose.Types.ObjectId(),\n            ships: 1,\n            specialistId: null\n        };\n\n        const combatResult = {\n            star,\n            carriers: [carrierA, carrierB]\n        };\n\n        const damageObjects = [\n            star,\n            carrierA,\n            carrierB\n        ];\n\n        let shipsToKill = 2;\n\n        // @ts-ignore\n        let remaining = service._distributeDamage(combatResult, damageObjects, shipsToKill, true);\n        \n        expect(remaining).toBe(0);\n        expect(star.ships).toBe(0);\n        expect(star.shipsActual).toBe(0);\n        expect(carrierA.ships).toBe(1);\n        expect(carrierB.ships).toBe(0);\n    });\n\n});\n"],
  "mappings": "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",
  "names": ["CombatService"]
}
