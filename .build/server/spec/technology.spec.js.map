{
  "version": 3,
  "sources": ["../../../server/spec/technology.spec.ts"],
  "sourcesContent": ["import TechnologyService from '../services/technology';\nconst mongoose = require('mongoose');\n\nlet service,\n    specialistService;\n\nconst playerId = new mongoose.Types.ObjectId();\n\nfunction setup(starSpecialist?, carrierSpecialist?) {\n    specialistService = {\n        getByIdStar: () => { return starSpecialist || null; },\n        getByIdCarrier: () => { return carrierSpecialist || null; }\n    };\n\n    service = new TechnologyService(specialistService);\n}\n\ndescribe('technology', () => {\n\n    beforeEach(() => {\n        service = null;\n    });\n\n    it('should get enabled technologies', () => {\n        const game = {\n            settings: {\n                technology: {\n                    startingTechnologyLevel: {\n                        scanning: 1,\n                        hyperspace: 0,\n                        weapons: 1000\n                    },\n                    researchCosts: {\n                        scanning: 'standard',\n                        hyperspace: 'standard',\n                        weapons: 'expensive'\n                    }\n                }\n            }\n        };\n\n        setup();\n\n        const enabledTechs = service.getEnabledTechnologies(game);\n\n        expect(enabledTechs.length).toBe(2);\n        expect(enabledTechs).toContain('scanning');\n        expect(enabledTechs).toContain('weapons');\n    });\n\n    it('should return true for researchable technology', () => {\n        const game = {\n            settings: {\n                technology: {\n                    researchCosts: {\n                        scanning: 'standard'\n                    }\n                }\n            }\n        };\n\n        setup();\n\n        const researchable = service.isTechnologyResearchable(game, 'scanning');\n\n        expect(researchable).toBeTruthy();\n    });\n\n    it('should return false for not researchable technology', () => {\n        const game = {\n            settings: {\n                technology: {\n                    researchCosts: {\n                        scanning: 'none'\n                    }\n                }\n            }\n        };\n\n        setup();\n\n        const researchable = service.isTechnologyResearchable(game, 'scanning');\n\n        expect(researchable).toBeFalsy();\n    });\n\n    it('should return true for enabled technology', () => {\n        const game = {\n            settings: {\n                technology: {\n                    startingTechnologyLevel: {\n                        scanning: 1\n                    }\n                }\n            }\n        };\n\n        setup();\n\n        const isEnabled = service.isTechnologyEnabled(game, 'scanning');\n\n        expect(isEnabled).toBeTruthy();\n    });\n\n    it('should return false for disabled technology', () => {\n        const game = {\n            settings: {\n                technology: {\n                    startingTechnologyLevel: {\n                        scanning: 0\n                    }\n                }\n            }\n        };\n\n        setup();\n\n        const isEnabled = service.isTechnologyEnabled(game, 'scanning');\n\n        expect(isEnabled).toBeFalsy();\n    });\n\n    /* WEAPON TECH CALCULATIONS */\n\n    it('should get defender bonus if enabled', () => {\n        const game = {\n            settings: {\n                specialGalaxy: {\n                    defenderBonus: 'enabled'\n                }\n            }\n        };\n\n        const star = {\n            isAsteroidField: false\n        };\n\n        setup();\n\n        const bonus = service.getDefenderBonus(game, star);\n\n        expect(bonus).toBe(1);\n    });\n\n    it('should get 0 defender bonus if disabled', () => {\n        const game = {\n            settings: {\n                specialGalaxy: {\n                    defenderBonus: 'disabled'\n                }\n            }\n        };\n\n        const star = {\n            isAsteroidField: false\n        };\n\n        setup();\n\n        const bonus = service.getDefenderBonus(game, star);\n\n        expect(bonus).toBe(0);\n    });\n\n    it('should get +1 defender bonus if star is asteroid field', () => {\n        const game = {\n            settings: {\n                specialGalaxy: {\n                    defenderBonus: 'enabled'\n                }\n            }\n        };\n\n        const star = {\n            isAsteroidField: true\n        };\n\n        setup();\n\n        const bonus = service.getDefenderBonus(game, star);\n\n        expect(bonus).toBe(2);\n    });\n\n    it('should get 1 defender bonus for asteroid field if disabled', () => {\n        const game = {\n            settings: {\n                specialGalaxy: {\n                    defenderBonus: 'disabled'\n                }\n            }\n        };\n\n        const star = {\n            isAsteroidField: true\n        };\n\n        setup();\n\n        const bonus = service.getDefenderBonus(game, star);\n\n        expect(bonus).toBe(1);\n    });\n\n    it('should get 2 defender bonus for defender bonus specialist and defender bonus is enabled', () => {\n        const game = {\n            settings: {\n                specialGalaxy: {\n                    defenderBonus: 'enabled'\n                }\n            }\n        };\n\n        const star = {\n            specialistId: 1\n        };\n\n        const specialist = {\n            modifiers: {\n                special: {\n                    defenderBonus: 1\n                }\n            }\n        };\n\n        setup(specialist);\n\n        const bonus = service.getDefenderBonus(game, star);\n\n        expect(bonus).toBe(2);\n    });\n\n    it('should get 1 defender bonus for defender bonus specialist and defender bonus is disabled', () => {\n        const game = {\n            settings: {\n                specialGalaxy: {\n                    defenderBonus: 'disabled'\n                }\n            }\n        };\n\n        const star = {\n            specialistId: 1\n        };\n\n        const specialist = {\n            modifiers: {\n                special: {\n                    defenderBonus: 1\n                }\n            }\n        };\n\n        setup(specialist);\n\n        const bonus = service.getDefenderBonus(game, star);\n\n        expect(bonus).toBe(1);\n    });\n\n    /* EFFECTIVE WEAPON LEVELS */\n    /* STAR */\n\n    it('should calculate star effective weapons level - Star - No carriers - No specs - No defender bonus', () => {\n        const game = {\n            settings: {\n                specialGalaxy: {\n                    defenderBonus: 'disabled'\n                }\n            }\n        };\n\n        const players = [{\n            research: {\n                weapons: {\n                    level: 1\n                }\n            }\n        }];\n\n        const star = {\n            specialistId: null\n        };\n\n        const carriersInOrbit = [];\n\n        setup();\n\n        const weapons = service.getStarEffectiveWeaponsLevel(game, players, star, carriersInOrbit);\n\n        expect(weapons).toBe(1);\n    });\n\n    it('should calculate star effective weapons level - Star - No carriers - No specs - No defender bonus - Multiple defenders', () => {\n        const game = {\n            settings: {\n                specialGalaxy: {\n                    defenderBonus: 'disabled'\n                }\n            }\n        };\n\n        const players = [\n            {\n                research: {\n                    weapons: {\n                        level: 1\n                    }\n                }\n            },\n            {\n                research: {\n                    weapons: {\n                        level: 2\n                    }\n                }\n            }\n        ];\n\n        const star = {\n            specialistId: null\n        };\n\n        const carriersInOrbit = [];\n\n        setup();\n\n        const weapons = service.getStarEffectiveWeaponsLevel(game, players, star, carriersInOrbit);\n\n        expect(weapons).toBe(2);\n    });\n\n    it('should calculate star effective weapons level - Star - No carriers - No specs - Defender bonus', () => {\n        const game = {\n            settings: {\n                specialGalaxy: {\n                    defenderBonus: 'enabled'\n                }\n            }\n        };\n\n        const players = [{\n            research: {\n                weapons: {\n                    level: 1\n                }\n            }\n        }];\n\n        const star = {\n            specialistId: null\n        };\n\n        const carriersInOrbit = [];\n\n        setup();\n\n        const weapons = service.getStarEffectiveWeaponsLevel(game, players, star, carriersInOrbit);\n\n        expect(weapons).toBe(2);\n    });\n\n    it('should calculate star effective weapons level - Star - No carriers - Spec - No defender bonus', () => {\n        const game = {\n            settings: {\n                specialGalaxy: {\n                    defenderBonus: 'disabled'\n                }\n            }\n        };\n\n        const players = [{\n            research: {\n                weapons: {\n                    level: 1\n                }\n            }\n        }];\n\n        const star = {\n            specialistId: 1\n        };\n\n        const specialist = {\n            modifiers: {\n                local: {\n                    weapons: 1\n                }\n            }\n        };\n\n        const carriersInOrbit = [];\n\n        setup(specialist, null);\n\n        const weapons = service.getStarEffectiveWeaponsLevel(game, players, star, carriersInOrbit);\n\n        expect(weapons).toBe(2);\n    });\n\n    it('should calculate star effective weapons level - Star - Carriers - No spec - No defender bonus', () => {\n        const game = {\n            settings: {\n                specialGalaxy: {\n                    defenderBonus: 'disabled'\n                }\n            }\n        };\n\n        const players = [{\n            research: {\n                weapons: {\n                    level: 1\n                }\n            }\n        }];\n\n        const star = {\n            specialistId: null\n        };\n\n        const specialist = {\n            modifiers: {\n                local: {\n                    weapons: 1\n                }\n            }\n        };\n\n        const carriersInOrbit = [\n            {\n                specialistId: 1\n            }\n        ];\n\n        setup(null, specialist);\n\n        const weapons = service.getStarEffectiveWeaponsLevel(game, players, star, carriersInOrbit);\n\n        expect(weapons).toBe(2);\n    });\n\n    /* CARRIER */\n\n    it('should calculate a single carrier weapons buff - No specialist', () => {\n        const carrier = {\n            specialistId: null\n        };\n\n        const isCarrierToStarCombat = false;\n\n        setup();\n\n        const buff = service.getCarrierWeaponsBuff(carrier, isCarrierToStarCombat, true);\n\n        expect(buff).toBe(0);\n    });\n\n    it('should calculate a single carrier weapons buff - Specialist with local weapons', () => {\n        const carrier = {\n            specialistId: 1\n        };\n\n        const isCarrierToStarCombat = false;\n\n        const specialist = {\n            modifiers: {\n                local: {\n                    weapons: 1\n                }\n            }\n        };\n\n        setup(null, specialist);\n\n        const buff = service.getCarrierWeaponsBuff(carrier, isCarrierToStarCombat, true);\n\n        expect(buff).toBe(1);\n    });\n\n    it('should calculate a single carrier weapons buff - Specialist with carrier to star buff - Carrier to star combat', () => {\n        const carrier = {\n            specialistId: 1\n        };\n\n        const isCarrierToStarCombat = true;\n\n        const specialist = {\n            modifiers: {\n                local: {\n                    carrierToStarCombat: {\n                        attacker: {\n                            weapons: 5\n                        }\n                    }\n                }\n            }\n        };\n\n        setup(null, specialist);\n\n        const buff = service.getCarrierWeaponsBuff(carrier, isCarrierToStarCombat, true);\n\n        expect(buff).toBe(5);\n    });\n\n    it('should calculate a single carrier weapons buff - Specialist with carrier to star buff - Carrier to carrier combat', () => {\n        const carrier = {\n            specialistId: 1\n        };\n\n        const isCarrierToStarCombat = false;\n\n        const specialist = {\n            modifiers: {\n                local: {\n                    carrierToStarCombat: {\n                        attacker: {\n                            weapons: 5\n                        }\n                    }\n                }\n            }\n        };\n\n        setup(null, specialist);\n\n        const buff = service.getCarrierWeaponsBuff(carrier, isCarrierToStarCombat, true);\n\n        expect(buff).toBe(0);\n    });\n\n    it('should calculate a single carrier weapons buff - Specialist with carrier to carrier buff - Carrier to carrier combat', () => {\n        const carrier = {\n            specialistId: 1\n        };\n\n        const isCarrierToStarCombat = false;\n\n        const specialist = {\n            modifiers: {\n                local: {\n                    carrierToCarrierCombat: {\n                        weapons: 5\n                    }\n                }\n            }\n        };\n\n        setup(null, specialist);\n\n        const buff = service.getCarrierWeaponsBuff(carrier, isCarrierToStarCombat, true);\n\n        expect(buff).toBe(5);\n    });\n\n    it('should calculate a single carrier weapons buff - Specialist with carrier to carrier buff - Carrier to star combat', () => {\n        const carrier = {\n            specialistId: 1\n        };\n\n        const isCarrierToStarCombat = true;\n\n        const specialist = {\n            modifiers: {\n                local: {\n                    carrierToCarrierCombat: {\n                        weapons: 5\n                    }\n                }\n            }\n        };\n\n        setup(null, specialist);\n\n        const buff = service.getCarrierWeaponsBuff(carrier, isCarrierToStarCombat, true);\n\n        expect(buff).toBe(0);\n    });\n\n    /* CARRIER ARRAY */\n\n    it('should calculate carrier effective weapons level - Single player - Single carrier - Carrier to star combat', () => {\n        const game = { };\n\n        const players = [\n            {\n                research: {\n                    weapons: {\n                        level: 1\n                    }\n                }\n            }\n        ];\n\n        const carriers = [\n            {\n                specialistId: null\n            }\n        ];\n\n        const isCarrierToStarCombat = true;\n\n        setup();\n\n        const weapons = service.getCarriersEffectiveWeaponsLevel(game, players, carriers, isCarrierToStarCombat);\n\n        expect(weapons).toBe(1);\n    });\n\n    it('should calculate carrier effective weapons level - Multi player - Single carrier - Carrier to star combat', () => {\n        const game = { };\n\n        const players = [\n            {\n                research: {\n                    weapons: {\n                        level: 1\n                    }\n                }\n            },\n            {\n                research: {\n                    weapons: {\n                        level: 2\n                    }\n                }\n            }\n        ];\n\n        const carriers = [\n            {\n                specialistId: null\n            }\n        ];\n\n        const isCarrierToStarCombat = true;\n\n        setup();\n\n        const weapons = service.getCarriersEffectiveWeaponsLevel(game, players, carriers, isCarrierToStarCombat);\n\n        expect(weapons).toBe(2);\n    });\n\n    it('should calculate carrier effective weapons level - Single player - Multi carrier - Carrier to star combat', () => {\n        const game = { };\n\n        const players = [\n            {\n                research: {\n                    weapons: {\n                        level: 1\n                    }\n                }\n            }\n        ];\n\n        const carriers = [\n            {\n                specialistId: 1\n            }\n        ];\n\n        const isCarrierToStarCombat = true;\n\n        const specialist = {\n            modifiers: {\n                local: {\n                    weapons: 1\n                }\n            }\n        };\n\n        setup(null, specialist);\n\n        const weapons = service.getCarriersEffectiveWeaponsLevel(game, players, carriers, isCarrierToStarCombat);\n\n        expect(weapons).toBe(2);\n    });\n\n    it('should calculate carrier effective weapons level - Multi player - Single carrier - Carrier to star combat - Weapons per player', () => {\n        const game = { };\n\n        const players = [\n            {\n                research: {\n                    weapons: {\n                        level: 1\n                    }\n                }\n            },\n            {\n                research: {\n                    weapons: {\n                        level: 2\n                    }\n                }\n            }\n        ];\n\n        const carriers = [\n            {\n                specialistId: 1\n            }\n        ];\n\n        const isCarrierToStarCombat = true;\n\n        const specialist = {\n            modifiers: {\n                local: {\n                    carrierToStarCombat: {\n                        attacker: {\n                            weaponsPerAlly: 2\n                        }\n                    }\n                }\n            }\n        };\n\n        setup(null, specialist);\n\n        const weapons = service.getCarriersEffectiveWeaponsLevel(game, players, carriers, isCarrierToStarCombat, true);\n\n        expect(weapons).toBe(6);\n    });\n\n    /* CARRIER DEBUFFS */\n\n    it('should calculate carrier debuff - No carriers', () => {\n        const carriers = [];\n\n        setup();\n\n        const debuff = service.getCarriersWeaponsDebuff(carriers);\n\n        expect(debuff).toBe(0);\n    });\n\n    it('should calculate carrier debuff - Single carrier with deduction', () => {\n        const carriers = [\n            {\n                specialistId: 1\n            }\n        ];\n\n        const specialist = {\n            modifiers: {\n                special: {\n                    deductEnemyWeapons: 1\n                }\n            }\n        };\n\n        setup(null, specialist);\n\n        const debuff = service.getCarriersWeaponsDebuff(carriers);\n\n        expect(debuff).toBe(1);\n    });\n\n    it('should calculate carrier debuff - Single carrier without deduction', () => {\n        const carriers = [\n            {\n                specialistId: 1\n            }\n        ];\n\n        const specialist = {\n            modifiers: {\n                special: {\n                    test: 1\n                }\n            }\n        };\n\n        setup(null, specialist);\n\n        const debuff = service.getCarriersWeaponsDebuff(carriers);\n\n        expect(debuff).toBe(0);\n    });\n\n    /* STAR BUFF */\n\n    it('should calculate star weapons buff - No specialist', () => {\n        const star = {\n            specialistId: null\n        };\n\n        setup();\n\n        const buff = service.getStarWeaponsBuff(star);\n\n        expect(buff).toBe(0);\n    });\n\n    it('should calculate star weapons buff - Specialist with local weapons', () => {\n        const star = {\n            specialistId: 1\n        };\n\n        const specialist = {\n            modifiers: {\n                local: {\n                    weapons: 1\n                }\n            }\n        };\n\n        setup(specialist, null);\n\n        const buff = service.getStarWeaponsBuff(star);\n\n        expect(buff).toBe(1);\n    });\n\n    /* PLAYER */\n\n    it('should calculate player effective technology levels - Unknown research levels', () => {\n        const game = {};\n        const player = { };\n\n        setup();\n\n        const tech = service.getPlayerEffectiveTechnologyLevels(game, player);\n\n        expect(tech.scanning).toBe(1);\n        expect(tech.hyperspace).toBe(1);\n        expect(tech.terraforming).toBe(1);\n        expect(tech.experimentation).toBe(1);\n        expect(tech.weapons).toBe(1);\n        expect(tech.banking).toBe(1);\n        expect(tech.manufacturing).toBe(1);\n        expect(tech.specialists).toBe(1);\n    });\n\n    it('should calculate player effective technology levels', () => {\n        const game = {};\n        const player = { \n            research: {\n                scanning: { level: 1 },\n                hyperspace: { level: 2 },\n                terraforming: { level: 3 },\n                experimentation: { level: 4 },\n                weapons: { level: 5 },\n                banking: { level: 6 },\n                manufacturing: { level: 7 },\n                specialists: { level: 8 }\n            }\n        };\n\n        setup();\n\n        const tech = service.getPlayerEffectiveTechnologyLevels(game, player);\n\n        expect(tech.scanning).toBe(1);\n        expect(tech.hyperspace).toBe(2);\n        expect(tech.terraforming).toBe(3);\n        expect(tech.experimentation).toBe(4);\n        expect(tech.weapons).toBe(5);\n        expect(tech.banking).toBe(6);\n        expect(tech.manufacturing).toBe(7);\n        expect(tech.specialists).toBe(8);\n    });\n\n    /* STAR EFFECTIVE TECH LEVELS */\n\n    it('should calculate star effective technology levels - No specialist', () => {\n        const game = {\n            galaxy: {\n                players: [\n                    {\n                        _id: playerId\n                    }\n                ]\n            }\n        };\n\n        const star = {\n            ownedByPlayerId: playerId,\n            specialistId: null\n        };\n\n        setup();\n\n        const tech = service.getStarEffectiveTechnologyLevels(game, star);\n\n        expect(tech.scanning).toBe(1);\n        expect(tech.hyperspace).toBe(1);\n        expect(tech.terraforming).toBe(1);\n        expect(tech.experimentation).toBe(1);\n        expect(tech.weapons).toBe(1);\n        expect(tech.banking).toBe(1);\n        expect(tech.manufacturing).toBe(1);\n        expect(tech.specialists).toBe(1);\n    });\n\n    it('should calculate star effective technology levels - Black hole scanning range buff', () => {\n        const game = {\n            galaxy: {\n                players: [\n                    {\n                        _id: playerId\n                    }\n                ]\n            }\n        };\n\n        const star = {\n            ownedByPlayerId: playerId,\n            specialistId: null,\n            isBlackHole: true\n        };\n\n        setup();\n\n        const tech = service.getStarEffectiveTechnologyLevels(game, star);\n\n        expect(tech.scanning).toBe(4);\n    });\n\n    it('should calculate star effective technology levels - Specialist modifiers', () => {\n        const game = {\n            galaxy: {\n                players: [\n                    {\n                        _id: playerId\n                    }\n                ]\n            }\n        };\n\n        const star = {\n            ownedByPlayerId: playerId,\n            specialistId: 1,\n            isBlackHole: false\n        };\n\n        const specialist = {\n            modifiers: {\n                local: {\n                    scanning: 1,\n                    hyperspace: 2,\n                    terraforming: 3,\n                    experimentation: 4,\n                    weapons: 5,\n                    banking: 6,\n                    manufacturing: 7,\n                    specialists: 8\n                }\n            }\n        };\n\n        setup(specialist, null);\n\n        const tech = service.getStarEffectiveTechnologyLevels(game, star);\n\n        expect(tech.scanning).toBe(2);\n        expect(tech.hyperspace).toBe(3);\n        expect(tech.terraforming).toBe(4);\n        expect(tech.experimentation).toBe(5);\n        expect(tech.weapons).toBe(6);\n        expect(tech.banking).toBe(7);\n        expect(tech.manufacturing).toBe(8);\n        expect(tech.specialists).toBe(9);\n    });\n\n    /* CARRIER EFFECTIVE TECH LEVELS */\n\n    it('should calculate carrier effective technology levels', () => {\n        const game = {\n            galaxy: {\n                players: [\n                    {\n                        _id: playerId\n                    }\n                ]\n            }\n        };\n\n        const carrier = {\n            ownedByPlayerId: playerId,\n            specialistId: null\n        };\n\n        const specialist = {\n            modifiers: {\n                local: {\n                    scanning: 1,\n                    hyperspace: 2,\n                    terraforming: 3,\n                    experimentation: 4,\n                    weapons: 5,\n                    banking: 6,\n                    manufacturing: 7,\n                    specialists: 8\n                }\n            }\n        };\n\n        setup(null, specialist);\n\n        const tech = service.getCarrierEffectiveTechnologyLevels(game, carrier);\n\n        expect(tech.scanning).toBe(1);\n        expect(tech.hyperspace).toBe(1);\n        expect(tech.terraforming).toBe(1);\n        expect(tech.experimentation).toBe(1);\n        expect(tech.weapons).toBe(1);\n        expect(tech.banking).toBe(1);\n        expect(tech.manufacturing).toBe(1);\n        expect(tech.specialists).toBe(1);\n    });\n\n    it('should calculate carrier effective technology levels - Specialist modifiers', () => {\n        const game = {\n            galaxy: {\n                players: [\n                    {\n                        _id: playerId\n                    }\n                ]\n            }\n        };\n\n        const carrier = {\n            ownedByPlayerId: playerId,\n            specialistId: 1\n        };\n\n        const specialist = {\n            modifiers: {\n                local: {\n                    scanning: 1,\n                    hyperspace: 2,\n                    terraforming: 3,\n                    experimentation: 4,\n                    weapons: 5,\n                    banking: 6,\n                    manufacturing: 7,\n                    specialists: 8\n                }\n            }\n        };\n\n        setup(null, specialist);\n\n        const tech = service.getCarrierEffectiveTechnologyLevels(game, carrier);\n\n        expect(tech.scanning).toBe(2);\n        expect(tech.hyperspace).toBe(3);\n        expect(tech.terraforming).toBe(4);\n        expect(tech.experimentation).toBe(5);\n        expect(tech.weapons).toBe(6);\n        expect(tech.banking).toBe(7);\n        expect(tech.manufacturing).toBe(8);\n        expect(tech.specialists).toBe(9);\n    });\n\n})"],
  "mappings": "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",
  "names": ["TechnologyService"]
}
