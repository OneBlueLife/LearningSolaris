{
  "version": 3,
  "sources": ["../../../server/spec/combat.spec.ts"],
  "sourcesContent": ["import CombatService from '../services/combat';\n\nconst fakeTechnologyService = {\n    getStarEffectiveWeaponsLevel(game, defenders, star, defenderCarriers) {\n        return 1;\n    },\n    getCarriersEffectiveWeaponsLevel(game, attackers, attackerCarriers, isCarrierToStarCombat) {\n        return 1;\n    },\n    getCarriersWeaponsDebuff(carriers) {\n        return 0;\n    }\n};\n\nconst fakeSpecialistService = {\n\n};\n\nconst fakePlayerService = {\n\n};\n\nconst fakeStarService = {\n\n};\n\nconst fakeReputationService = {\n\n};\n\nconst fakeDiplomacyService = {\n\n};\n\ndescribe('combat', () => {\n\n    // @ts-ignore\n    const service = new CombatService(fakeTechnologyService, fakeSpecialistService, fakePlayerService, fakeStarService, fakeReputationService, fakeDiplomacyService);\n\n    it('should calculate basic combat', async () => {\n        const defender = {\n            ships: 10,\n            weaponsLevel: 1\n        };\n\n        const attacker = {\n            ships: 20,\n            weaponsLevel: 1\n        };\n\n        const isTurnBased = false;\n        const calculatedNeeded = false;\n\n        const combatResult = service.calculate(defender, attacker, isTurnBased, calculatedNeeded);\n\n        expect(combatResult.weapons.defender).toBe(defender.weaponsLevel);\n        expect(combatResult.weapons.attacker).toBe(attacker.weaponsLevel);\n        expect(combatResult.weapons.defenderBase).toBe(defender.weaponsLevel);\n        expect(combatResult.weapons.attackerBase).toBe(attacker.weaponsLevel);\n        expect(combatResult.before.defender).toBe(defender.ships);\n        expect(combatResult.before.attacker).toBe(attacker.ships);\n        expect(combatResult.after.defender).toBe(0);\n        expect(combatResult.after.attacker).toBe(10);\n        expect(combatResult.lost.defender).toBe(10);\n        expect(combatResult.lost.attacker).toBe(10);\n    });\n\n    it('should calculate basic turn based combat - attacker wins', async () => {\n        const defender = {\n            ships: 10,\n            weaponsLevel: 1\n        };\n\n        const attacker = {\n            ships: 20,\n            weaponsLevel: 1\n        };\n\n        const isTurnBased = true;\n        const calculatedNeeded = false;\n\n        const combatResult = service.calculate(defender, attacker, isTurnBased, calculatedNeeded);\n\n        expect(combatResult.weapons.defender).toBe(defender.weaponsLevel);\n        expect(combatResult.weapons.attacker).toBe(attacker.weaponsLevel);\n        expect(combatResult.weapons.defenderBase).toBe(defender.weaponsLevel);\n        expect(combatResult.weapons.attackerBase).toBe(attacker.weaponsLevel);\n        expect(combatResult.before.defender).toBe(defender.ships);\n        expect(combatResult.before.attacker).toBe(attacker.ships);\n        expect(combatResult.after.defender).toBe(0);\n        expect(combatResult.after.attacker).toBe(10);\n        expect(combatResult.lost.defender).toBe(10);\n        expect(combatResult.lost.attacker).toBe(10);\n    });\n    \n    it('should calculate basic turn based combat - defender wins', async () => {\n        const defender = {\n            ships: 20,\n            weaponsLevel: 1\n        };\n\n        const attacker = {\n            ships: 10,\n            weaponsLevel: 1\n        };\n\n        const isTurnBased = true;\n        const calculatedNeeded = false;\n\n        const combatResult = service.calculate(defender, attacker, isTurnBased, calculatedNeeded);\n\n        expect(combatResult.weapons.defender).toBe(defender.weaponsLevel);\n        expect(combatResult.weapons.attacker).toBe(attacker.weaponsLevel);\n        expect(combatResult.weapons.defenderBase).toBe(defender.weaponsLevel);\n        expect(combatResult.weapons.attackerBase).toBe(attacker.weaponsLevel);\n        expect(combatResult.before.defender).toBe(defender.ships);\n        expect(combatResult.before.attacker).toBe(attacker.ships);\n        expect(combatResult.after.defender).toBe(11);\n        expect(combatResult.after.attacker).toBe(0);\n        expect(combatResult.lost.defender).toBe(9);\n        expect(combatResult.lost.attacker).toBe(10);\n    });\n\n    // --------------------------\n\n    it('should calculate carrier to star combat - carriers vs. star garrison - defender wins', async () => {\n        const game = { };\n\n        const star = {\n            shipsActual: 10\n        };\n\n        const defenders = [];\n\n        const attackers = [];\n\n        const defenderCarriers = [];\n        \n        const attackerCarriers = [\n            {\n                ships: 3\n            },\n            {\n                ships: 7\n            }\n        ];\n\n        // @ts-ignore\n        const combatResult = service.calculateStar(game, star, defenders, attackers, defenderCarriers, attackerCarriers);\n\n        expect(combatResult.weapons.defender).toBe(1);\n        expect(combatResult.weapons.attacker).toBe(1);\n        expect(combatResult.weapons.defenderBase).toBe(1);\n        expect(combatResult.weapons.attackerBase).toBe(1);\n        expect(combatResult.before.defender).toBe(10);\n        expect(combatResult.before.attacker).toBe(10);\n        expect(combatResult.after.defender).toBe(1);\n        expect(combatResult.after.attacker).toBe(0);\n        expect(combatResult.lost.defender).toBe(9);\n        expect(combatResult.lost.attacker).toBe(10);\n    });\n\n    it('should calculate carrier to star combat - carriers vs. star garrison - attacker wins', async () => {\n        const game = { };\n\n        const star = {\n            shipsActual: 10\n        };\n\n        const defenders = [];\n\n        const attackers = [];\n\n        const defenderCarriers = [];\n        \n        const attackerCarriers = [\n            {\n                ships: 30\n            },\n            {\n                ships: 70\n            }\n        ];\n\n        // @ts-ignore\n        const combatResult = service.calculateStar(game, star, defenders, attackers, defenderCarriers, attackerCarriers);\n\n        expect(combatResult.weapons.defender).toBe(1);\n        expect(combatResult.weapons.attacker).toBe(1);\n        expect(combatResult.weapons.defenderBase).toBe(1);\n        expect(combatResult.weapons.attackerBase).toBe(1);\n        expect(combatResult.before.defender).toBe(10);\n        expect(combatResult.before.attacker).toBe(100);\n        expect(combatResult.after.defender).toBe(0);\n        expect(combatResult.after.attacker).toBe(90);\n        expect(combatResult.lost.defender).toBe(10);\n        expect(combatResult.lost.attacker).toBe(10);\n    });\n\n    it('should calculate carrier to star combat - carriers vs. carriers - defender wins', async () => {\n        const game = { };\n\n        const star = {\n            shipsActual: 0\n        };\n\n        const defenders = [];\n\n        const attackers = [];\n\n        const defenderCarriers = [\n            {\n                ships: 10\n            }\n        ];\n        \n        const attackerCarriers = [\n            {\n                ships: 3\n            },\n            {\n                ships: 7\n            }\n        ];\n\n        // @ts-ignore\n        const combatResult = service.calculateStar(game, star, defenders, attackers, defenderCarriers, attackerCarriers);\n\n        expect(combatResult.weapons.defender).toBe(1);\n        expect(combatResult.weapons.attacker).toBe(1);\n        expect(combatResult.weapons.defenderBase).toBe(1);\n        expect(combatResult.weapons.attackerBase).toBe(1);\n        expect(combatResult.before.defender).toBe(10);\n        expect(combatResult.before.attacker).toBe(10);\n        expect(combatResult.after.defender).toBe(1);\n        expect(combatResult.after.attacker).toBe(0);\n        expect(combatResult.lost.defender).toBe(9);\n        expect(combatResult.lost.attacker).toBe(10);\n    });\n\n    it('should calculate carrier to star combat - carriers vs. carriers - attacker wins', async () => {\n        const game = { };\n\n        const star = {\n            shipsActual: 0\n        };\n\n        const defenders = [];\n\n        const attackers = [];\n\n        const defenderCarriers = [\n            {\n                ships: 10\n            }\n        ];\n        \n        const attackerCarriers = [\n            {\n                ships: 30\n            },\n            {\n                ships: 70\n            }\n        ];\n\n        // @ts-ignore\n        const combatResult = service.calculateStar(game, star, defenders, attackers, defenderCarriers, attackerCarriers);\n\n        expect(combatResult.weapons.defender).toBe(1);\n        expect(combatResult.weapons.attacker).toBe(1);\n        expect(combatResult.weapons.defenderBase).toBe(1);\n        expect(combatResult.weapons.attackerBase).toBe(1);\n        expect(combatResult.before.defender).toBe(10);\n        expect(combatResult.before.attacker).toBe(100);\n        expect(combatResult.after.defender).toBe(0);\n        expect(combatResult.after.attacker).toBe(90);\n        expect(combatResult.lost.defender).toBe(10);\n        expect(combatResult.lost.attacker).toBe(10);\n    });\n\n    // --------------------------\n\n    it('should calculate carrier to carrier combat - mutual destruction', async () => {\n        const game = { };\n\n        const defenders = [];\n\n        const attackers = [];\n\n        const defenderCarriers = [\n            {\n                ships: 10\n            }\n        ];\n        \n        const attackerCarriers = [\n            {\n                ships: 3\n            },\n            {\n                ships: 7\n            }\n        ];\n\n        // @ts-ignore\n        const combatResult = service.calculateCarrier(game, defenders, attackers, defenderCarriers, attackerCarriers);\n\n        expect(combatResult.weapons.defender).toBe(1);\n        expect(combatResult.weapons.attacker).toBe(1);\n        expect(combatResult.weapons.defenderBase).toBe(1);\n        expect(combatResult.weapons.attackerBase).toBe(1);\n        expect(combatResult.before.defender).toBe(10);\n        expect(combatResult.before.attacker).toBe(10);\n        expect(combatResult.after.defender).toBe(0);\n        expect(combatResult.after.attacker).toBe(0);\n        expect(combatResult.lost.defender).toBe(10);\n        expect(combatResult.lost.attacker).toBe(10);\n    });\n\n    it('should calculate carrier to carrier combat - defender wins', async () => {\n        const game = { };\n\n        const defenders = [];\n\n        const attackers = [];\n\n        const defenderCarriers = [\n            {\n                ships: 100\n            }\n        ];\n        \n        const attackerCarriers = [\n            {\n                ships: 3\n            },\n            {\n                ships: 7\n            }\n        ];\n\n        // @ts-ignore\n        const combatResult = service.calculateCarrier(game, defenders, attackers, defenderCarriers, attackerCarriers);\n\n        expect(combatResult.weapons.defender).toBe(1);\n        expect(combatResult.weapons.attacker).toBe(1);\n        expect(combatResult.weapons.defenderBase).toBe(1);\n        expect(combatResult.weapons.attackerBase).toBe(1);\n        expect(combatResult.before.defender).toBe(100);\n        expect(combatResult.before.attacker).toBe(10);\n        expect(combatResult.after.defender).toBe(90);\n        expect(combatResult.after.attacker).toBe(0);\n        expect(combatResult.lost.defender).toBe(10);\n        expect(combatResult.lost.attacker).toBe(10);\n    });\n\n    it('should calculate carrier to carrier combat - attacker wins', async () => {\n        const game = { };\n\n        const defenders = [];\n\n        const attackers = [];\n\n        const defenderCarriers = [\n            {\n                ships: 10\n            }\n        ];\n        \n        const attackerCarriers = [\n            {\n                ships: 30\n            },\n            {\n                ships: 70\n            }\n        ];\n\n        // @ts-ignore\n        const combatResult = service.calculateCarrier(game, defenders, attackers, defenderCarriers, attackerCarriers);\n\n        expect(combatResult.weapons.defender).toBe(1);\n        expect(combatResult.weapons.attacker).toBe(1);\n        expect(combatResult.weapons.defenderBase).toBe(1);\n        expect(combatResult.weapons.attackerBase).toBe(1);\n        expect(combatResult.before.defender).toBe(10);\n        expect(combatResult.before.attacker).toBe(100);\n        expect(combatResult.after.defender).toBe(0);\n        expect(combatResult.after.attacker).toBe(90);\n        expect(combatResult.lost.defender).toBe(10);\n        expect(combatResult.lost.attacker).toBe(10);\n    });\n\n    it('should destroy carriers in carrier to carrier combat if they cannot withstand a single blow - defender wins', async () => {\n        const game = { };\n\n        const defenders = [];\n\n        const attackers = [];\n\n        const defenderCarriers = [\n            {\n                ships: 10\n            }\n        ];\n        \n        const attackerCarriers = [\n            {\n                ships: 1\n            }\n        ];\n\n        // @ts-ignore\n        const combatResult = service.calculateCarrier(game, defenders, attackers, defenderCarriers, attackerCarriers);\n\n        expect(combatResult.weapons.defender).toBe(1);\n        expect(combatResult.weapons.attacker).toBe(1);\n        expect(combatResult.weapons.defenderBase).toBe(1);\n        expect(combatResult.weapons.attackerBase).toBe(1);\n        expect(combatResult.before.defender).toBe(10);\n        expect(combatResult.before.attacker).toBe(1);\n        expect(combatResult.after.defender).toBe(9);\n        expect(combatResult.after.attacker).toBe(0);\n        expect(combatResult.lost.defender).toBe(1);\n        expect(combatResult.lost.attacker).toBe(1);\n    });\n\n    it('should destroy carriers in carrier to carrier combat if they cannot withstand a single blow - attacker wins', async () => {\n        const game = { };\n\n        const defenders = [];\n\n        const attackers = [];\n\n        const defenderCarriers = [\n            {\n                ships: 1\n            }\n        ];\n        \n        const attackerCarriers = [\n            {\n                ships: 10\n            }\n        ];\n\n        // @ts-ignore\n        const combatResult = service.calculateCarrier(game, defenders, attackers, defenderCarriers, attackerCarriers);\n\n        expect(combatResult.weapons.defender).toBe(1);\n        expect(combatResult.weapons.attacker).toBe(1);\n        expect(combatResult.weapons.defenderBase).toBe(1);\n        expect(combatResult.weapons.attackerBase).toBe(1);\n        expect(combatResult.before.defender).toBe(1);\n        expect(combatResult.before.attacker).toBe(10);\n        expect(combatResult.after.defender).toBe(0);\n        expect(combatResult.after.attacker).toBe(9);\n        expect(combatResult.lost.defender).toBe(1);\n        expect(combatResult.lost.attacker).toBe(1);\n    });\n\n});\n"],
  "mappings": "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",
  "names": ["CombatService"]
}
