{
  "version": 3,
  "sources": ["../../../server/spec/leaderboard.spec.ts"],
  "sourcesContent": ["import { Game } from '../services/types/Game';\nimport LeaderboardService from '../services/leaderboard';\nimport Repository from '../services/repository';\nimport { User } from '../services/types/User';\nimport UserService from '../services/user';\nimport PlayerService from '../services/player';\nimport UserGuildService from '../services/guildUser';\nimport RatingService from '../services/rating';\nimport GameService from '../services/game';\nimport GameTypeService from '../services/gameType';\nimport GameStateService from '../services/gameState';\nimport BadgeService from '../services/badge';\nimport PlayerStatisticsService from '../services/playerStatistics';\nimport { Player } from '../services/types/Player';\nimport { LeaderboardPlayer } from '../services/types/Leaderboard';\nimport PlayerAfkService from '../services/playerAfk';\nimport UserLevelService from '../services/userLevel';\nconst mongoose = require('mongoose');\n\ndescribe('Leaderboard - Last man standing', () => {\n    let userRepo: Repository<User>;\n    let userService: UserService;\n    let playerService: PlayerService;\n    let playerAfkService: PlayerAfkService;\n    let userLevelService: UserLevelService;\n    let guildUserService: UserGuildService;\n    let ratingService: RatingService;\n    let gameService: GameService;\n    let gameTypeService: GameTypeService;\n    let gameStateService: GameStateService;\n    let badgeService: BadgeService;\n    let playerStatisticsService: PlayerStatisticsService;\n\n    let service: LeaderboardService;\n    let game: Game;\n    let leaderboard: LeaderboardPlayer[];\n\n    beforeEach(() => {\n        playerAfkService = {\n            isAIControlled: (game: Game, player: Player, includePseudoAfk: boolean) => {\n                return false;\n            }\n        } as PlayerAfkService;\n\n        gameTypeService = {\n            isKingOfTheHillMode: (game: Game) => { return false; }\n        } as GameTypeService;\n\n        playerStatisticsService = {\n            getStats: (game: Game, player: Player) => {\n                return {\n                    totalStars: 1,\n                    totalHomeStars: 1,\n                    totalCarriers: 1,\n                    totalShips: 1,\n                    totalEconomy: 1,\n                    totalIndustry: 1,\n                    totalScience: 1,\n                    newShips: 1,\n                    warpgates: 1,\n                    totalStarSpecialists: 1,\n                    totalCarrierSpecialists: 1,\n                    totalSpecialists: 2\n                };\n            }\n        } as PlayerStatisticsService;\n\n        service = new LeaderboardService(userRepo, userService, playerService, playerAfkService, userLevelService, guildUserService, ratingService, gameService, gameTypeService, gameStateService, badgeService, playerStatisticsService);\n\n        game = {\n            settings: {\n                general: {\n                    playerLimit: 2\n                }\n            },\n            galaxy: {\n                players: [\n                    {\n                        _id: mongoose.Types.ObjectId(),\n                        userId: mongoose.Types.ObjectId(),\n                        defeated: false\n                    },\n                    {\n                        _id: mongoose.Types.ObjectId(),\n                        userId: mongoose.Types.ObjectId(),\n                        defeated: false\n                    },\n                    {\n                        _id: mongoose.Types.ObjectId(),\n                        userId: mongoose.Types.ObjectId(),\n                        defeated: false\n                    }\n                ]\n            }\n        } as Game;\n\n        leaderboard = game.galaxy.players.map(p => {\n            return {\n                player: p,\n                stats: playerStatisticsService.getStats(game, p),\n                isKingOfTheHill: false\n            }\n        })\n    });\n\n    it('should return null if no players are defeated', () => {\n        const result = service.getLastManStanding(game, leaderboard);\n\n        expect(result).toBeNull();\n    });\n\n    it('should return the first player if all other players are defeated', () => {\n        game.galaxy.players[1].defeated = true;\n        game.galaxy.players[1].defeatedDate = new Date();\n        game.galaxy.players[2].defeated = true;\n        game.galaxy.players[2].defeatedDate = new Date();\n\n        const result = service.getLastManStanding(game, leaderboard);\n\n        expect(result).not.toBeNull();\n        expect(result!._id).toBe(game.galaxy.players[0]._id!);\n    });\n\n    it('should return the first place player if all players are defeated', () => {\n        game.galaxy.players[0].defeated = true;\n        game.galaxy.players[0].defeatedDate = new Date();\n        game.galaxy.players[1].defeated = true;\n        game.galaxy.players[1].defeatedDate = new Date();\n        game.galaxy.players[2].defeated = true;\n        game.galaxy.players[2].defeatedDate = new Date();\n\n        const result = service.getLastManStanding(game, leaderboard);\n\n        expect(result).not.toBeNull();\n        expect(result!._id).toBe(game.galaxy.players[0]._id!);\n    });\n\n    it('should return null if all other players are undefeated AI', () => {\n        game.galaxy.players[1].userId = null;\n        game.galaxy.players[2].userId = null;\n\n        playerAfkService.isAIControlled = (game: Game, player: Player, includePseudoAfk: boolean) => { return player._id.toString() !== game.galaxy.players[0]._id.toString(); }\n\n        const result = service.getLastManStanding(game, leaderboard);\n\n        expect(result).toBeNull();\n    });\n\n    it('should return the first place player all players are AI', () => {\n        game.galaxy.players[0].userId = null;\n        game.galaxy.players[1].userId = null;\n        game.galaxy.players[2].userId = null;\n\n        playerAfkService.isAIControlled = (game: Game, player: Player, includePseudoAfk: boolean) => { return true; }\n\n        const result = service.getLastManStanding(game, leaderboard);\n\n        expect(result).not.toBeNull();\n        expect(result!._id).toBe(game.galaxy.players[0]._id!);\n    });\n})"],
  "mappings": "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",
  "names": ["game", "LeaderboardService"]
}
