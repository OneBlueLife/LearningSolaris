{
  "version": 3,
  "sources": ["../../../server/services/guild.ts"],
  "sourcesContent": ["const mongoose = require('mongoose');\nimport { DBObjectId } from './types/DBObjectId';\nimport ValidationError from '../errors/validation';\nimport Repository from './repository';\nimport { Guild, GuildLeaderboard, GuildRank, GuildUserApplication, GuildWithUsers } from './types/Guild';\nimport { User } from './types/User';\nimport UserService from './user';\n\nfunction toProperCase(string: string) {\n    return string.replace(/\\w\\S*/g, function(txt: string){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n};\n\nexport default class GuildService {\n    static SORTERS = ['totalRank', 'memberCount']\n\n    MAX_MEMBER_COUNT = 100\n    MAX_INVITE_COUNT = 100\n    CREATE_GUILD_CREDITS_COST = 3\n    RENAME_GUILD_CREDITS_COST = 1\n\n    guildModel;\n    guildRepo: Repository<Guild>;\n    userRepo: Repository<User>;\n    userService: UserService;\n    \n    constructor(\n        guildModel,\n        guildRepo: Repository<Guild>,\n        userRepo: Repository<User>,\n        userService: UserService\n    ) {\n        this.guildModel = guildModel;\n        this.guildRepo = guildRepo;\n        this.userRepo = userRepo;\n        this.userService = userService;\n    }\n\n    async list() {\n        let users = await this.userService.listUsersInGuilds();\n\n        let guilds = await this.guildRepo.find({\n            // All guilds\n        }, {\n            name: 1,\n            tag: 1\n        });\n\n        let guildsWithRank: GuildRank[] = guilds.map(guild => {\n            let usersInGuild = users.filter(x => x.guildId && x.guildId.toString() === guild._id.toString());\n\n            let totalRank = usersInGuild.reduce((sum, i) => sum + i.achievements.rank, 0);\n\n            return {\n                ...guild,\n                totalRank\n            };\n        });\n\n        return guildsWithRank.sort((a, b) => b.totalRank - a.totalRank);\n    }\n\n    async listInfoByIds(guildIds: DBObjectId[]) {\n        return await this.guildRepo.find({\n            _id: {\n                $in: guildIds\n            }\n        }, {\n            name: 1,\n            tag: 1\n        });\n    }\n\n    async getInfoById(guildId: DBObjectId) {\n        return await this.guildRepo.findOne({\n            _id: guildId\n        }, {\n            name: 1,\n            tag: 1\n        });\n    }\n\n    async listInvitations(userId: DBObjectId) {\n        let guilds = await this.guildRepo.find({\n            invitees: {\n                $in: [mongoose.Types.ObjectId(userId)]\n            }\n        }, {\n            name: 1,\n            tag: 1\n        });\n\n        return guilds;\n    }\n\n    async listApplications(userId: DBObjectId): Promise<GuildUserApplication[]> {\n        let guilds = await this.guildRepo.find({\n            // All guilds\n        }, {\n            _id: 1,\n            name: 1,\n            tag: 1,\n            applicants: 1\n        });\n\n        return guilds.map(g => {\n            let hasApplied = this._isApplicant(g, userId);\n\n            return {\n                _id: g._id,\n                name: g.name,\n                tag: g.tag,\n                hasApplied\n            };\n        });\n    }\n\n    async detailWithUserInfo(guildId: DBObjectId, withInvitationsAndApplications: boolean = false): Promise<GuildWithUsers> {\n        if (guildId == null) {\n            throw new ValidationError(\"Guild ID is required.\");\n        }\n\n        let guild = await this.guildRepo.findOne({\n            _id: guildId\n        });\n\n        if (!guild) {\n            throw new ValidationError(\"Guild not found.\");\n        }\n\n        let guildWithUsers: GuildWithUsers = {\n            _id: guild._id,\n            name: guild.name,\n            tag: guild.tag\n        };\n\n        let userSelectObject = {\n            username: 1,\n            'achievements.level': 1,\n            'achievements.rank': 1,\n            'achievements.victories': 1,\n            'achievements.renown': 1\n        };\n\n        let usersInGuild = await this.userService.listUsersInGuild(guildId, userSelectObject);\n        \n        guildWithUsers.leader = usersInGuild.find(x => x._id.toString() === guild!.leader.toString())!;\n        guildWithUsers.officers = usersInGuild.filter(x => this._isOfficer(guild!, x._id));\n        guildWithUsers.members = usersInGuild.filter(x => this._isMember(guild!, x._id));\n\n        if (withInvitationsAndApplications) {\n            guildWithUsers.invitees = await this.userService.listUsers(guild.invitees, userSelectObject);\n            guildWithUsers.applicants = await this.userService.listUsers(guild.applicants, userSelectObject);\n        } else {\n            delete guildWithUsers.invitees;\n            delete guildWithUsers.applicants;\n        }\n\n        guildWithUsers.totalRank = usersInGuild.reduce((sum, i) => sum + i.achievements.rank, 0);\n\n        return guildWithUsers;\n    }\n\n    async detail(guildId: DBObjectId): Promise<Guild> {\n        if (guildId == null) {\n            throw new ValidationError(\"Guild ID is required.\");\n        }\n\n        let guild = await this.guildRepo.findOne({\n            _id: guildId\n        });\n\n        if (!guild) {\n            throw new ValidationError(\"Guild not found.\");\n        }\n        \n        return guild;\n    }\n\n    async detailMyGuild(userId: DBObjectId, withUserInfo: boolean = false) {\n        let user = await this.userService.getById(userId, {\n            guildId: 1\n        });\n\n        if (!user || !user.guildId) {\n            return null;\n        }\n\n        return await this.detailWithUserInfo(user.guildId, true);\n    }\n\n    async create(userId: DBObjectId, name: string, tag: string) {\n        let isUserInAGuild = await this._isUserInAGuild(userId);\n\n        if (isUserInAGuild) {\n            throw new ValidationError(`Cannot create a guild if you are already a member in another guild.`);\n        }\n\n        let userCredits = await this.userService.getCredits(userId);\n\n        if (userCredits < this.CREATE_GUILD_CREDITS_COST) {\n            throw new ValidationError(`You do not have enough credits to found a guild. The cost is ${this.CREATE_GUILD_CREDITS_COST} credits, you have ${userCredits}.`);\n        }\n\n        name = toProperCase(name.trim());\n        tag = tag.trim().replace(/\\s/g, '');\n\n        let existing = await this.guildRepo.findOne({\n            $or: [\n                { name },\n                { tag }\n            ]\n        });\n\n        if (existing) {\n            throw new ValidationError(`A guild with the same name or tag already exists.`);\n        }\n\n        // Remove all invites and applications to this user for any guild.\n        await this.declineAllInvitations(userId);\n        await this.withdrawAllApplications(userId);\n\n        let guild = new this.guildModel();\n\n        guild.leader = userId;\n        guild.name = name;\n        guild.tag = tag;\n\n        await guild.save();\n\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            $set: {\n                guildId: guild._id\n            },\n            $inc: {\n                credits: -this.CREATE_GUILD_CREDITS_COST\n            }\n        });\n\n        return guild;\n    }\n\n    async rename(userId: DBObjectId, newName: string, newTag: string) {\n        let user = await this.userService.getById(userId, {\n            guildId: 1\n        });\n\n        if (!user!.guildId) {\n            throw new ValidationError('You are not a member of a guild.');\n        }\n\n        let guild = await this.detail(user!.guildId!);\n\n        let isLeader = this._isLeader(guild, userId);\n\n        if (!isLeader) {\n            throw new ValidationError('Only guild leaders can rename their guild.');\n        }\n\n        let userCredits = await this.userService.getCredits(userId);\n\n        if (userCredits < this.RENAME_GUILD_CREDITS_COST) {\n            throw new ValidationError(`You do not have enough credits to rename your guild. The cost is ${this.RENAME_GUILD_CREDITS_COST} credits, you have ${userCredits}.`);\n        }\n\n        newName = toProperCase(newName.trim());\n        newTag = newTag.trim().replace(/\\s/g, '');\n\n        // Update the guild\n        await this.guildRepo.updateOne({\n            _id: guild._id\n        }, {\n            $set: {\n                name: newName,\n                tag: newTag\n            }\n        });\n\n        // Deduct user credits\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            $inc: {\n                credits: -this.RENAME_GUILD_CREDITS_COST\n            }\n        });\n    }\n\n    async delete(userId: DBObjectId, guildId: DBObjectId) {\n        let guild = await this.detail(guildId);\n\n        if (!this._isLeader(guild, userId)) {\n            throw new ValidationError(`You do not have the authority to disband the guild.`);\n        }\n\n        await this.userRepo.updateMany({\n            guildId\n        }, {\n            $unset: {\n                guildId: undefined\n            }\n        });\n\n        await this.guildRepo.deleteOne({ \n            _id: guildId \n        });\n    }\n\n    async invite(username: string, guildId: DBObjectId, invitedByUserId: DBObjectId) {\n        let user = await this.userService.getByUsername(username, {\n            username: 1,\n            'achievements.level': 1,\n            'achievements.rank': 1,\n            'achievements.victories': 1,\n            'achievements.renown': 1\n        });\n        \n        if (!user) {\n            throw new ValidationError(`A player with the username does not exist.`);\n        }\n\n        let userId = user._id;\n\n        let isUserInAGuild = await this._isUserInAGuild(userId);\n\n        if (isUserInAGuild) {\n            throw new ValidationError(`Cannot invite this user, the user is already a member of a guild.`);\n        }\n\n        let guild = await this.detail(guildId);\n\n        let hasPermission = this._isLeader(guild, invitedByUserId) || this._isOfficer(guild, invitedByUserId);\n\n        if (!hasPermission) {\n            throw new ValidationError(`You do not have the authority to invite new members to the guild.`);\n        }\n\n        if (this._isInvitee(guild, userId)) {\n            throw new ValidationError(`The user has already been invited to the guild.`);\n        }\n\n        if (this._isApplicant(guild, userId)) {\n            return this.accept(userId, guildId, invitedByUserId);\n        }\n\n        if (guild.invitees.length >= this.MAX_INVITE_COUNT) {\n            throw new ValidationError(`There is a maximum of ${this.MAX_INVITE_COUNT} invitees at one time.`);\n        }\n\n        await this.guildRepo.updateOne({\n            _id: guildId\n        }, {\n            $push: {\n                invitees: userId\n            }\n        });\n\n        return user;\n    }\n\n    async uninvite(userId: DBObjectId, guildId: DBObjectId, uninvitedByUserId: DBObjectId) {\n        let guild = await this.detail(guildId);\n\n        let hasPermission = this._isLeader(guild, uninvitedByUserId) || this._isOfficer(guild, uninvitedByUserId);\n\n        if (!hasPermission) {\n            throw new ValidationError(`You do not have the authority to uninvite users from the guild.`);\n        }\n\n        if (!this._isInvitee(guild, userId)) {\n            throw new ValidationError(`The user has not been invited to the guild.`);\n        }\n\n        await this.guildRepo.updateOne({\n            _id: guildId\n        }, {\n            $pull: {\n                invitees: userId\n            }\n        });\n    }\n\n    async decline(userId: DBObjectId, guildId: DBObjectId) {\n        let guild = await this.detail(guildId);\n\n        if (!this._isInvitee(guild, userId)) {\n            throw new ValidationError(`The user is not an invitee of this guild.`);\n        }\n\n        await this.guildRepo.updateOne({\n            _id: guildId\n        }, {\n            $pull: {\n                invitees: userId\n            }\n        });\n    }\n\n    async declineAllInvitations(userId: DBObjectId) {\n        await this.guildRepo.updateMany({\n            invitees: {\n                $in: [userId]\n            }\n        }, {\n            $pull: {\n                invitees: userId\n            }\n        });\n    }\n\n    async withdrawAllApplications(userId: DBObjectId) {\n        await this.guildRepo.updateMany({\n            applicants: {\n                $in: [userId]\n            }\n        }, {\n            $pull: {\n                applicants: userId\n            }\n        });\n    }\n\n    async apply(userId: DBObjectId, guildId: DBObjectId) {\n        let isUserInAGuild = await this._isUserInAGuild(userId);\n\n        if (isUserInAGuild) {\n            throw new ValidationError(`Cannot apply to this guild, you are already a member of a guild.`);\n        }\n\n        let guild = await this.detail(guildId);\n\n        if (this._isApplicant(guild, userId)) {\n            throw new ValidationError(`You have already applied to become a member of this guild.`);\n        }\n\n        await this.guildRepo.updateOne({\n            _id: guildId\n        }, {\n            $push: {\n                applicants: userId\n            }\n        });\n    }\n\n    async withdraw(userId: DBObjectId, guildId: DBObjectId) {\n        let guild = await this.detail(guildId);\n\n        if (!this._isApplicant(guild, userId)) {\n            throw new ValidationError(`You have not applied to become a member of this guild.`);\n        }\n\n        await this.guildRepo.updateOne({\n            _id: guildId\n        }, {\n            $pull: {\n                applicants: userId\n            }\n        });\n    }\n\n    async accept(userId: DBObjectId, guildId: DBObjectId, acceptedByUserId: DBObjectId) {\n        let guild = await this.detail(guildId);\n\n        let hasPermission = this._isLeader(guild, acceptedByUserId) || this._isOfficer(guild, acceptedByUserId);\n\n        if (!hasPermission) {\n            throw new ValidationError(`You do not have the authority to accept applications to the guild.`);\n        }\n\n        await this.join(userId, guildId);\n    }\n\n    async reject(userId: DBObjectId, guildId: DBObjectId, rejectedByUserId: DBObjectId) {\n        let guild = await this.detail(guildId);\n\n        let hasPermission = this._isLeader(guild, rejectedByUserId) || this._isOfficer(guild, rejectedByUserId);\n\n        if (!hasPermission) {\n            throw new ValidationError(`You do not have the authority to reject applications to the guild.`);\n        }\n\n        if (!this._isApplicant(guild, userId)) {\n            throw new ValidationError(`The user has not applied to become a member of the guild.`);\n        }\n\n        await this.guildRepo.updateOne({\n            _id: guildId\n        }, {\n            $pull: {\n                applicants: userId\n            }\n        });\n    }\n\n    async join(userId: DBObjectId, guildId: DBObjectId) {\n        let guild = await this.detail(guildId);\n\n        if (!this._isApplicant(guild, userId) && !this._isInvitee(guild, userId)) {\n            throw new ValidationError(`The user is not an invitee or applicant of this guild.`);\n        }\n\n        // Remove all invites and applications to this user for any guild.\n        await this.declineAllInvitations(userId);\n        await this.withdrawAllApplications(userId);\n\n        // Add the user to the chosen guild.\n        await this.guildRepo.updateOne({\n            _id: guildId\n        }, {\n            $push: {\n                members: userId\n            }\n        });\n\n        // Set the user's guild id\n        await this.userRepo.updateOne({ \n            _id: userId\n        }, {\n            $set: {\n                guildId\n            }\n        });\n\n        guild.members.push(userId);\n\n        // If maximum members reached, clear pending invites and applications.\n        if (this._totalMemberCount(guild) >= this.MAX_MEMBER_COUNT) {\n            await this.guildRepo.updateOne({\n                _id: guildId\n            }, {\n                $set: {\n                    invitees: [],\n                    applicants: []\n                }\n            });\n        }\n    }\n\n    async tryLeave(userId: DBObjectId) {\n        let guild = await this.detailMyGuild(userId, false);\n\n        if (guild) {\n            await this.leave(userId, guild._id);\n        }\n    }\n\n    async leave(userId: DBObjectId, guildId: DBObjectId) {\n        let guild = await this.detail(guildId);\n\n        if (this._isLeader(guild, userId)) {\n            throw new ValidationError(`Cannot leave your guild if you are the leader, promote a new guild leader first.`);\n        }\n\n        await this._removeUser(guild, userId);\n    }\n\n    async promote(userId: DBObjectId, guildId: DBObjectId, promotedByUserId: DBObjectId) {\n        let guild = await this.detail(guildId);\n\n        let hasPermission = this._isLeader(guild, promotedByUserId)\n            || (this._isOfficer(guild, promotedByUserId) && this._isMember(guild, userId));\n\n        if (!hasPermission) {\n            throw new ValidationError(`You do not have the authority to promote this member.`);\n        }\n\n        if (this._isOfficer(guild, userId)) {\n            // Officer to leader\n            await this.guildRepo.updateOne({\n                _id: guildId,\n                'officers': userId\n            }, {\n                $set: {\n                    leader: userId,\n                    'officers.$': promotedByUserId\n                }\n            });\n        } else if (this._isMember(guild, userId)) {\n            // Member to officer\n            await this.guildRepo.updateOne({\n                _id: guildId\n            }, {\n                $pull: {\n                    members: userId\n                },\n                $push: {\n                    officers: userId\n                }\n            });\n        } else {\n            throw new ValidationError(`The user is not a member of this guild.`);\n        }\n    }\n\n    async demote(userId: DBObjectId, guildId: DBObjectId, demotedByUserId: DBObjectId) {\n        let guild = await this.detail(guildId);\n\n        let hasPermission = this._isLeader(guild, demotedByUserId);\n\n        if (!hasPermission) {\n            throw new ValidationError(`You do not have the authority to demote this member.`);\n        }\n\n        let updateObject: any | null = null;\n\n        if (this._isOfficer(guild, userId)) {\n            // Officer to member\n            updateObject = {\n                $pull: {\n                    officers: userId\n                },\n                $push: {\n                    members: userId\n                }\n            };\n        } else if (this._isMember(guild, userId)) {\n            throw new ValidationError(`Members cannot be demoted.`);\n        } else {\n            throw new ValidationError(`The user is not a member of this guild.`);\n        }\n\n        await this.guildRepo.updateOne({\n            _id: guildId\n        }, updateObject);\n    }\n\n    async kick(userId: DBObjectId, guildId: DBObjectId, kickedByUserId: DBObjectId) {\n        let guild = await this.detail(guildId);\n\n        if (this._isLeader(guild, userId)) {\n            throw new ValidationError(`Cannot kick the guild leader.`);\n        }\n\n        let hasPermission = this._isLeader(guild, kickedByUserId)\n            || (this._isOfficer(guild, kickedByUserId) && this._isMember(guild, userId));\n\n        if (!hasPermission) {\n            throw new ValidationError(`You do not have the authority to kick this member.`);\n        }\n\n        await this._removeUser(guild, userId);\n    }\n\n    async _removeUser(guild: Guild, userId: DBObjectId) {\n        let updateObject: any | null = null;\n\n        if (this._isOfficer(guild, userId)) {\n            updateObject = {\n                $pull: {\n                    officers: userId\n                }\n            }\n        } else if (this._isMember(guild, userId)) {\n            updateObject = {\n                $pull: {\n                    members: userId\n                }\n            }\n        } else {\n            throw new ValidationError(`The user is not a member of this guild.`);\n        }\n\n        await this.guildRepo.updateOne({\n            _id: guild._id\n        }, updateObject);\n\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            $set: {\n                guildId: null\n            }\n        });\n    }\n\n    _isLeader(guild: Guild, userId: DBObjectId) {\n        return guild.leader.toString() === userId.toString();\n    }\n\n    _isOfficer(guild: Guild, userId: DBObjectId) {\n        return guild.officers.find(x => x.toString() === userId.toString()) != null;\n    }\n\n    _isMember(guild: Guild, userId: DBObjectId) {\n        return guild.members.find(x => x.toString() === userId.toString()) != null;\n    }\n\n    _isInvitee(guild: Guild, userId: DBObjectId) {\n        return guild.invitees.find(x => x.toString() === userId.toString()) != null;\n    }\n\n    _isApplicant(guild: Guild, userId: DBObjectId) {\n        return guild.applicants.find(x => x.toString() === userId.toString()) != null;\n    }\n\n    _totalMemberCount(guild: Guild) {\n        return 1 + guild.officers.length + guild.members.length;\n    }\n\n    async _isUserInAGuild(userId: DBObjectId) {\n        return await this.userRepo.count({\n            _id: userId,\n            guildId: { $ne: null }\n        }) > 0;\n    }\n\n    async listUserRanksInGuilds() {\n        return await this.userRepo.find({\n            guildId: { $ne: null }\n        }, {\n            guildId: 1,\n            'achievements.rank': 1\n        });\n    }\n\n    async getLeaderboard(limit: number | null, sortingKey: string) {\n        limit = limit || 100;\n        sortingKey = GuildService.SORTERS.includes(sortingKey) ? sortingKey : 'totalRank';\n\n        let guilds = await this.guildRepo.find({}, {\n            name: 1,\n            tag: 1,\n            leader: 1,\n            officers: 1,\n            members: 1\n        });\n\n        // Calculate the rankings of each guild.\n        let users = await this.listUserRanksInGuilds();\n\n        let guildsWithRank: GuildLeaderboard[] = guilds.map(guild => {\n            let usersInGuild = users.filter(x => x.guildId!.toString() === guild._id.toString());\n\n            let totalRank = usersInGuild.reduce((sum, i) => sum + i.achievements.rank, 0);\n            let memberCount = usersInGuild.length;\n\n            return {\n                ...guild,\n                totalRank,\n                memberCount\n            }\n        });\n\n        let leaderboard = guildsWithRank\n                        .sort((a, b) => b[sortingKey] - a[sortingKey])\n                        .slice(0, limit);\n\n        for (let i = 0; i < leaderboard.length; i++) {\n            leaderboard[i].position = i + 1;\n        }\n\n        return {\n            leaderboard,\n            totalGuilds: guildsWithRank.length\n        };\n    }\n\n};\n"],
  "mappings": "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",
  "names": ["ValidationError"]
}
