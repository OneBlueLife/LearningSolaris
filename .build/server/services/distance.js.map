{
  "version": 3,
  "sources": ["../../../server/services/distance.ts"],
  "sourcesContent": ["import { Game } from \"./types/Game\";\nimport { Location } from \"./types/Location\";\n\nexport default class DistanceService {  \n\n    getDistanceBetweenLocations(loc1: Location, loc2: Location) {\n        return Math.hypot(loc2.x - loc1.x, loc2.y - loc1.y);\n    }\n\n    getDistanceAlongLocationList(locations: Location[]) {\n        if (!locations || locations.length < 2) {\n            return 0;\n        }\n\n        let distance = 0;\n        let last = locations[0];\n\n        for (let i = 1; i < locations.length; i++) {\n            const current = locations[i];\n            distance += this.getDistanceBetweenLocations(last, current);\n            last = current;\n        }\n\n        return distance;\n    }\n\n    getDistanceSquaredBetweenLocations(loc1: Location, loc2: Location)\n    {\n        let xs = loc2.x - loc1.x,\n            ys = loc2.y - loc1.y;\n\n        xs *= xs;\n        ys *= ys;\n\n        return xs + ys;\n    }\n\n    getClosestLocations(loc: Location, locs: Location[], amount: number): Location[] {\n        let sorted = locs\n            .filter(a => a.x !== loc.x && a.y !== loc.y) // Ignore the location passed in if it exists in the array.\n            .sort((a, b) => {\n                return this.getDistanceBetweenLocations(loc, a)\n                    - this.getDistanceBetweenLocations(loc, b);\n            });\n        \n        return sorted.slice(0, amount);\n    }\n\n    getClosestLocation(loc: Location, locs: Location[]): Location {\n        return this.getClosestLocations(loc, locs, 1)[0];\n    }\n\n    getDistanceToClosestLocation(loc: Location, locs: Location[]): number {\n        let closest = this.getClosestLocation(loc, locs);\n\n        return this.getDistanceBetweenLocations(loc, closest);\n    }\n\n    getFurthestLocations(loc: Location, locs: Location[], amount: number): Location[] {\n        return this.getClosestLocations(loc, locs, locs.length).reverse().slice(0, amount);\n    }\n\n    getFurthestLocation(loc: Location, locs: Location[]): Location {\n        return this.getFurthestLocations(loc, locs, 1)[0];\n    }\n\n    getScanningDistance(game: Game, scanning: number): number {\n        return ((scanning || 1) + 1) * game.constants.distances.lightYear;\n    }\n    \n    getHyperspaceDistance(game: Game, hyperspace: number): number {\n        return ((hyperspace || 1) + 1.5) * game.constants.distances.lightYear;\n    }\n\n    getAngleTowardsLocation(source: Location, destination: Location): number {\n        let deltaX = destination.x - source.x;\n        let deltaY = destination.y - source.y;\n\n        return Math.atan2(deltaY, deltaX);\n    }\n\n    getNextLocationTowardsLocation(source: Location, destination: Location, distance: number): Location {\n        let angle = this.getAngleTowardsLocation(source, destination);\n\n        return {\n            x: source.x + (distance * Math.cos(angle)),\n            y: source.y + (distance * Math.sin(angle)),\n        };\n    }\n\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,MAAO,gBAA8B;AAAA,EAEjC,4BAA4B,MAAgB,MAAgB;AACxD,WAAO,KAAK,MAAM,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,CAAC;AAAA,EACtD;AAAA,EAEA,6BAA6B,WAAuB;AAChD,QAAI,CAAC,aAAa,UAAU,SAAS,GAAG;AACpC,aAAO;AAAA,IACX;AAEA,QAAI,WAAW;AACf,QAAI,OAAO,UAAU;AAErB,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,YAAM,UAAU,UAAU;AAC1B,kBAAY,KAAK,4BAA4B,MAAM,OAAO;AAC1D,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,mCAAmC,MAAgB,MACnD;AACI,QAAI,KAAK,KAAK,IAAI,KAAK,GACnB,KAAK,KAAK,IAAI,KAAK;AAEvB,UAAM;AACN,UAAM;AAEN,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,oBAAoB,KAAe,MAAkB,QAA4B;AAC7E,QAAI,SAAS,KACR,OAAO,OAAK,EAAE,MAAM,IAAI,KAAK,EAAE,MAAM,IAAI,CAAC,EAC1C,KAAK,CAAC,GAAG,MAAM;AACZ,aAAO,KAAK,4BAA4B,KAAK,CAAC,IACxC,KAAK,4BAA4B,KAAK,CAAC;AAAA,IACjD,CAAC;AAEL,WAAO,OAAO,MAAM,GAAG,MAAM;AAAA,EACjC;AAAA,EAEA,mBAAmB,KAAe,MAA4B;AAC1D,WAAO,KAAK,oBAAoB,KAAK,MAAM,CAAC,EAAE;AAAA,EAClD;AAAA,EAEA,6BAA6B,KAAe,MAA0B;AAClE,QAAI,UAAU,KAAK,mBAAmB,KAAK,IAAI;AAE/C,WAAO,KAAK,4BAA4B,KAAK,OAAO;AAAA,EACxD;AAAA,EAEA,qBAAqB,KAAe,MAAkB,QAA4B;AAC9E,WAAO,KAAK,oBAAoB,KAAK,MAAM,KAAK,MAAM,EAAE,QAAQ,EAAE,MAAM,GAAG,MAAM;AAAA,EACrF;AAAA,EAEA,oBAAoB,KAAe,MAA4B;AAC3D,WAAO,KAAK,qBAAqB,KAAK,MAAM,CAAC,EAAE;AAAA,EACnD;AAAA,EAEA,oBAAoB,MAAY,UAA0B;AACtD,aAAS,YAAY,KAAK,KAAK,KAAK,UAAU,UAAU;AAAA,EAC5D;AAAA,EAEA,sBAAsB,MAAY,YAA4B;AAC1D,aAAS,cAAc,KAAK,OAAO,KAAK,UAAU,UAAU;AAAA,EAChE;AAAA,EAEA,wBAAwB,QAAkB,aAA+B;AACrE,QAAI,SAAS,YAAY,IAAI,OAAO;AACpC,QAAI,SAAS,YAAY,IAAI,OAAO;AAEpC,WAAO,KAAK,MAAM,QAAQ,MAAM;AAAA,EACpC;AAAA,EAEA,+BAA+B,QAAkB,aAAuB,UAA4B;AAChG,QAAI,QAAQ,KAAK,wBAAwB,QAAQ,WAAW;AAE5D,WAAO;AAAA,MACH,GAAG,OAAO,IAAK,WAAW,KAAK,IAAI,KAAK;AAAA,MACxC,GAAG,OAAO,IAAK,WAAW,KAAK,IAAI,KAAK;AAAA,IAC5C;AAAA,EACJ;AAEJ;AAAC;",
  "names": []
}
