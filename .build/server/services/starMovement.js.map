{
  "version": 3,
  "sources": ["../../../server/services/starMovement.ts"],
  "sourcesContent": ["import { Carrier } from \"./types/Carrier\";\nimport { Game } from \"./types/Game\";\nimport { Location } from \"./types/Location\";\nimport { Star } from \"./types/Star\";\nimport MapService from \"./map\";\nimport StarDistanceService from \"./starDistance\";\nimport SpecialistService from \"./specialist\";\nimport WaypointService from \"./waypoint\";\n\nexport default class starMovementService {\n    mapService: MapService;\n    starDistanceService: StarDistanceService;\n    specialistService: SpecialistService;\n    waypointService: WaypointService;\n\n    constructor(\n        mapService: MapService,\n        starDistanceService: StarDistanceService,\n        specialistService: SpecialistService,\n        waypointService: WaypointService\n    ) {\n        this.mapService = mapService;\n        this.starDistanceService = starDistanceService;\n        this.specialistService = specialistService;\n        this.waypointService = waypointService;\n    }\n\n    orbitGalaxy(game: Game) {\n        for (let star of game.galaxy.stars) {\n            this.orbitStar(game, star);\n        }\n\n        for (let carrier of game.galaxy.carriers) {\n            this.orbitCarrier(game, carrier);\n        }\n\n        for (let carrier of game.galaxy.carriers) {\n            this.waypointService.cullWaypointsByHyperspaceRange(game, carrier);\n        }\n    }\n\n    orbitStar(game: Game, star: Star) {\n        this.orbitObject(game, star);\n    }\n\n    orbitCarrier(game: Game, carrier: Carrier) {\n        this.orbitObject(game, carrier);\n    }\n\n    orbitObject(game: Game, objectWithLocation: Star | Carrier) {\n        objectWithLocation.location = this.getNextLocation(game, objectWithLocation);\n    }\n\n    getNextLocation(game: Game, objectWithLocation: Star | Carrier) {\n        if (game.settings.orbitalMechanics.enabled === 'disabled') {\n            throw new Error('Game settings disallow orbital mechanics.');\n        }\n\n        let galaxyCenter = game.constants.distances.galaxyCenterLocation!; // TODO: Refresh this constant(?) on rotation?\n\n        let speed = game.settings.orbitalMechanics.orbitSpeed;\n        let direction = 1; // TODO: Fuck it, clockwise everything.\n\n        // TODO: Get this logic checked by someone who knows what maths is.\n        let r = Math.sqrt(Math.pow(Math.abs(objectWithLocation.location.x), 2) + Math.pow(objectWithLocation.location.y, 2));\n        \n        let arcLength = 0;\n\n        if (r !== 0) {\n            arcLength = speed / r * 100;\n        }\n        \n        return this.rotate(\n            galaxyCenter.x, galaxyCenter.y,\n            objectWithLocation.location.x, objectWithLocation.location.y, \n            arcLength);\n    }\n\n    rotate(cx: number, cy: number, x: number, y: number, angle: number): Location {\n        let radians = (Math.PI / 180) * angle,\n            cos = Math.cos(radians),\n            sin = Math.sin(radians),\n            nx = (cos * (x - cx)) + (sin * (y - cy)) + cx,\n            ny = (cos * (y - cy)) - (sin * (x - cx)) + cy;\n\n        return {\n            x: nx,\n            y: ny\n        };\n    }\n\n    moveStellarEngines(game: Game) {\n        const beaconStars = game.galaxy.stars.filter(s => this.specialistService.getStarAttract(s));\n\n        if (beaconStars.length === 0) {\n            return;\n        }\n\n        const engineStars = game.galaxy.stars.filter(s => this.specialistService.getStarMovement(s));\n\n        for (let star of engineStars) {\n            let closestStar = this.starDistanceService.getClosestStar(star, beaconStars);\n            let distanceToClosestStar = this.starDistanceService.getDistanceBetweenStars(star, closestStar);\n            let starSpeed = this.specialistService.getStarMovementPerTick(star) * game.settings.specialGalaxy.carrierSpeed;\n\n            // This line makes sure the Stellar Engine never moves too close to the target star\n            starSpeed = distanceToClosestStar - starSpeed <= 0.5 * game.constants.distances.minDistanceBetweenStars ? distanceToClosestStar - 0.5 * game.constants.distances.minDistanceBetweenStars : starSpeed;\n\n            this.moveStarTowardsLocation(game, star, closestStar.location, starSpeed);\n        }\n\n        const nonEngineStars = game.galaxy.stars.filter(s => !this.specialistService.getStarMovement(s));\n\n        this.maintainDistance(game, engineStars, nonEngineStars)\n    }\n\n    maintainDistance(game: Game, movedStars: Star[], stars: Star[]) {\n        for (let star of movedStars) {\n            let nearbyStars = this.starDistanceService.getStarsWithinRadiusOfStar(star, stars, game.constants.distances.minDistanceBetweenStars);\n            let tooCloseStars = this.starDistanceService.getStarsWithinRadiusOfStar(star, stars, 0.49 * game.constants.distances.minDistanceBetweenStars);\n\n            if (tooCloseStars.length === 0) {\n                continue;\n            }\n\n            let k: number = 0\n\n            while(tooCloseStars.length !== 0 && k < 50) {\n                let closestStar = this.starDistanceService.getClosestStar(star, tooCloseStars);\n\n                this.shiftAway(game, star, closestStar, (0.501-k*0.01)*game.constants.distances.minDistanceBetweenStars);\n\n                tooCloseStars = this.starDistanceService.getStarsWithinRadiusOfStar(star, nearbyStars, (0.49 - k*0.01) * game.constants.distances.minDistanceBetweenStars);\n\n                k++;\n            }\n        }\n    }\n\n    shiftAway(game: Game, movingStar: Star, stationaryStar: Star, range: number) {\n        let shift = this.starDistanceService.getDistanceBetweenStars(movingStar, stationaryStar) - range;\n\n        this.moveStarTowardsLocation(game, movingStar, stationaryStar.location, shift);\n    }\n\n    moveStarTowardsLocation(game: Game, star: Star, location: Location, speed: number) {\n        // This function is used to move a star either towards a location with positive speed, or shift it away with negative speed.\n        if (star.location === location) {\n            return;\n        }\n\n        let dx = location.x - star.location.x,\n            dy = location.y - star.location.y;\n\n        let mag = Math.hypot(dx, dy);\n\n        let delta = {\n            x: speed * dx/mag,\n            y: speed * dy/mag\n        };\n\n        star.location.x += delta.x;\n        star.location.y += delta.y;\n\n        // Move all carriers that are in orbit of that star to the same location.\n        const carriersInOrbit = game.galaxy.carriers.filter(c => c.orbiting && c.orbiting.toString() === star._id.toString());\n\n        for (let carrier of carriersInOrbit) {\n            carrier.location = star.location;\n        }\n    }\n    \n};\n"],
  "mappings": "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",
  "names": []
}
