{
  "version": 3,
  "sources": ["../../../server/services/ship.ts"],
  "sourcesContent": ["import CarrierService from \"./carrier\";\nimport StarService from \"./star\";\nimport TechnologyService from \"./technology\";\nimport { Carrier } from \"./types/Carrier\";\nimport { DBObjectId } from \"./types/DBObjectId\";\nimport { Game } from \"./types/Game\";\nimport { Star } from \"./types/Star\";\n\nexport interface IPlayerPopulationCap {\n    shipsCurrent: number;\n    shipsMaximum: number;\n    difference: number;\n    isPopulationCapped: boolean;\n}\n\nexport default class ShipService {\n\n    starService: StarService;\n    technologyService: TechnologyService;\n    carrierService: CarrierService;\n\n    constructor(\n        starService: StarService,\n        technologyService: TechnologyService,\n        carrierService: CarrierService\n    ) {\n        this.starService = starService;\n        this.technologyService = technologyService;\n        this.carrierService = carrierService;\n    }\n\n    isPopulationRestricted(game: Game) {\n        return game.settings.player.populationCap.enabled === 'enabled';\n    }\n\n    calculateTotalShips(ownedStars: Star[], ownedCarriers: Carrier[]) {\n        return ownedStars.reduce((sum, s) => sum + s.ships!, 0)\n            + ownedCarriers.reduce((sum, c) => sum + c.ships!, 0);\n    }\n\n    calculatePopulationCap(game: Game, playerId: DBObjectId): IPlayerPopulationCap | null {\n        if (!this.isPopulationRestricted(game)) {\n            return null;\n        }\n\n        const playerStars = this.starService.listStarsOwnedByPlayer(game.galaxy.stars, playerId);\n        const playerCarriers = this.carrierService.listCarriersOwnedByPlayer(game.galaxy.carriers, playerId);\n\n        const shipsCurrent = this.calculateTotalShips(playerStars, playerCarriers);\n        const shipsMaximum = (game.settings.player.populationCap.shipsPerStar * 3) + (playerStars.length * game.settings.player.populationCap.shipsPerStar);\n        const difference = shipsMaximum - shipsCurrent;\n        const isPopulationCapped = shipsCurrent >= shipsMaximum;\n\n        return {\n            shipsCurrent,\n            shipsMaximum,\n            difference,\n            isPopulationCapped\n        }\n    }\n\n    produceShips(game: Game) {\n        const starsToProduce = game.galaxy.stars.filter(s => s.infrastructure.industry! > 0);\n\n        for (let i = 0; i < starsToProduce.length; i++) {\n            let star = starsToProduce[i];\n\n            if (star.ownedByPlayerId) {\n                // Note: We recalculate the pop cap every time we produce ships so that it is always up to date.\n                const cap = this.calculatePopulationCap(game, star.ownedByPlayerId!);\n\n                if (cap?.isPopulationCapped) {\n                    continue;\n                }\n\n                const productionShips = this.calculateStarShipProduction(game, star, cap);\n\n                // Increase the number of ships garrisoned by how many are manufactured this tick.\n                star.shipsActual! += productionShips;\n                star.ships = Math.floor(star.shipsActual!);\n            }\n        }\n    }\n\n    calculateStarShipProduction(game: Game, star: Star, populationCap: IPlayerPopulationCap | null) {\n        const starEffectiveTechs = this.technologyService.getStarEffectiveTechnologyLevels(game, star);\n\n        // If there is a population cap then we need to determine how many ships are allowed to be built at this star so we don't exceed pop cap\n        const maximumShipsAllowed = populationCap ? Math.max(populationCap.difference, 0) : null;\n        \n        let productionShips = this.calculateStarShipsByTicks(starEffectiveTechs.manufacturing, star.infrastructure.industry!, 1, game.settings.galaxy.productionTicks);\n\n        if (maximumShipsAllowed) {\n            productionShips = Math.min(productionShips, maximumShipsAllowed);\n        }\n\n        return productionShips;\n    }   \n\n    calculateStarShipsByTicks(techLevel: number, industryLevel: number, ticks: number = 1, productionTicks: number = 24) {\n        // A star produces Y*(X+5) ships every 24 ticks where X is your manufacturing tech level and Y is the amount of industry at a star.\n        return +((industryLevel * (techLevel + 5) / productionTicks) * ticks).toFixed(2);\n    }\n\n    calculateStarManufacturing(game: Game, star: Star) {\n        let effectiveTechs = this.technologyService.getStarEffectiveTechnologyLevels(game, star);\n        let ind = star.infrastructure?.industry ?? 0;\n\n        let manufacturing = this.calculateStarShipsByTicks(effectiveTechs.manufacturing, ind, 1, game.settings.galaxy.productionTicks);\n\n        return manufacturing;\n    }\n\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA,MAAO,YAA0B;AAAA,EAM7B,YACI,aACA,mBACA,gBACF;AACE,SAAK,cAAc;AACnB,SAAK,oBAAoB;AACzB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EAEA,uBAAuB,MAAY;AAC/B,WAAO,KAAK,SAAS,OAAO,cAAc,YAAY;AAAA,EAC1D;AAAA,EAEA,oBAAoB,YAAoB,eAA0B;AAC9D,WAAO,WAAW,OAAO,CAAC,KAAK,MAAM,MAAM,EAAE,OAAQ,CAAC,IAChD,cAAc,OAAO,CAAC,KAAK,MAAM,MAAM,EAAE,OAAQ,CAAC;AAAA,EAC5D;AAAA,EAEA,uBAAuB,MAAY,UAAmD;AAClF,QAAI,CAAC,KAAK,uBAAuB,IAAI,GAAG;AACpC,aAAO;AAAA,IACX;AAEA,UAAM,cAAc,KAAK,YAAY,uBAAuB,KAAK,OAAO,OAAO,QAAQ;AACvF,UAAM,iBAAiB,KAAK,eAAe,0BAA0B,KAAK,OAAO,UAAU,QAAQ;AAEnG,UAAM,eAAe,KAAK,oBAAoB,aAAa,cAAc;AACzE,UAAM,eAAgB,KAAK,SAAS,OAAO,cAAc,eAAe,IAAM,YAAY,SAAS,KAAK,SAAS,OAAO,cAAc;AACtI,UAAM,aAAa,eAAe;AAClC,UAAM,qBAAqB,gBAAgB;AAE3C,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,aAAa,MAAY;AACrB,UAAM,iBAAiB,KAAK,OAAO,MAAM,OAAO,OAAK,EAAE,eAAe,WAAY,CAAC;AAEnF,aAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC5C,UAAI,OAAO,eAAe;AAE1B,UAAI,KAAK,iBAAiB;AAEtB,cAAM,MAAM,KAAK,uBAAuB,MAAM,KAAK,eAAgB;AAEnE,YAAI,2BAAK,oBAAoB;AACzB;AAAA,QACJ;AAEA,cAAM,kBAAkB,KAAK,4BAA4B,MAAM,MAAM,GAAG;AAGxE,aAAK,eAAgB;AACrB,aAAK,QAAQ,KAAK,MAAM,KAAK,WAAY;AAAA,MAC7C;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,4BAA4B,MAAY,MAAY,eAA4C;AAC5F,UAAM,qBAAqB,KAAK,kBAAkB,iCAAiC,MAAM,IAAI;AAG7F,UAAM,sBAAsB,gBAAgB,KAAK,IAAI,cAAc,YAAY,CAAC,IAAI;AAEpF,QAAI,kBAAkB,KAAK,0BAA0B,mBAAmB,eAAe,KAAK,eAAe,UAAW,GAAG,KAAK,SAAS,OAAO,eAAe;AAE7J,QAAI,qBAAqB;AACrB,wBAAkB,KAAK,IAAI,iBAAiB,mBAAmB;AAAA,IACnE;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,0BAA0B,WAAmB,eAAuB,QAAgB,GAAG,kBAA0B,IAAI;AAEjH,WAAO,EAAG,iBAAiB,YAAY,KAAK,kBAAmB,OAAO,QAAQ,CAAC;AAAA,EACnF;AAAA,EAEA,2BAA2B,MAAY,MAAY;AAxGvD;AAyGQ,QAAI,iBAAiB,KAAK,kBAAkB,iCAAiC,MAAM,IAAI;AACvF,QAAI,QAAM,UAAK,mBAAL,mBAAqB,aAAY;AAE3C,QAAI,gBAAgB,KAAK,0BAA0B,eAAe,eAAe,KAAK,GAAG,KAAK,SAAS,OAAO,eAAe;AAE7H,WAAO;AAAA,EACX;AAEJ;AAAC;",
  "names": []
}
