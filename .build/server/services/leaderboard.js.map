{
  "version": 3,
  "sources": ["../../../server/services/leaderboard.ts"],
  "sourcesContent": ["import Repository from \"./repository\";\nimport { Game } from \"./types/Game\";\nimport { Leaderboard, LeaderboardPlayer, LeaderboardUser } from \"./types/Leaderboard\";\nimport { Player } from \"./types/Player\";\nimport { EloRatingChangeResult, GameRankingResult } from \"./types/Rating\";\nimport { User } from \"./types/User\";\nimport BadgeService from \"./badge\";\nimport GameService from \"./game\";\nimport GameStateService from \"./gameState\";\nimport GameTypeService from \"./gameType\";\nimport UserGuildService from \"./guildUser\";\nimport PlayerService from \"./player\";\nimport PlayerStatisticsService from \"./playerStatistics\";\nimport RatingService from \"./rating\";\nimport UserService from \"./user\";\nimport PlayerAfkService from \"./playerAfk\";\nimport UserLevelService from \"./userLevel\";\n\nconst moment = require('moment');\n\nexport default class LeaderboardService {\n    static GLOBALSORTERS = {\n        rank: {\n            fullKey: 'achievements.rank',\n            sort: {\n                'achievements.rank': -1,\n                'achievements.victories': -1,\n                'achievements.renown': -1\n            },\n            select: {\n                username: 1,\n                guildId: 1,\n                'roles.contributor': 1,\n                'roles.developer': 1,\n                'roles.communityManager': 1,\n                'roles.gameMaster': 1,\n                'achievements.level': 1,\n                'achievements.rank': 1,\n                'achievements.victories': 1,\n                'achievements.renown': 1,\n                'achievements.eloRating': 1\n            }\n        },\n        victories: {\n            fullKey: 'achievements.victories',\n            sort: {\n                'achievements.victories': -1,\n                'achievements.rank': -1,\n                'achievements.renown': -1\n            },\n            select: {\n                username: 1,\n                guildId: 1,\n                'roles.contributor': 1,\n                'roles.developer': 1,\n                'roles.communityManager': 1,\n                'roles.gameMaster': 1,\n                'achievements.level': 1,\n                'achievements.rank': 1,\n                'achievements.victories': 1,\n                'achievements.renown': 1,\n                'achievements.eloRating': 1\n            }\n        },\n        renown: {\n            fullKey: 'achievements.renown',\n            sort: {\n                'achievements.renown': -1,\n                'achievements.rank': -1,\n                'achievements.victories': -1\n            },\n            select: {\n                username: 1,\n                guildId: 1,\n                'roles.contributor': 1,\n                'roles.developer': 1,\n                'roles.communityManager': 1,\n                'roles.gameMaster': 1,\n                'achievements.level': 1,\n                'achievements.rank': 1,\n                'achievements.victories': 1,\n                'achievements.renown': 1,\n                'achievements.eloRating': 1\n            }\n        },\n        joined: {\n            fullKey: 'achievements.joined',\n            sort: {\n                'achievements.joined': -1\n            },\n            select: {\n                username: 1,\n                'achievements.joined': 1\n            }\n        },\n        completed: {\n            fullKey: 'achievements.completed',\n            sort: {\n                'achievements.completed': -1\n            },\n            select: {\n                username: 1,\n                'achievements.completed': 1\n            }\n        },\n        quit: {\n            fullKey: 'achievements.quit',\n            sort: {\n                'achievements.quit': -1\n            },\n            select: {\n                username: 1,\n                'achievements.quit': 1\n            }\n        },\n        defeated: {\n            fullKey: 'achievements.defeated',\n            sort: {\n                'achievements.defeated': -1\n            },\n            select: {\n                username: 1,\n                'achievements.defeated': 1\n            }\n        },\n        afk: {\n            fullKey: 'achievements.afk',\n            sort: {\n                'achievements.afk': -1\n            },\n            select: {\n                username: 1,\n                'achievements.afk': 1\n            }\n        },\n        \"ships-killed\": {\n            fullKey: 'achievements.combat.kills.ships',\n            sort: {\n                'achievements.combat.kills.ships': -1\n            },\n            select: {\n                username: 1,\n                'achievements.combat.kills.ships': 1\n            }\n        },\n        \"carriers-killed\": {\n            fullKey: 'achievements.combat.kills.carriers',\n            sort: {\n                'achievements.combat.kills.carriers': -1\n            },\n            select: {\n                username: 1,\n                'achievements.combat.kills.carriers': 1\n            }\n        },\n        \"specialists-killed\": {\n            fullKey: 'achievements.combat.kills.specialists',\n            sort: {\n                'achievements.combat.kills.specialists': -1\n            },\n            select: {\n                username: 1,\n                'achievements.combat.kills.specialists': 1\n            }\n        },\n        \"ships-lost\": {\n            fullKey: 'achievements.combat.losses.ships',\n            sort: {\n                'achievements.combat.losses.ships': -1\n            },\n            select: {\n                username: 1,\n                'achievements.combat.losses.ships': 1\n            }\n        },\n        \"carriers-lost\": {\n            fullKey: 'achievements.combat.losses.carriers',\n            sort: {\n                'achievements.combat.losses.carriers': -1\n            },\n            select: {\n                username: 1,\n                'achievements.combat.losses.carriers': 1\n            }\n        },\n        \"specialists-lost\": {\n            fullKey: 'achievements.combat.losses.specialists',\n            sort: {\n                'achievements.combat.losses.specialists': -1\n            },\n            select: {\n                username: 1,\n                'achievements.combat.losses.specialists': 1\n            }\n        },\n        \"stars-captured\": {\n            fullKey: 'achievements.combat.stars.captured',\n            sort: {\n                'achievements.combat.stars.captured': -1\n            },\n            select: {\n                username: 1,\n                'achievements.combat.stars.captured': 1\n            }\n        },\n        \"stars-lost\": {\n            fullKey: 'achievements.combat.stars.lost',\n            sort: {\n                'achievements.combat.stars.lost': -1\n            },\n            select: {\n                username: 1,\n                'achievements.combat.stars.lost': 1\n            }\n        },\n        \"home-stars-captured\": {\n            fullKey: 'achievements.combat.homeStars.captured',\n            sort: {\n                'achievements.combat.homeStars.captured': -1\n            },\n            select: {\n                username: 1,\n                'achievements.combat.homeStars.captured': 1\n            }\n        },\n        \"home-stars-lost\": {\n            fullKey: 'achievements.combat.homeStars.lost',\n            sort: {\n                'achievements.combat.homeStars.lost': -1\n            },\n            select: {\n                username: 1,\n                'achievements.combat.homeStars.lost': 1\n            }\n        },\n        \"economy\": {\n            fullKey: 'achievements.infrastructure.economy',\n            sort: {\n                'achievements.infrastructure.economy': -1\n            },\n            select: {\n                username: 1,\n                'achievements.infrastructure.economy': 1\n            }\n        },\n        \"industry\": {\n            fullKey: 'achievements.infrastructure.industry',\n            sort: {\n                'achievements.infrastructure.industry': -1\n            },\n            select: {\n                username: 1,\n                'achievements.infrastructure.industry': 1\n            }\n        },\n        \"science\": {\n            fullKey: 'achievements.infrastructure.science',\n            sort: {\n                'achievements.infrastructure.science': -1\n            },\n            select: {\n                username: 1,\n                'achievements.infrastructure.science': 1\n            }\n        },\n        \"warpgates-built\": {\n            fullKey: 'achievements.infrastructure.warpGates',\n            sort: {\n                'achievements.infrastructure.warpGates': -1\n            },\n            select: {\n                username: 1,\n                'achievements.infrastructure.warpGates': 1\n            }\n        },\n        \"warpgates-destroyed\": {\n            fullKey: 'achievements.infrastructure.warpGatesDestroyed',\n            sort: {\n                'achievements.infrastructure.warpGatesDestroyed': -1\n            },\n            select: {\n                username: 1,\n                'achievements.infrastructure.warpGatesDestroyed': 1\n            }\n        },\n        \"carriers-built\": {\n            fullKey: 'achievements.infrastructure.carriers',\n            sort: {\n                'achievements.infrastructure.carriers': -1\n            },\n            select: {\n                username: 1,\n                'achievements.infrastructure.carriers': 1\n            }\n        },\n        \"specialists-hired\": {\n            fullKey: 'achievements.infrastructure.specialistsHired',\n            sort: {\n                'achievements.infrastructure.specialistsHired': -1\n            },\n            select: {\n                username: 1,\n                'achievements.infrastructure.specialistsHired': 1\n            }\n        },\n        \"scanning\": {\n            fullKey: 'achievements.research.scanning',\n            sort: {\n                'achievements.research.scanning': -1\n            },\n            select: {\n                username: 1,\n                'achievements.research.scanning': 1\n            }\n        },\n        \"hyperspace\": {\n            fullKey: 'achievements.research.hyperspace',\n            sort: {\n                'achievements.research.hyperspace': -1\n            },\n            select: {\n                username: 1,\n                'achievements.research.hyperspace': 1\n            }\n        },\n        \"terraforming\": {\n            fullKey: 'achievements.research.terraforming',\n            sort: {\n                'achievements.research.terraforming': -1\n            },\n            select: {\n                username: 1,\n                'achievements.research.terraforming': 1\n            }\n        },\n        \"experimentation\": {\n            fullKey: 'achievements.research.experimentation',\n            sort: {\n                'achievements.research.experimentation': -1\n            },\n            select: {\n                username: 1,\n                'achievements.research.experimentation': 1\n            }\n        },\n        \"weapons\": {\n            fullKey: 'achievements.research.weapons',\n            sort: {\n                'achievements.research.weapons': -1\n            },\n            select: {\n                username: 1,\n                'achievements.research.weapons': 1\n            }\n        },\n        \"banking\": {\n            fullKey: 'achievements.research.banking',\n            sort: {\n                'achievements.research.banking': -1\n            },\n            select: {\n                username: 1,\n                'achievements.research.banking': 1\n            }\n        },\n        \"manufacturing\": {\n            fullKey: 'achievements.research.manufacturing',\n            sort: {\n                'achievements.research.manufacturing': -1\n            },\n            select: {\n                username: 1,\n                'achievements.research.manufacturing': 1\n            }\n        },\n        \"specialists\": {\n            fullKey: 'achievements.research.specialists',\n            sort: {\n                'achievements.research.specialists': -1\n            },\n            select: {\n                username: 1,\n                'achievements.research.specialists': 1\n            }\n        },\n        \"credits-sent\": {\n            fullKey: 'achievements.trade.creditsSent',\n            sort: {\n                'achievements.trade.creditsSent': -1\n            },\n            select: {\n                username: 1,\n                'achievements.trade.creditsSent': 1\n            }\n        },\n        \"credits-received\": {\n            fullKey: 'achievements.trade.creditsReceived',\n            sort: {\n                'achievements.trade.creditsReceived': -1\n            },\n            select: {\n                username: 1,\n                'achievements.trade.creditsReceived': 1\n            }\n        },\n        \"technologies-sent\": {\n            fullKey: 'achievements.trade.technologySent',\n            sort: {\n                'achievements.trade.technologySent': -1\n            },\n            select: {\n                username: 1,\n                'achievements.trade.technologySent': 1\n            }\n        },\n        \"technologies-received\": {\n            fullKey: 'achievements.trade.technologyReceived',\n            sort: {\n                'achievements.trade.technologyReceived': -1\n            },\n            select: {\n                username: 1,\n                'achievements.trade.technologyReceived': 1\n            }\n        },\n        \"ships-gifted\": {\n            fullKey: 'achievements.trade.giftsSent',\n            sort: {\n                'achievements.trade.giftsSent': -1\n            },\n            select: {\n                username: 1,\n                'achievements.trade.giftsSent': 1\n            }\n        },\n        \"ships-received\": {\n            fullKey: 'achievements.trade.giftsReceived',\n            sort: {\n                'achievements.trade.giftsReceived': -1\n            },\n            select: {\n                username: 1,\n                'achievements.trade.giftsReceived': 1\n            }\n        },\n        \"renown-sent\": {\n            fullKey: 'achievements.trade.renownSent',\n            sort: {\n                'achievements.trade.renownSent': -1\n            },\n            select: {\n                username: 1,\n                'achievements.trade.renownSent': 1\n            }\n        },\n        \"elo-rating\": {\n            fullKey: 'achievements.eloRating',\n            query: {\n                'achievements.eloRating': { $ne: null }\n            },\n            sort: {\n                'achievements.eloRating': -1,\n                'achievements.rank': -1,\n                'achievements.victories1v1': -1,\n                'achievements.renown': -1\n            },\n            select: {\n                username: 1,\n                guildId: 1,\n                'roles.contributor': 1,\n                'roles.developer': 1,\n                'roles.communityManager': 1,\n                'roles.gameMaster': 1,\n                'achievements.level': 1,\n                'achievements.rank': 1,\n                'achievements.victories': 1,\n                'achievements.victories1v1': 1,\n                'achievements.defeated1v1': 1,\n                'achievements.renown': 1,\n                'achievements.eloRating': 1\n            }\n        }\n    }\n\n    static LOCALSORTERS = {\n        stars: 'stats.totalStars',\n        carriers: 'stats.totalCarriers',\n        ships: 'stats.totalShips',\n        economy: 'stats.totalEconomy',\n        industry: 'stats.totalIndustry',\n        science: 'stats.totalScience',\n        newShips: 'stats.newShips',\n        warpgates: 'stats.warpgates',\n        starSpecialists: 'stats.totalStarSpecialists',\n        carrierSpecialists: 'stats.totalCarrierSpecialists',\n        totalSpecialists: 'stats.totalSpecialists',\n        scanning: 'player.research.scanning.level',\n        hyperspace: 'player.research.hyperspace.level',\n        terraforming: 'player.research.terraforming.level',\n        experimentation: 'player.research.experimentation.level',\n        weapons: 'player.research.weapons.level',\n        banking: 'player.research.banking.level',\n        manufacturing: 'player.research.manufacturing.level',\n        specialists: 'player.research.specialists.level'\n    }\n\n    userRepo: Repository<User>;\n    userService: UserService;\n    playerService: PlayerService;\n    playerAfkService: PlayerAfkService;\n    userLevelService: UserLevelService;\n    guildUserService: UserGuildService;\n    ratingService: RatingService;\n    gameService: GameService;\n    gameTypeService: GameTypeService;\n    gameStateService: GameStateService;\n    badgeService: BadgeService;\n    playerStatisticsService: PlayerStatisticsService;\n\n    constructor(\n        userRepo: Repository<User>,\n        userService: UserService,\n        playerService: PlayerService,\n        playerAfkService: PlayerAfkService,\n        userLevelService: UserLevelService,\n        guildUserService: UserGuildService,\n        ratingService: RatingService,\n        gameService: GameService,\n        gameTypeService: GameTypeService,\n        gameStateService: GameStateService,\n        badgeService: BadgeService,\n        playerStatisticsService: PlayerStatisticsService\n    ) {\n        this.userRepo = userRepo;\n        this.userService = userService;\n        this.playerService = playerService;\n        this.playerAfkService = playerAfkService;\n        this.userLevelService = userLevelService;\n        this.guildUserService = guildUserService;\n        this.ratingService = ratingService;\n        this.gameService = gameService;\n        this.gameTypeService = gameTypeService;\n        this.gameStateService = gameStateService;\n        this.badgeService = badgeService;\n        this.playerStatisticsService = playerStatisticsService;\n    }\n\n    async getUserLeaderboard(limit: number | null, sortingKey: string, skip: number = 0) {\n        const sorter = LeaderboardService.GLOBALSORTERS[sortingKey] || LeaderboardService.GLOBALSORTERS['rank'];\n\n        let leaderboard = await this.userRepo\n            .find(\n                sorter.query || {},\n                sorter.select,\n                sorter.sort,\n                limit,\n                skip\n            );\n\n        let userIds = leaderboard.map(x => x._id);\n        let guildUsers = await this.guildUserService.listUsersWithGuildTags(userIds);\n\n        let guildUserPositions: LeaderboardUser[] = [];\n\n        for (let i = 0; i < leaderboard.length; i++) {\n            let user = leaderboard[i];\n\n            let position = i + 1;\n            let guild = guildUsers.find(x => x._id.toString() === user._id.toString())?.guild || null;\n\n            guildUserPositions.push({\n                ...user,\n                position,\n                guild\n            });\n        }\n\n        let totalPlayers = await this.userRepo.countAll();\n\n        return {\n            totalPlayers,\n            leaderboard: guildUserPositions,\n            sorter\n        };\n    }\n\n    getGameLeaderboard(game: Game, sortingKey?: string): Leaderboard {\n        let SORTERS = LeaderboardService.LOCALSORTERS;\n\n        let kingOfTheHillPlayer: Player | null = null;\n\n        if (this.gameTypeService.isKingOfTheHillMode(game)) {\n            kingOfTheHillPlayer = this.playerService.getKingOfTheHillPlayer(game);\n        }\n\n        let playerStats = game.galaxy.players.map(p => {\n            let isKingOfTheHill = kingOfTheHillPlayer != null && p._id.toString() === kingOfTheHillPlayer._id.toString();\n            let stats = p.stats ?? this.playerStatisticsService.getStats(game, p);\n\n            return {\n                player: p,\n                isKingOfTheHill,\n                stats\n            };\n        });\n\n        const getNestedObject = (nestedObj, pathArr: string[]) => {\n            return pathArr.reduce((obj, key) =>\n                (obj && obj[key] !== 'undefined') ? obj[key] : -1, nestedObj)\n        }\n\n        function sortPlayers(a, b) {\n            if (sortingKey) {\n                if (getNestedObject(a, SORTERS[sortingKey].split('.')) > getNestedObject(b, SORTERS[sortingKey].split('.'))) return -1;\n                if (getNestedObject(a, SORTERS[sortingKey].split('.')) < getNestedObject(b, SORTERS[sortingKey].split('.'))) return 1;\n            }\n\n            // If its a conquest and home star victory then sort by home stars first, then by total stars.\n            const isHomeStarVictory = game.settings.general.mode === 'conquest' && game.settings.conquest.victoryCondition === 'homeStarPercentage';\n\n            if (isHomeStarVictory) {\n                if (a.stats.totalHomeStars > b.stats.totalHomeStars) return -1;\n                if (a.stats.totalHomeStars < b.stats.totalHomeStars) return 1;\n            }\n\n            if (game.settings.general.mode === 'kingOfTheHill' && a.isKingOfTheHill !== b.isKingOfTheHill) {\n                if (a.isKingOfTheHill) return -1;\n                if (b.isKingOfTheHill) return 1;\n            }\n\n            // Sort by total stars descending\n            if (a.stats.totalStars > b.stats.totalStars) return -1;\n            if (a.stats.totalStars < b.stats.totalStars) return 1;\n\n            // Then by total ships descending\n            if (a.stats.totalShips > b.stats.totalShips) return -1;\n            if (a.stats.totalShips < b.stats.totalShips) return 1;\n\n            // Then by total carriers descending\n            if (a.stats.totalCarriers > b.stats.totalCarriers) return -1;\n            if (a.stats.totalCarriers < b.stats.totalCarriers) return 1;\n\n            // Then by defeated date descending\n            if (a.player.defeated && b.player.defeated) {\n                if (moment(a.player.defeatedDate) > moment(b.player.defeatedDate)) return -1;\n                if (moment(a.player.defeatedDate) < moment(b.player.defeatedDate)) return 1;\n            }\n\n            // Sort defeated players last.\n            return (a.player.defeated === b.player.defeated) ? 0 : a.player.defeated ? 1 : -1;\n        }\n\n        // Sort the undefeated players first.\n        let undefeatedLeaderboard = playerStats\n            .filter(x => !x.player.defeated)\n            .sort(sortPlayers);\n\n        // Sort the defeated players next.\n        let defeatedLeaderboard = playerStats\n            .filter(x => x.player.defeated)\n            .sort(sortPlayers);\n\n        // Join both sorted arrays together to produce the leaderboard.\n        let leaderboard = undefeatedLeaderboard.concat(defeatedLeaderboard);\n\n        return {\n            leaderboard,\n            fullKey: sortingKey ? SORTERS[sortingKey] : null\n        };\n    }\n\n    getGameLeaderboardPosition(game: Game, player: Player) {\n        if (game.state.leaderboard == null) {\n            return null;\n        }\n\n        return game.state.leaderboard.findIndex(l => l.toString() === player._id.toString()) + 1;\n    }\n\n    addGameRankings(game: Game, gameUsers: User[], leaderboard: LeaderboardPlayer[]): GameRankingResult {\n        let result: GameRankingResult = {\n            ranks: [],\n            eloRating: null\n        };\n\n        let leaderboardPlayers = leaderboard.map(x => x.player);\n\n        for (let i = 0; i < leaderboardPlayers.length; i++) {\n            let player = leaderboardPlayers[i];\n\n            let user = gameUsers.find(u => player.userId && u._id.toString() === player.userId.toString());\n\n            // Double check user isn't deleted.\n            if (!user) {\n                continue;\n            }\n\n            // Add to rank:\n            // (Number of players / 2) - index of leaderboard\n            // But 1st place will receive rank equal to the total number of players.\n            // So 1st place of 4 players will receive 4 rank\n            // 2nd place will receive 1 rank (4 / 2 - 1)\n            // 3rd place will receive 0 rank (4 / 2 - 2)\n            // 4th place will receive -1 rank (4 / 2 - 3)\n\n            let rankIncrease = 0;\n\n            if (i == 0) {\n                rankIncrease = leaderboard.length; // Note: Using leaderboard length as this includes ALL players (including afk)\n            }\n            else if (game.settings.general.awardRankTo === 'all') {\n                rankIncrease = Math.round(leaderboard.length / 2 - i);\n            }\n\n            // For AFK players, do not award any positive rank\n            // and make sure they are deducted at least 1 rank.\n            if (player.afk) {\n                rankIncrease = Math.min(rankIncrease, -1);\n            }\n            // However if they are active and they have\n            // filled an AFK slot then reward the player.\n            // Award extra rank (at least 0) and do not allow a decrease in rank.\n            else if (player.hasFilledAfkSlot) {\n                rankIncrease = Math.max(Math.round(rankIncrease * 1.5), 0);\n            }\n\n            // For special game modes, award x2 positive rank.\n            if (rankIncrease > 0 && this.gameTypeService.isSpecialGameMode(game)) {\n                rankIncrease *= 2;\n            }\n            \n            // Apply any additional rank multiplier at the end.\n            rankIncrease *= game.constants.player.rankRewardMultiplier;\n\n            let currentRank = user.achievements.rank;\n            let newRank = Math.max(user.achievements.rank + rankIncrease, 0); // Cannot go less than 0.\n\n            user.achievements.rank = newRank;\n            user.achievements.level = this.userLevelService.getByRankPoints(newRank).id;\n\n            // Append the rank adjustment to the results.\n            result.ranks.push({\n                playerId: player._id,\n                current: currentRank,\n                new: newRank\n            });\n        }\n\n        result.eloRating = this.addUserRatingCheck(game, gameUsers);\n\n        return result;\n    }\n\n    incrementGameWinnerAchievements(game: Game, gameUsers: User[], winner: Player, awardCredits: boolean) {\n        let user = gameUsers.find(u => winner.userId && u._id.toString() === winner.userId.toString());\n\n        // Double check user isn't deleted.\n        if (!user) {\n            return;\n        }\n\n        user.achievements.victories++; // Increase the winner's victory count\n        \n        // Note: We don't really care if its official or not, award a badge for any 32p games.\n        if (this.gameTypeService.is32PlayerGame(game)) {\n            this.badgeService.awardBadgeForUserVictor32PlayerGame(user);\n        }\n\n        if (this.gameTypeService.isSpecialGameMode(game)) {\n            this.badgeService.awardBadgeForUserVictorySpecialGame(user, game);\n        }\n\n        // Give the winner a galactic credit providing it isn't a 1v1.\n        if (!this.gameTypeService.is1v1Game(game) && awardCredits) {\n            user.credits++;\n        }\n    }\n\n    addUserRatingCheck(game: Game, gameUsers: User[]): EloRatingChangeResult | null {\n        if (!this.gameTypeService.is1v1Game(game)) {\n            return null;\n        }\n        \n        let winningPlayer: Player = game.galaxy.players.find(p => p._id.toString() === game.state.winner!.toString())!;\n        let losingPlayer: Player = game.galaxy.players.find(p => p._id.toString() !== game.state.winner!.toString())!;\n\n        let winningUser: User = gameUsers.find(u => winningPlayer.userId && u._id.toString() === winningPlayer.userId.toString())!;\n        let losingUser: User = gameUsers.find(u => losingPlayer.userId && u._id.toString() === losingPlayer.userId.toString())!;\n\n        let winningUserOldRating = 1200;\n        let losingUserOldRating = 1200;\n\n        if (winningUser) {\n            winningUserOldRating = winningUser.achievements.eloRating || 1200;\n\n            winningUser.achievements.victories1v1++;\n        }\n\n        if (losingUser) {\n            losingUserOldRating = losingUser.achievements.eloRating || 1200;\n\n            losingUser.achievements.defeated1v1++;\n        }\n\n        this.ratingService.recalculateEloRating(winningUser, losingUser, true);\n\n        return {\n            winner: {\n                _id: winningPlayer._id,\n                newRating: winningUser ? winningUser.achievements.eloRating! : 1200,\n                oldRating: winningUserOldRating\n            },\n            loser: {\n                _id: losingPlayer._id,\n                newRating: losingUser ? losingUser.achievements.eloRating! : 1200,\n                oldRating: losingUserOldRating\n            }\n        };\n    }\n\n    getGameWinner(game: Game, leaderboard: LeaderboardPlayer[]): Player | null {\n        let isKingOfTheHillMode = this.gameTypeService.isKingOfTheHillMode(game);\n        let isAllUndefeatedPlayersReadyToQuit = this.gameService.isAllUndefeatedPlayersReadyToQuit(game);\n\n        if (isAllUndefeatedPlayersReadyToQuit) {\n            if (isKingOfTheHillMode) {\n                return this.playerService.getKingOfTheHillPlayer(game) || this.getFirstPlacePlayer(leaderboard);\n            }\n\n            return this.getFirstPlacePlayer(leaderboard);\n        }\n\n        if (this.gameTypeService.isConquestMode(game)) {\n            let starWinner = this.getStarCountWinner(game, leaderboard);\n\n            if (starWinner) {\n                return starWinner;\n            }\n        }\n\n        if (this.gameStateService.isCountingDownToEnd(game) && this.gameStateService.hasReachedCountdownEnd(game)) {\n            if (isKingOfTheHillMode) {\n                return this.playerService.getKingOfTheHillPlayer(game) || this.getFirstPlacePlayer(leaderboard);\n            }\n\n            return this.getFirstPlacePlayer(leaderboard);\n        }\n\n        let lastManStanding = this.getLastManStanding(game, leaderboard);\n\n        if (lastManStanding) {\n            return lastManStanding;\n        }\n\n        // TODO: Hardcoded limit to games, 10000 ticks?\n\n        return null;\n    }\n\n    getStarCountWinner(game: Game, leaderboard: LeaderboardPlayer[]): Player | null {\n        // There could be more than one player who has reached\n        // the number of stars required at the same time.\n        // In this case we pick the player who has the most ships.\n        // If that's equal, then pick the player who has the most carriers.\n\n        // If conquest and home star percentage then use the totalHomeStars as the sort\n        // All other cases use totalStars\n        let totalStarsKey = this.gameTypeService.isConquestMode(game)\n            && game.settings.conquest.victoryCondition === 'homeStarPercentage' ? 'totalHomeStars' : 'totalStars';\n\n        // Firstly, check if ANYONE has reached the star limit, if so we need to end the game.\n        let starWinners = leaderboard.filter(p => p.stats[totalStarsKey] >= game.state.starsForVictory);\n\n        // If someone has reached the star limit then pick the first player who is not defeated.\n        if (starWinners.length) {\n            return leaderboard.filter(p => !p.player.defeated).map(p => p.player)[0];\n        }\n\n        return null;\n    }\n\n    getLastManStanding(game: Game, leaderboard: LeaderboardPlayer[]): Player | null {\n        let undefeatedPlayers = game.galaxy.players.filter(p => !p.defeated);\n\n        if (undefeatedPlayers.length === 1) {\n            return undefeatedPlayers[0];\n        }\n\n        // If all players have been defeated somehow then pick the player\n        // who is currently in first place.\n        let defeatedPlayers = game.galaxy.players.filter(p => p.defeated);\n\n        if (defeatedPlayers.length === game.settings.general.playerLimit) {\n            return this.getFirstPlacePlayer(leaderboard);\n        }\n\n        // If the remaining players alive are all AI then pick the player in 1st.\n        // Note: Don't include pseudo afk, only legit actual afk players.\n        let undefeatedAI = undefeatedPlayers.filter(p => this.playerAfkService.isAIControlled(game, p, false));\n        \n        if (undefeatedAI.length === undefeatedPlayers.length) {\n            return this.getFirstPlacePlayer(leaderboard);\n        }\n\n        return null;\n    }\n\n    getFirstPlacePlayer(leaderboard: LeaderboardPlayer[]): Player {\n        return leaderboard[0].player;\n    }\n\n    markNonAFKPlayersAsEstablishedPlayers(game: Game, gameUsers: User[]) {\n        // Any player who isn't afk in an NPG is now considered an established player.\n        for (let player of game.galaxy.players) {\n            let user = gameUsers.find(u => player.userId && u._id.toString() === player.userId.toString());\n\n            if (!user) {\n                continue;\n            }\n\n            if (!player.afk) {\n                user.isEstablishedPlayer = true;\n            }\n        }\n    }\n\n    incrementPlayersCompletedAchievement(game: Game, gameUsers: User[]) {\n        for (let player of game.galaxy.players.filter(p => !p.defeated && !p.afk)) {\n            let user = gameUsers.find(u => player.userId && u._id.toString() === player.userId.toString());\n\n            if (!user) {\n                continue;\n            }\n\n            user.achievements.completed++;\n        }\n    }\n\n};\n"],
  "mappings": "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",
  "names": []
}
