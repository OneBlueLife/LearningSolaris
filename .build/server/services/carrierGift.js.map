{
  "version": 3,
  "sources": ["../../../server/services/carrierGift.ts"],
  "sourcesContent": ["const mongoose = require('mongoose');\nimport { DBObjectId } from './types/DBObjectId';\nimport ValidationError from '../errors/validation';\nimport Repository from './repository';\nimport { Carrier } from './types/Carrier';\nimport { Game } from './types/Game';\nimport { Player } from './types/Player';\nimport { Star } from './types/Star';\nimport { User } from './types/User';\nimport DiplomacyService from './diplomacy';\nconst EventEmitter = require('events');\n\nexport const CarrierGiftServiceEvents = {\n    onPlayerGiftReceived: 'onPlayerGiftReceived',\n    onPlayerGiftSent: 'onPlayerGiftSent'\n}\n\nexport default class CarrierGiftService extends EventEmitter {\n    gameRepo: Repository<Game>;\n    diplomacyService: DiplomacyService;\n\n    constructor(\n        gameRepo: Repository<Game>,\n        diplomacyService: DiplomacyService\n    ) {\n        super();\n\n        this.gameRepo = gameRepo;\n        this.diplomacyService = diplomacyService;\n    }\n\n    async convertToGift(game: Game, player: Player, carrierId: DBObjectId) {\n        let carrier = game.galaxy.carriers.find(c => c._id.toString() === carrierId.toString())!;\n\n        if (game.settings.specialGalaxy.giftCarriers === 'disabled') {\n            throw new ValidationError(`Gifting carriers has been disabled in this game.`);\n        }\n\n        if (carrier.ownedByPlayerId!.toString() !== player._id.toString()) {\n            throw new ValidationError(`Cannot convert carrier into a gift, you do not own this carrier.`);\n        }\n\n        if (carrier.isGift) {\n            throw new ValidationError(`The carrier has already been converted into a gift.`);\n        }\n\n        // Convert the carrier into a gift.\n        carrier.isGift = true;\n        carrier.waypointsLooped = false;\n\n        await this.gameRepo.updateOne({\n            _id: game._id,\n            'galaxy.carriers._id': carrier._id\n        }, {\n            $set: {\n                'galaxy.carriers.$.isGift': true,\n                'galaxy.carriers.$.waypointsLooped': false,\n            }\n        });\n    }\n\n    async transferGift(game: Game, gameUsers: User[], star: Star, carrier: Carrier) {\n        if (!star.ownedByPlayerId) {\n            throw new ValidationError(`Cannot transfer ownership of a gifted carrier to this star, no player owns the star.`);\n        }\n\n        let starPlayer = game.galaxy.players.find(p => star.ownedByPlayerId && p._id.toString() === star.ownedByPlayerId.toString())!;\n        let starUser = gameUsers.find(u => starPlayer.userId && u._id.toString() === starPlayer.userId.toString());\n\n        let carrierPlayer = game.galaxy.players.find(p => p._id.toString() === carrier.ownedByPlayerId!.toString())!;\n        let carrierUser = gameUsers.find(u => carrierPlayer.userId && u._id.toString() === carrierPlayer.userId.toString());\n\n        const isSamePlayer = starPlayer._id.toString() === carrierPlayer._id.toString();\n\n        if (!isSamePlayer) {\n            // If the star is not owned by the same player then increment player achievements.\n            if (starUser && !starPlayer.defeated) {\n                starUser.achievements.trade.giftsReceived += carrier.ships!;\n            }\n    \n            if (carrierUser && !carrierPlayer.defeated) {\n                carrierUser.achievements.trade.giftsSent += carrier.ships!;\n            }\n\n            carrier.ownedByPlayerId = star.ownedByPlayerId; // Transfer ownership\n            \n            // Remove the specialist. Note that this is required to get around an exploit where players can use a gift just before a battle to weaken the opponent.\n            if (!this.diplomacyService.isFormalAlliancesEnabled(game) || !this.diplomacyService.isDiplomaticStatusBetweenPlayersAllied(game, [carrierPlayer._id, starPlayer._id])) {\n                carrier.specialistId = null;\n            }\n            \n            let eventObject = {\n                gameId: game._id,\n                gameTick: game.state.tick,\n                fromPlayer: carrierPlayer,\n                toPlayer: starPlayer,\n                carrier,\n                star\n            };\n    \n            this.emit(CarrierGiftServiceEvents.onPlayerGiftReceived, eventObject);\n            this.emit(CarrierGiftServiceEvents.onPlayerGiftSent, eventObject);\n\n            carrier.isGift = false;\n        } else if (!carrier.waypoints.length) {\n            // Note: If the carrier has landed at a star the player already owns and\n            // there are still waypoints then this means the carrier is passing\n            // through owned territory and therefore should not be ungifted.\n            // We should ungift in owned territory only if there are no remaining waypoints.\n            carrier.isGift = false;\n        }\n    }\n\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,wBAA4B;AAF5B,MAAM,WAAW,QAAQ,UAAU;AAUnC,MAAM,eAAe,QAAQ,QAAQ;AAE9B,MAAM,2BAA2B;AAAA,EACpC,sBAAsB;AAAA,EACtB,kBAAkB;AACtB;AAEA,MAAO,2BAAyC,aAAa;AAAA,EAIzD,YACI,UACA,kBACF;AACE,UAAM;AAEN,SAAK,WAAW;AAChB,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EAEA,MAAM,cAAc,MAAY,QAAgB,WAAuB;AACnE,QAAI,UAAU,KAAK,OAAO,SAAS,KAAK,OAAK,EAAE,IAAI,SAAS,MAAM,UAAU,SAAS,CAAC;AAEtF,QAAI,KAAK,SAAS,cAAc,iBAAiB,YAAY;AACzD,YAAM,IAAI,kBAAAA,QAAgB,kDAAkD;AAAA,IAChF;AAEA,QAAI,QAAQ,gBAAiB,SAAS,MAAM,OAAO,IAAI,SAAS,GAAG;AAC/D,YAAM,IAAI,kBAAAA,QAAgB,kEAAkE;AAAA,IAChG;AAEA,QAAI,QAAQ,QAAQ;AAChB,YAAM,IAAI,kBAAAA,QAAgB,qDAAqD;AAAA,IACnF;AAGA,YAAQ,SAAS;AACjB,YAAQ,kBAAkB;AAE1B,UAAM,KAAK,SAAS,UAAU;AAAA,MAC1B,KAAK,KAAK;AAAA,MACV,uBAAuB,QAAQ;AAAA,IACnC,GAAG;AAAA,MACC,MAAM;AAAA,QACF,4BAA4B;AAAA,QAC5B,qCAAqC;AAAA,MACzC;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,aAAa,MAAY,WAAmB,MAAY,SAAkB;AAC5E,QAAI,CAAC,KAAK,iBAAiB;AACvB,YAAM,IAAI,kBAAAA,QAAgB,sFAAsF;AAAA,IACpH;AAEA,QAAI,aAAa,KAAK,OAAO,QAAQ,KAAK,OAAK,KAAK,mBAAmB,EAAE,IAAI,SAAS,MAAM,KAAK,gBAAgB,SAAS,CAAC;AAC3H,QAAI,WAAW,UAAU,KAAK,OAAK,WAAW,UAAU,EAAE,IAAI,SAAS,MAAM,WAAW,OAAO,SAAS,CAAC;AAEzG,QAAI,gBAAgB,KAAK,OAAO,QAAQ,KAAK,OAAK,EAAE,IAAI,SAAS,MAAM,QAAQ,gBAAiB,SAAS,CAAC;AAC1G,QAAI,cAAc,UAAU,KAAK,OAAK,cAAc,UAAU,EAAE,IAAI,SAAS,MAAM,cAAc,OAAO,SAAS,CAAC;AAElH,UAAM,eAAe,WAAW,IAAI,SAAS,MAAM,cAAc,IAAI,SAAS;AAE9E,QAAI,CAAC,cAAc;AAEf,UAAI,YAAY,CAAC,WAAW,UAAU;AAClC,iBAAS,aAAa,MAAM,iBAAiB,QAAQ;AAAA,MACzD;AAEA,UAAI,eAAe,CAAC,cAAc,UAAU;AACxC,oBAAY,aAAa,MAAM,aAAa,QAAQ;AAAA,MACxD;AAEA,cAAQ,kBAAkB,KAAK;AAG/B,UAAI,CAAC,KAAK,iBAAiB,yBAAyB,IAAI,KAAK,CAAC,KAAK,iBAAiB,uCAAuC,MAAM,CAAC,cAAc,KAAK,WAAW,GAAG,CAAC,GAAG;AACnK,gBAAQ,eAAe;AAAA,MAC3B;AAEA,UAAI,cAAc;AAAA,QACd,QAAQ,KAAK;AAAA,QACb,UAAU,KAAK,MAAM;AAAA,QACrB,YAAY;AAAA,QACZ,UAAU;AAAA,QACV;AAAA,QACA;AAAA,MACJ;AAEA,WAAK,KAAK,yBAAyB,sBAAsB,WAAW;AACpE,WAAK,KAAK,yBAAyB,kBAAkB,WAAW;AAEhE,cAAQ,SAAS;AAAA,IACrB,WAAW,CAAC,QAAQ,UAAU,QAAQ;AAKlC,cAAQ,SAAS;AAAA,IACrB;AAAA,EACJ;AAEJ;AAAC;",
  "names": ["ValidationError"]
}
