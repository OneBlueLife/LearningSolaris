{
  "version": 3,
  "sources": ["../../../server/services/starDistance.ts"],
  "sourcesContent": ["import { DBObjectId } from \"./types/DBObjectId\";\nimport { Game } from \"./types/Game\";\nimport { Location } from \"./types/Location\";\nimport { MapObject } from \"./types/Map\";\nimport { Player } from \"./types/Player\";\nimport { Star } from \"./types/Star\";\nimport DistanceService from \"./distance\";\n\nexport default class StarDistanceService {\n    distanceService: DistanceService;\n\n    constructor(\n        distanceService: DistanceService\n    ) {\n        this.distanceService = distanceService;\n    }\n\n    getDistanceBetweenStars(star1: MapObject, star2: MapObject) {\n        return this.distanceService.getDistanceBetweenLocations(star1.location, star2.location);\n    }\n\n    getDistanceBetweenStarAndLocation(star: Star, loc: Location){\n        return this.distanceService.getDistanceBetweenLocations(star.location, loc);\n    }\n\n    getClosestStar(star: Star, stars: Star[]) {\n        return this.getClosestStars(star, stars, 1)[0];\n    }\n\n    getDistanceToClosestStar(star: Star, stars: Star[]) {\n        let closest = this.getClosestStar(star, stars);\n\n        return this.distanceService.getDistanceBetweenLocations(star.location, closest.location);\n    }\n\n    getClosestStars(star: Star, stars: Star[], amount: number) {\n        let sorted = stars\n            .filter(s => s._id !== star._id) // Exclude the current star.\n            .sort((a, b) => {\n                return this.getDistanceBetweenStars(star, a)\n                    - this.getDistanceBetweenStars(star, b);\n            });\n        \n        return sorted.slice(0, amount); // Slice 1 ignores the first star because it will be the current star.\n    }\n\n    getClosestUnownedStars(star: Star, stars: Star[], amount: number) {\n        let sorted = stars\n            .filter(s => s._id !== star._id) // Exclude the current star.\n            .filter(s => !s.ownedByPlayerId)\n            .sort((a, b) => {\n                return this.getDistanceBetweenStars(star, a)\n                    - this.getDistanceBetweenStars(star, b);\n            });\n\n        return sorted.slice(0, amount);\n    }\n\n    getClosestUnownedStar(star: Star, stars: Star[]) {\n        return this.getClosestUnownedStars(star, stars, 1)[0];\n    }\n\n    getClosestOwnedStars(star: Star, stars: Star[]) {\n        return stars\n            .filter(s => s._id !== star._id) // Exclude the current star.\n            .filter(s => s.ownedByPlayerId)\n            .sort((a, b) => {\n                return this.getDistanceBetweenStars(star, a)\n                    - this.getDistanceBetweenStars(star, b);\n            });\n    }\n\n    getClosestPlayerOwnedStars(star: Star, stars: Star[], player: Player) {\n        return this.getClosestOwnedStars(star, stars)\n            .filter(s => s.ownedByPlayerId && s.ownedByPlayerId.toString() === player._id.toString());\n    }\n\n    getClosestPlayerOwnedStarsFromLocation(location: Location, stars: Star[], ownedByPlayerId: DBObjectId) {\n        let sorted = stars\n            .filter(s => s.ownedByPlayerId && s.ownedByPlayerId.toString() === ownedByPlayerId.toString())\n            .sort((a, b) => this.getDistanceBetweenStarAndLocation(a, location) - this.getDistanceBetweenStarAndLocation(b, location));\n\n        return sorted;\n    }\n\n    getClosestPlayerOwnedStarsFromLocationWithinDistance(location: Location, stars: Star[], ownedByPlayerId: DBObjectId, maxDistance: number) {\n        let sorted = stars\n            .filter(s => s.ownedByPlayerId && s.ownedByPlayerId.toString() === ownedByPlayerId.toString())\n            .filter(s => {\n                let distance = this.getDistanceBetweenStarAndLocation(s, location);\n                \n                return maxDistance >= distance;\n            })\n            .sort((a, b) => this.getDistanceBetweenStarAndLocation(a, location) - this.getDistanceBetweenStarAndLocation(b, location));\n\n        return sorted;\n    }\n\n    getClosestUnownedStarsFromLocation(location: Location, stars: Star[], amount: number) {\n        let sorted = stars\n            .filter(s => !s.ownedByPlayerId)\n            .sort((a, b) => this.getDistanceBetweenStarAndLocation(a, location) - this.getDistanceBetweenStarAndLocation(b, location));\n\n        return sorted.slice(0, amount);\n    }\n\n    getClosestUnownedStarFromLocation(location: Location, stars: Star[]) {\n        return this.getClosestUnownedStarsFromLocation(location, stars, 1)[0];\n    }\n\n    getStarsWithinRadiusOfStar(star: Star, stars: Star[], radius: number) {\n        let nearby = stars\n            .filter(s => (s._id !== star._id) && (this.getDistanceBetweenStars(star, s) <= radius))\n        \n        return nearby;\n    }\n\n    isStarTooClose(game: Game, star: Star, otherStar: Star) {\n        return this.isStarLocationTooClose(game, star.location, otherStar);\n    }\n\n    isStarLocationTooClose(game: Game, location: Location, otherStar: Star) {\n        return this.isLocationTooClose(game, location, otherStar.location);\n    }\n\n    isLocationTooClose(game: Game, location: Location, otherLocation: Location) {\n        const distance = this.distanceService.getDistanceBetweenLocations(location, otherLocation);\n\n        return distance < game.constants.distances.minDistanceBetweenStars;\n    }\n\n    isDuplicateStarPosition(location: Location, stars: Star[]) {\n        const samePositionStars = \n            stars.filter((star2) => {\n                return location.x === star2.location.x\n                    && location.y === star2.location.y;\n            });\n    \n        return samePositionStars.length > 0;\n    }\n\n    getClosestStarFromLocation(loc: Location, stars: Star[]){\n        return this.getClosestStarsFromLocation(loc, stars, 1);\n    }\n\n    getClosestStarsFromLocation(loc: Location, stars: Star[], amount: number){\n        let sorted = stars\n        .sort((a, b) => {\n            return this.getDistanceBetweenStarAndLocation(a, loc)\n                - this.getDistanceBetweenStarAndLocation(b, loc);\n        });\n    \n        return sorted.slice(0, amount); \n    }\n\n    getFurthestStarsFromLocation(loc: Location, stars: Star[], amount: number){\n        let sorted = stars\n        .sort((a, b) => {\n            return this.getDistanceBetweenStarAndLocation(b, loc)\n                - this.getDistanceBetweenStarAndLocation(a, loc);\n        });\n    \n        return sorted.slice(0, amount);\n    }\n\n    getMaxGalaxyDiameter(locations: Location[]) {\n        const diameter = this.getGalaxyDiameter(locations);\n\n        return diameter.x > diameter.y ? diameter.x : diameter.y;\n    }\n\n    getGalaxyDiameter(locations: Location[]) {\n        let xArray = locations.map((location) => { return location.x; });\n        let yArray = locations.map((location) => { return location.y; });\n\n        let maxX = Math.max(...xArray);\n        let maxY = Math.max(...yArray);\n\n        let minX = Math.min(...xArray);\n        let minY = Math.min(...yArray);\n\n        return {\n            x: maxX - minX,\n            y: maxY - minY\n        };\n    }\n\n    getGalacticCenter(): Location {\n        return {\n            x: 0,\n            y: 0\n        };\n    }\n    \n};\n"],
  "mappings": "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",
  "names": []
}
