{
  "version": 3,
  "sources": ["../../../server/services/gameList.ts"],
  "sourcesContent": ["import { DBObjectId } from \"./types/DBObjectId\";\nimport Repository from \"./repository\";\nimport { Game, GameUserNotification } from \"./types/Game\";\nimport ConversationService from \"./conversation\";\nimport EventService from \"./event\";\nimport GameService from \"./game\";\nimport GameTypeService from \"./gameType\";\nimport LeaderboardService from \"./leaderboard\";\n\nconst moment = require('moment');\n\nexport default class GameListService {\n    gameRepo: Repository<Game>;\n    gameService: GameService;\n    conversationService: ConversationService;\n    eventService: EventService;\n    gameTypeService: GameTypeService;\n    leaderboardService: LeaderboardService;\n    \n    constructor(\n        gameRepo: Repository<Game>,\n        gameService: GameService,\n        conversationService: ConversationService,\n        eventService: EventService,\n        gameTypeService: GameTypeService,\n        leaderboardService: LeaderboardService\n    ) {\n        this.gameRepo = gameRepo;\n        this.gameService = gameService;\n        this.conversationService = conversationService;\n        this.eventService = eventService;\n        this.gameTypeService = gameTypeService;\n        this.leaderboardService = leaderboardService;\n    }\n\n    async listJoinableGames() {\n        const games = await this.gameRepo.find({\n            'state.startDate': { $eq: null },\n            'settings.general.type': { $ne: 'tutorial' }\n        }, {\n            'settings.general.type': 1,\n            'settings.general.featured': 1,\n            'settings.general.name': 1,\n            'settings.general.playerLimit': 1,\n            state: 1\n        });\n\n        const official = games.filter(g => g.settings.general.type !== 'custom');\n        const custom = games.filter(g => g.settings.general.type === 'custom');\n\n        return {\n            official,\n            custom\n        };\n    }\n\n    async listOfficialGames() {\n        return await this.gameRepo.find({\n            'settings.general.type': { $nin: ['custom', 'tutorial'] },\n            'state.startDate': { $eq: null }\n        }, {\n            'settings.general.type': 1,\n            'settings.general.featured': 1,\n            'settings.general.name': 1,\n            'settings.general.playerLimit': 1,\n            state: 1\n        });\n    }\n\n    async listCustomGames() {\n        return await this.gameRepo.find({\n            'settings.general.type': { $eq: 'custom' },\n            'state.startDate': { $eq: null }\n        }, {\n            'settings.general.type': 1,\n            'settings.general.featured': 1,\n            'settings.general.name': 1,\n            'settings.general.playerLimit': 1,\n            state: 1\n        });\n    }\n\n    async listActiveGames(userId: DBObjectId) {\n        const games = await this.gameRepo.find({\n            'state.endDate': { $eq: null }, // Game is in progress\n            $or: [\n                // User is playing or has been afk'd\n                { 'galaxy.players': { $elemMatch: { userId } } },\n                { 'afkers': { $in: [userId] } }\n            ]\n        }, {\n            'settings.general.name': 1,\n            'settings.general.type': 1,\n            'settings.general.playerLimit': 1,\n            'settings.gametime.speed': 1,\n            'settings.gametime.gameType': 1,\n            'settings.gameTime': 1,\n            'settings.galaxy.productionTicks': 1,\n            'galaxy.players._id': 1,\n            'galaxy.players.userId': 1,\n            'galaxy.players.ready': 1,\n            'galaxy.players.defeated': 1,\n            'galaxy.players.afk': 1,\n            'conversations.participants': 1,\n            'conversations.messages.readBy': 1,\n            state: 1\n        }, {\n            'state.startDate': -1 // Sort start date descending (most recent started games appear first)\n        });\n\n        return await Promise.all(games.map(async game => {\n            game.userNotifications = await this.getUserPlayerNotifications(game, userId, true, true, true, false);\n\n            delete (game as any).conversations;\n            delete (game as any).galaxy;\n\n            return game;\n        }));\n    }\n\n    async listRecentlyCompletedGames(limit: number = 20) {\n        return await this.gameRepo.find({\n            'state.endDate': { $ne: null }, // Game is finished\n            'settings.general.type': { $ne: 'tutorial'}\n        },\n        {\n            'settings.general.type': 1,\n            'settings.general.featured': 1,\n            'settings.general.name': 1,\n            'settings.general.playerLimit': 1,\n            state: 1\n        },\n        { 'state.endDate': -1 },\n        limit);\n    }\n\n    async listUserCompletedGames(userId: DBObjectId) {\n        const games = await this.gameRepo.find({\n            'state.endDate': { $ne: null }, // Game is finished\n            'settings.general.type': { $ne: 'tutorial'},\n            $or: [\n                // User was active in the game or has been afk'd\n                { 'galaxy.players': { $elemMatch: { userId } } },\n                { 'afkers': { $in: [userId] } }\n            ]\n        }, {\n            'settings.general.name': 1,\n            'settings.general.type': 1,\n            'settings.general.playerLimit': 1,\n            'settings.gametime.speed': 1,\n            'settings.gametime.gameType': 1,\n            'settings.gameTime': 1,\n            'settings.galaxy.productionTicks': 1,\n            'galaxy.players._id': 1,\n            'galaxy.players.userId': 1,\n            'galaxy.players.ready': 1,\n            'galaxy.players.defeated': 1,\n            'galaxy.players.afk': 1,\n            'conversations.participants': 1,\n            'conversations.messages.readBy': 1,\n            state: 1\n        }, {\n            'state.endDate': -1 // Sort end date descending (most recent ended games appear first)\n        });\n\n        return await Promise.all(games.map(async game => {\n            game.userNotifications = await this.getUserPlayerNotifications(game, userId, false, false, true, true);\n\n            delete (game as any).conversations;\n            delete (game as any).galaxy;\n\n            return game;\n        }));\n    }\n\n    async listSpectating(userId: DBObjectId) {\n        return await this.gameRepo.find({\n            'state.endDate': { $eq: null }, // Game is in progress\n            'galaxy.players.spectators': { // User is spectating at least one player.\n                $elemMatch: {\n                    $in: [userId]\n                }\n            }\n        },\n        {\n            'settings.general.type': 1,\n            'settings.general.featured': 1,\n            'settings.general.name': 1,\n            'settings.general.playerLimit': 1,\n            state: 1\n        },\n        { 'state.endDate': -1 });\n    }\n\n    async getUserPlayerNotifications(game: Game, userId: DBObjectId, \n        includeTurnWaiting: boolean = true,\n        includeUnreadEvents: boolean = true,\n        includeUnreadConversastions: boolean = true,\n        includePosition: boolean = true): Promise<GameUserNotification> {\n        const player = game.galaxy.players.find(p => p.userId && p.userId.toString() === userId.toString());\n\n        let unreadConversations: number | null = null,\n            unreadEvents: number | null = null,\n            totalUnread: number | null = null,\n            turnWaiting: boolean | null = null,\n            position: number | null = null;\n\n        // Note: The player may have gone afk and been replaced by another player so we need to\n        // double check that the player is actually in the game to retrieve conversation counts etc.\n        if (player) {\n            if (includeUnreadConversastions) unreadConversations = this.conversationService.getUnreadCount(game, player._id);\n            if (includeUnreadEvents) unreadEvents = await this.eventService.getUnreadCount(game, player._id);\n            if (includeTurnWaiting) turnWaiting = this.gameTypeService.isTurnBasedGame(game) && !player.ready;\n\n            totalUnread = (unreadConversations || 0) + (unreadEvents || 0);\n\n            if (includePosition) {\n                position = this.leaderboardService.getGameLeaderboardPosition(game, player);\n            }\n        }\n\n        let notification: GameUserNotification = {\n            unreadConversations,\n            unreadEvents,\n            unread: totalUnread,\n            turnWaiting,\n            defeated: player?.defeated || null,\n            afk: player?.afk || null,\n            position\n        };\n\n        return notification;\n    }\n\n    async listOldCompletedGamesNotCleaned(months: number = 1) {\n        let date = moment().subtract(months, 'month');\n\n        let query = {\n            $and: [\n                { 'state.winner': { $ne: null } },\n                { 'state.endDate': { $lt: date } },\n                {\n                    $or: [\n                        { 'state.cleaned': false },\n                        { 'state.cleaned': { $eq: null } }\n                    ]\n                }\n            ]\n        };\n\n        return await this.gameRepo.find(query, {\n            _id: 1\n        });\n    }\n\n    async listGamesTimedOutWaitingForPlayers() {\n        let date = moment().subtract(7, 'day');\n\n        let games = await this.gameRepo.find({\n            'settings.general.type': { \n                $in: [\n                    'custom',\n                    'special_dark',\n                    'special_fog',\n                    'special_ultraDark',\n                    'special_orbital',\n                    'special_battleRoyale',\n                    'special_homeStar',\n                    'special_homeStarElimination',\n                    'special_anonymous',\n                    'special_kingOfTheHill',\n                    'special_tinyGalaxy',\n                    'special_freeForAll',\n                    'special_arcade'\n                ]\n            },\n            'state.startDate': { $eq: null }\n        }, {\n            'galaxy.stars': 0,\n            'galaxy.carriers': 0\n        });\n        \n        return games.filter(g => {\n            return moment(g._id.getTimestamp()) <= date;\n        });\n    }\n\n    async listInProgressGames() {\n        let games = await this.gameRepo.find({\n            'settings.general.type': { $nin: ['tutorial'] },\n            'state.startDate': { $ne: null },\n            'state.endDate': { $eq: null },\n            'state.paused': { $eq: false }\n        }, {\n            'settings.general.name': 1,\n            'settings.general.type': 1,\n            'settings.general.playerLimit': 1,\n            state: 1,\n            'galaxy.players.isOpenSlot': 1\n        }, {\n            'state.startDate': -1\n        });\n\n        for (let game of games) {\n            game.state.openSlots = game.galaxy.players.filter(p => p.isOpenSlot).length;\n\n            delete (game as any).galaxy;\n        }\n\n        return games;\n    }\n\n    async listInProgressGamesGameTick() {\n        return await this.gameRepo.find({\n            'state.startDate': { $ne: null },\n            'state.endDate': { $eq: null },\n            'state.paused': { $eq: false },\n            'state.locked': { $eq: false }\n        }, {\n            _id: 1,\n            state: 1,\n            settings: 1,\n            'galaxy.players': 1\n        }, {\n            'settings.gameTime.speed': 1    // Prioritise faster games first.\n        });\n    }\n\n    async listOpenGamesCreatedByUser(userId: DBObjectId) {\n        return await this.gameRepo.find({\n            'settings.general.createdByUserId': { $eq: userId },\n            'state.startDate': { $eq: null }\n        });\n    }\n\n    async getUserTutorial(userId: DBObjectId) {\n        const tutorial = await this.gameRepo.findOne({\n            'settings.general.type': 'tutorial',\n            'state.endDate': { $eq: null }, // Game is in progress\n            'galaxy.players': { \n                $elemMatch: { \n                    userId,\n                    defeated: false\n                } \n            }\n        }, {\n            _id: 1\n        });\n\n        return tutorial;\n    }\n\n    async listCompletedTutorials() {\n        let date = moment().subtract(1, 'day');\n\n        let games = await this.gameRepo.find({\n            'settings.general.type': 'tutorial',\n            'state.endDate': { $ne: null }\n        }, {\n            _id: 1\n        });\n        \n        return games.filter(g => {\n            return moment(g._id.getTimestamp()) <= date;\n        });\n    }\n\n};\n"],
  "mappings": "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",
  "names": []
}
