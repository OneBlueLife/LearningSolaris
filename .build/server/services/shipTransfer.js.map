{
  "version": 3,
  "sources": ["../../../server/services/shipTransfer.ts"],
  "sourcesContent": ["import { DBObjectId } from './types/DBObjectId';\nimport ValidationError from '../errors/validation';\nimport Repository from './repository';\nimport { Game } from './types/Game';\nimport { Player } from './types/Player';\nimport CarrierService from './carrier';\nimport StarService from './star';\n\nexport default class ShipTransferService {\n    gameRepo: Repository<Game>;\n    carrierService: CarrierService;\n    starService: StarService;\n\n    constructor(\n        gameRepo: Repository<Game>,\n        carrierService: CarrierService,\n        starService: StarService\n    ) {\n        this.gameRepo = gameRepo;\n        this.carrierService = carrierService;\n        this.starService = starService;\n    }\n\n    async garrisonAllShips(game: Game, player: Player, starId: DBObjectId, writeToDB: boolean = true) {\n        let star = this.starService.getById(game, starId);\n        let carriersAtStar = this.carrierService.getCarriersAtStar(game, starId)\n            .filter(c => c.ownedByPlayerId!.toString() === player._id.toString());\n\n        if (!star.ownedByPlayerId || star.ownedByPlayerId.toString() !== player._id.toString()) {\n            throw new ValidationError('The player does not own this star.');\n        }\n\n        if (!carriersAtStar.length) {\n            throw new ValidationError('The player does not own any carriers in orbit of this star.');\n        }\n\n        let shipsToTransfer = 0;\n        \n        for (let carrier of carriersAtStar) {\n            if (carrier.ships! > 1) {\n                shipsToTransfer += (carrier.ships!-1)\n                carrier.ships = 1\n            }\n        }\n\n        star.shipsActual! += shipsToTransfer;\n        star.ships = Math.floor(star.shipsActual!);\n\n        if (writeToDB) {\n            // Generate an array of all requires DB updates.\n            let dbWrites: any[] = carriersAtStar.map(c => {\n                return {\n                    updateOne: {\n                        filter: {\n                            _id: game._id,\n                            'galaxy.carriers._id': c._id\n                        },\n                        update: {\n                            'galaxy.carriers.$.ships': c.ships\n                        }\n                    }\n                };\n            });\n    \n            dbWrites.push({\n                updateOne: {\n                    filter: {\n                        _id: game._id,\n                        'galaxy.stars._id': star._id\n                    },\n                    update: {\n                        'galaxy.stars.$.shipsActual': star.shipsActual,\n                        'galaxy.stars.$.ships': star.ships\n                    }\n                }\n            });\n    \n            // Update the DB.\n            await this.gameRepo.bulkWrite(dbWrites);\n        }\n\n        return {\n            star: {\n                _id: star._id,\n                ships: star.ships\n            },\n            carriers: carriersAtStar.map(c => {\n                return {\n                    _id: c._id,\n                    ships: c.ships\n                }\n            })\n        };\n    }\n\n    async distributeAllShips(game: Game, player: Player, starId: DBObjectId, writeToDB: boolean = true) {\n        let star = this.starService.getById(game, starId);\n        let carriersAtStar = this.carrierService.getCarriersAtStar(game, starId)\n            .filter(c => c.ownedByPlayerId!.toString() === player._id.toString());\n\n        if (!star.ownedByPlayerId || star.ownedByPlayerId.toString() !== player._id.toString()) {\n            throw new ValidationError('The player does not own this star.');\n        }\n\n        if (!carriersAtStar.length) {\n            throw new ValidationError('The player does not own any carriers in orbit of this star.');\n        }\n\n        // Garrison all ships to the star first.\n        let shipsToTransfer = 0;\n        \n        for (let carrier of carriersAtStar) {\n            if (carrier.ships! > 1) {\n                shipsToTransfer += (carrier.ships!-1)\n                carrier.ships = 1\n            }\n        }\n\n        star.shipsActual! += shipsToTransfer;\n        star.ships = Math.floor(star.shipsActual!);\n\n        if (star.ships > 0) {\n            // Now, evenly distribute all of the ships on the star to the carriers.\n            let shipsPerCarrier = Math.floor(star.ships / carriersAtStar.length);\n\n            for (let carrier of carriersAtStar) {\n                carrier.ships! += shipsPerCarrier;\n                star.shipsActual! -= shipsPerCarrier;\n                star.ships = Math.floor(star.shipsActual!);\n            }\n        }\n\n        if (writeToDB) {\n            // Generate an array of all requires DB updates.\n            let dbWrites: any[] = carriersAtStar.map(c => {\n                return {\n                    updateOne: {\n                        filter: {\n                            _id: game._id,\n                            'galaxy.carriers._id': c._id\n                        },\n                        update: {\n                            'galaxy.carriers.$.ships': c.ships\n                        }\n                    }\n                };\n            });\n    \n            dbWrites.push({\n                updateOne: {\n                    filter: {\n                        _id: game._id,\n                        'galaxy.stars._id': star._id\n                    },\n                    update: {\n                        'galaxy.stars.$.shipsActual': star.shipsActual,\n                        'galaxy.stars.$.ships': star.ships\n                    }\n                }\n            });\n    \n            // Update the DB.\n            await this.gameRepo.bulkWrite(dbWrites);\n        }\n\n        return {\n            star: {\n                _id: star._id,\n                ships: star.ships\n            },\n            carriers: carriersAtStar.map(c => {\n                return {\n                    _id: c._id,\n                    ships: c.ships\n                }\n            })\n        };\n    }\n\n    async transfer(game: Game, player: Player, carrierId: DBObjectId, carrierShips: number, starId: DBObjectId, starShips: number, writeDB: boolean = true) {\n        let carrier = this.carrierService.getById(game, carrierId);\n        let star = this.starService.getById(game, starId);\n\n        if (!carrier || carrier.ownedByPlayerId!.toString() !== player._id.toString()) {\n            throw new ValidationError('The player does not own this carrier.');\n        }\n\n        if (!star || !star.ownedByPlayerId || star.ownedByPlayerId.toString() !== player._id.toString()) {\n            throw new ValidationError('The player does not own this star.');\n        }\n\n        if (!carrier.orbiting) {\n            throw new ValidationError('The carrier must be in orbit of a star to transfer ships.');\n        }\n\n        if (carrier.orbiting.toString() !== star._id.toString()) {\n            throw new ValidationError('The carrier must be in orbit of a the desired star to transfer ships.');\n        }\n\n        let totalTransferShips = carrierShips + starShips;\n        let totalShips = carrier.ships! + star.ships!;\n\n        if (totalTransferShips != totalShips) {\n            throw new ValidationError('The total number of ships in the transfer does not equal to the total number of ships garrisoned');\n        }\n\n        if (carrierShips <= 0) {\n            throw new ValidationError('The number of carrier ships in the transfer must be greater than 0. Carriers must have at least 1 ship.');\n        }\n\n        if (starShips < 0) {\n            throw new ValidationError('The number of carrier ships in the transfer must be 0 or greater.');\n        }\n\n        carrier.ships = carrierShips;\n\n        let shipsFraction = star.shipsActual! - star.ships!; // Keep hold of the fractional amount of ships so we can add it back later.\n        \n        star.shipsActual = starShips + shipsFraction;\n        star.ships = Math.floor(star.shipsActual);\n\n        // Update the DB.\n        if (writeDB) {\n            await this.gameRepo.bulkWrite([\n                {\n                    updateOne: {\n                        filter: {\n                            _id: game._id,\n                            'galaxy.stars._id': star._id\n                        },\n                        update: {\n                            'galaxy.stars.$.shipsActual': star.shipsActual,\n                            'galaxy.stars.$.ships': star.ships\n                        }\n                    }\n                },\n                {\n                    updateOne: {\n                        filter: {\n                            _id: game._id,\n                            'galaxy.carriers._id': carrier._id\n                        },\n                        update: {\n                            'galaxy.carriers.$.ships': carrier.ships\n                        }\n                    }\n                }\n            ]);\n        }\n\n        return {\n            player,\n            star,\n            carrier\n        };\n    }\n\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAA4B;AAO5B,MAAO,oBAAkC;AAAA,EAKrC,YACI,UACA,gBACA,aACF;AACE,SAAK,WAAW;AAChB,SAAK,iBAAiB;AACtB,SAAK,cAAc;AAAA,EACvB;AAAA,EAEA,MAAM,iBAAiB,MAAY,QAAgB,QAAoB,YAAqB,MAAM;AAC9F,QAAI,OAAO,KAAK,YAAY,QAAQ,MAAM,MAAM;AAChD,QAAI,iBAAiB,KAAK,eAAe,kBAAkB,MAAM,MAAM,EAClE,OAAO,OAAK,EAAE,gBAAiB,SAAS,MAAM,OAAO,IAAI,SAAS,CAAC;AAExE,QAAI,CAAC,KAAK,mBAAmB,KAAK,gBAAgB,SAAS,MAAM,OAAO,IAAI,SAAS,GAAG;AACpF,YAAM,IAAI,kBAAAA,QAAgB,oCAAoC;AAAA,IAClE;AAEA,QAAI,CAAC,eAAe,QAAQ;AACxB,YAAM,IAAI,kBAAAA,QAAgB,6DAA6D;AAAA,IAC3F;AAEA,QAAI,kBAAkB;AAEtB,aAAS,WAAW,gBAAgB;AAChC,UAAI,QAAQ,QAAS,GAAG;AACpB,2BAAoB,QAAQ,QAAO;AACnC,gBAAQ,QAAQ;AAAA,MACpB;AAAA,IACJ;AAEA,SAAK,eAAgB;AACrB,SAAK,QAAQ,KAAK,MAAM,KAAK,WAAY;AAEzC,QAAI,WAAW;AAEX,UAAI,WAAkB,eAAe,IAAI,OAAK;AAC1C,eAAO;AAAA,UACH,WAAW;AAAA,YACP,QAAQ;AAAA,cACJ,KAAK,KAAK;AAAA,cACV,uBAAuB,EAAE;AAAA,YAC7B;AAAA,YACA,QAAQ;AAAA,cACJ,2BAA2B,EAAE;AAAA,YACjC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,CAAC;AAED,eAAS,KAAK;AAAA,QACV,WAAW;AAAA,UACP,QAAQ;AAAA,YACJ,KAAK,KAAK;AAAA,YACV,oBAAoB,KAAK;AAAA,UAC7B;AAAA,UACA,QAAQ;AAAA,YACJ,8BAA8B,KAAK;AAAA,YACnC,wBAAwB,KAAK;AAAA,UACjC;AAAA,QACJ;AAAA,MACJ,CAAC;AAGD,YAAM,KAAK,SAAS,UAAU,QAAQ;AAAA,IAC1C;AAEA,WAAO;AAAA,MACH,MAAM;AAAA,QACF,KAAK,KAAK;AAAA,QACV,OAAO,KAAK;AAAA,MAChB;AAAA,MACA,UAAU,eAAe,IAAI,OAAK;AAC9B,eAAO;AAAA,UACH,KAAK,EAAE;AAAA,UACP,OAAO,EAAE;AAAA,QACb;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEA,MAAM,mBAAmB,MAAY,QAAgB,QAAoB,YAAqB,MAAM;AAChG,QAAI,OAAO,KAAK,YAAY,QAAQ,MAAM,MAAM;AAChD,QAAI,iBAAiB,KAAK,eAAe,kBAAkB,MAAM,MAAM,EAClE,OAAO,OAAK,EAAE,gBAAiB,SAAS,MAAM,OAAO,IAAI,SAAS,CAAC;AAExE,QAAI,CAAC,KAAK,mBAAmB,KAAK,gBAAgB,SAAS,MAAM,OAAO,IAAI,SAAS,GAAG;AACpF,YAAM,IAAI,kBAAAA,QAAgB,oCAAoC;AAAA,IAClE;AAEA,QAAI,CAAC,eAAe,QAAQ;AACxB,YAAM,IAAI,kBAAAA,QAAgB,6DAA6D;AAAA,IAC3F;AAGA,QAAI,kBAAkB;AAEtB,aAAS,WAAW,gBAAgB;AAChC,UAAI,QAAQ,QAAS,GAAG;AACpB,2BAAoB,QAAQ,QAAO;AACnC,gBAAQ,QAAQ;AAAA,MACpB;AAAA,IACJ;AAEA,SAAK,eAAgB;AACrB,SAAK,QAAQ,KAAK,MAAM,KAAK,WAAY;AAEzC,QAAI,KAAK,QAAQ,GAAG;AAEhB,UAAI,kBAAkB,KAAK,MAAM,KAAK,QAAQ,eAAe,MAAM;AAEnE,eAAS,WAAW,gBAAgB;AAChC,gBAAQ,SAAU;AAClB,aAAK,eAAgB;AACrB,aAAK,QAAQ,KAAK,MAAM,KAAK,WAAY;AAAA,MAC7C;AAAA,IACJ;AAEA,QAAI,WAAW;AAEX,UAAI,WAAkB,eAAe,IAAI,OAAK;AAC1C,eAAO;AAAA,UACH,WAAW;AAAA,YACP,QAAQ;AAAA,cACJ,KAAK,KAAK;AAAA,cACV,uBAAuB,EAAE;AAAA,YAC7B;AAAA,YACA,QAAQ;AAAA,cACJ,2BAA2B,EAAE;AAAA,YACjC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,CAAC;AAED,eAAS,KAAK;AAAA,QACV,WAAW;AAAA,UACP,QAAQ;AAAA,YACJ,KAAK,KAAK;AAAA,YACV,oBAAoB,KAAK;AAAA,UAC7B;AAAA,UACA,QAAQ;AAAA,YACJ,8BAA8B,KAAK;AAAA,YACnC,wBAAwB,KAAK;AAAA,UACjC;AAAA,QACJ;AAAA,MACJ,CAAC;AAGD,YAAM,KAAK,SAAS,UAAU,QAAQ;AAAA,IAC1C;AAEA,WAAO;AAAA,MACH,MAAM;AAAA,QACF,KAAK,KAAK;AAAA,QACV,OAAO,KAAK;AAAA,MAChB;AAAA,MACA,UAAU,eAAe,IAAI,OAAK;AAC9B,eAAO;AAAA,UACH,KAAK,EAAE;AAAA,UACP,OAAO,EAAE;AAAA,QACb;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEA,MAAM,SAAS,MAAY,QAAgB,WAAuB,cAAsB,QAAoB,WAAmB,UAAmB,MAAM;AACpJ,QAAI,UAAU,KAAK,eAAe,QAAQ,MAAM,SAAS;AACzD,QAAI,OAAO,KAAK,YAAY,QAAQ,MAAM,MAAM;AAEhD,QAAI,CAAC,WAAW,QAAQ,gBAAiB,SAAS,MAAM,OAAO,IAAI,SAAS,GAAG;AAC3E,YAAM,IAAI,kBAAAA,QAAgB,uCAAuC;AAAA,IACrE;AAEA,QAAI,CAAC,QAAQ,CAAC,KAAK,mBAAmB,KAAK,gBAAgB,SAAS,MAAM,OAAO,IAAI,SAAS,GAAG;AAC7F,YAAM,IAAI,kBAAAA,QAAgB,oCAAoC;AAAA,IAClE;AAEA,QAAI,CAAC,QAAQ,UAAU;AACnB,YAAM,IAAI,kBAAAA,QAAgB,2DAA2D;AAAA,IACzF;AAEA,QAAI,QAAQ,SAAS,SAAS,MAAM,KAAK,IAAI,SAAS,GAAG;AACrD,YAAM,IAAI,kBAAAA,QAAgB,uEAAuE;AAAA,IACrG;AAEA,QAAI,qBAAqB,eAAe;AACxC,QAAI,aAAa,QAAQ,QAAS,KAAK;AAEvC,QAAI,sBAAsB,YAAY;AAClC,YAAM,IAAI,kBAAAA,QAAgB,kGAAkG;AAAA,IAChI;AAEA,QAAI,gBAAgB,GAAG;AACnB,YAAM,IAAI,kBAAAA,QAAgB,yGAAyG;AAAA,IACvI;AAEA,QAAI,YAAY,GAAG;AACf,YAAM,IAAI,kBAAAA,QAAgB,mEAAmE;AAAA,IACjG;AAEA,YAAQ,QAAQ;AAEhB,QAAI,gBAAgB,KAAK,cAAe,KAAK;AAE7C,SAAK,cAAc,YAAY;AAC/B,SAAK,QAAQ,KAAK,MAAM,KAAK,WAAW;AAGxC,QAAI,SAAS;AACT,YAAM,KAAK,SAAS,UAAU;AAAA,QAC1B;AAAA,UACI,WAAW;AAAA,YACP,QAAQ;AAAA,cACJ,KAAK,KAAK;AAAA,cACV,oBAAoB,KAAK;AAAA,YAC7B;AAAA,YACA,QAAQ;AAAA,cACJ,8BAA8B,KAAK;AAAA,cACnC,wBAAwB,KAAK;AAAA,YACjC;AAAA,UACJ;AAAA,QACJ;AAAA,QACA;AAAA,UACI,WAAW;AAAA,YACP,QAAQ;AAAA,cACJ,KAAK,KAAK;AAAA,cACV,uBAAuB,QAAQ;AAAA,YACnC;AAAA,YACA,QAAQ;AAAA,cACJ,2BAA2B,QAAQ;AAAA,YACvC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAEJ;AAAC;",
  "names": ["ValidationError"]
}
