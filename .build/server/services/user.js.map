{
  "version": 3,
  "sources": ["../../../server/services/user.ts"],
  "sourcesContent": ["const EventEmitter = require('events');\nimport { DBObjectId } from './types/DBObjectId';\nimport ValidationError from '../errors/validation';\nimport Repository from './repository';\nimport { Game } from './types/Game';\nimport { User, UserSubscriptions } from './types/User';\nimport PasswordService from './password';\nconst moment = require('moment');\n\nfunction uuidv4(): string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\nexport const UserServiceEvents = {\n    onUserCreated: 'onUserCreated'\n}\n\nexport default class UserService extends EventEmitter {\n\n    userModel;\n    userRepo: Repository<User>;\n    passwordService: PasswordService;\n    \n    constructor(\n        userModel,\n        userRepo: Repository<User>,\n        passwordService: PasswordService\n    ) {\n        super();\n\n        this.userModel = userModel;\n        this.userRepo = userRepo;\n        this.passwordService = passwordService;\n    }\n\n    async getMe(id: DBObjectId) {\n        return await this.userRepo.findById(id, {\n            // Remove fields we don't want to send back.\n            password: 0,\n            resetPasswordToken: 0,\n            premiumEndDate: 0,\n            banned: 0,\n            lastSeen: 0,\n            lastSeenIP: 0,\n            'oauth.discord.token': 0,\n        });\n    }\n\n    async getById(id: DBObjectId, select: any | null = null) {\n        return await this.userRepo.findById(id, select);\n    }\n\n    async getByUsername(username: string, select: any | null = null) {\n        return await this.userRepo.findOne({\n            username\n        }, select);\n    }\n\n    async getByUsernameAchievementsLean(username: string) {\n        return await this.userRepo.findOne({\n            username: username\n        }, {\n            username: 1,\n            achievements: 1\n        });\n    }\n\n    async getUserCount(): Promise<number> {\n        return this.userRepo.countAll();\n    }\n\n    async getGameUsers(game: Game) {\n        return await this.userRepo.findAsModels({\n            _id: {\n                $in: game.galaxy.players.map(p => p.userId)\n            }\n        });\n    }\n\n    async getInfoById(id: DBObjectId) {\n        return await this.userRepo.findByIdAsModel(id, {\n            // Remove fields we don't want to send back.\n            password: 0,\n            resetPasswordToken: 0,\n            premiumEndDate: 0,\n            banned: 0,\n            credits: 0,\n            email: 0,\n            emailEnabled: 0,\n            username: 0,\n            gameSettings: 0,\n            lastSeen: 0,\n            lastSeenIP: 0,\n            oauth: 0,\n        });\n    }\n\n    async getInfoByIdLean(id: DBObjectId, select?: any | null) {\n        select = select || {\n            // Remove fields we don't want to send back.\n            password: 0,\n            resetPasswordToken: 0,\n            premiumEndDate: 0,\n            banned: 0,\n            credits: 0,\n            email: 0,\n            emailEnabled: 0,\n            username: 0,\n            gameSettings: 0,\n            lastSeen: 0,\n            lastSeenIP: 0,\n            oauth: 0,\n        };\n\n        return await this.userRepo.findById(id, select);\n    }\n    \n    async getEmailById(id: DBObjectId) {\n        return await this.userRepo.findById(id, {\n            email: 1,\n            emailEnabled: 1\n        });\n    }\n\n    async getUsernameByEmail(email: string) {\n        email = email.trim();\n        email = email.toLowerCase();\n\n        let user = await this.userRepo.findOne({\n            email\n        }, {\n            username: 1\n        });\n\n        if (!user) {\n            throw new ValidationError(`An account with the email ${email} does not exist.`);\n        }\n\n        return user.username;\n    }\n\n    async getUserIsBanned(userId: DBObjectId) {\n        let user = await this.userRepo.findOne({\n            _id: userId\n        }, {\n            banned: 1\n        });\n\n        if (user) {\n            return user.banned;\n        }\n\n        return null;\n    }\n\n    async getUserIsAdmin(userId: DBObjectId) {\n        let user = await this.userRepo.findOne({\n            _id: userId\n        }, {\n            'roles.administrator': 1\n        });\n\n        return user!.roles.administrator;\n    }\n\n    async getUserIsSubAdmin(userId: DBObjectId) {\n        let user = await this.userRepo.findOne({\n            _id: userId\n        }, {\n            'roles.administrator': 1,\n            'roles.gameMaster': 1,\n            'roles.communityManager': 1\n        });\n\n        return user!.roles.administrator || user!.roles.gameMaster || user!.roles.communityManager;\n    }\n\n    async getUserIsGameMaster(userId: DBObjectId) {\n        let user = await this.userRepo.findOne({\n            _id: userId,\n            $or: [\n                { 'roles.administrator': 1 },\n                { 'roles.gameMaster': 1 }\n            ]\n        }, {\n            _id: 1\n        });\n\n        return user != null;\n    }\n\n    async getUserIsCommunityManager(userId: DBObjectId) {\n        let user = await this.userRepo.findOne({\n            _id: userId,\n            $or: [\n                { 'roles.administrator': 1 },\n                { 'roles.communityManager': 1 }\n            ]\n        }, {\n            _id: 1\n        });\n\n        return user != null;\n    }\n\n    async create(email: string, username: string, password: string, ipAddress: string) {\n        let user = {\n            username: username.trim(),\n            email: email.trim().toLowerCase(),\n            lastSeen: moment().utc(),\n            lastSeenIP: ipAddress,\n        };\n\n        if (user.username.length < 3 || user.username.length > 24) {\n            throw new ValidationError('Username must be between 3 and 24 characters.');\n        }\n\n        const newUser = new this.userModel(user);\n    \n        newUser.password = await this.passwordService.hash(password);\n\n        let doc = await newUser.save();\n\n        this.emit(UserServiceEvents.onUserCreated, doc);\n\n        return doc._id;\n    }\n\n    async userExists(email: string) {\n        email = email.trim();\n        email = email.toLowerCase();\n\n        let user = await this.userRepo.findOne({\n            email\n        }, {\n            _id: 1\n        });\n\n        return user != null;\n    }\n\n    async userIdExists(id: DBObjectId) {\n        let user = await this.userRepo.findOne({\n            _id: id\n        }, {\n            _id: 1\n        });\n\n        return user != null;\n    }\n\n    async usernameExists(username: string) {\n        username = username.trim();\n\n        let user = await this.userRepo.findOne({\n            username\n        }, { \n            _id: 1 \n        });\n\n        return user != null;\n    }\n\n    async otherUsernameExists(username: string, ignoreUserId: DBObjectId) {\n        username = username.trim();\n\n        let user = await this.userRepo.findOne({\n            _id: { $ne: ignoreUserId },\n            username\n        }, { \n            _id: 1 \n        });\n\n        return user != null;\n    }\n\n    async updateEmailPreference(id: DBObjectId, preference: boolean) {\n        await this.userRepo.updateOne({\n            _id: id\n        }, {\n            emailEnabled: preference\n        });\n    }\n\n    async updateEmailOtherPreference(id: DBObjectId, preference: boolean) {\n        await this.userRepo.updateOne({\n            _id: id\n        }, {\n            emailOtherEnabled: preference\n        });\n    }\n\n    async updateEmailAddress(id: DBObjectId, email: string) {\n        email = email.trim();\n        email = email.toLowerCase();\n\n        if (await this.userExists(email)) {\n            throw new ValidationError('Cannot change your email address, the new email address is already in use by another account.');\n        }\n\n        await this.userRepo.updateOne({\n            _id: id\n        }, {\n            email\n        });\n    }\n\n    async updateUsername(id: DBObjectId, username: string) {\n        username = username.trim();\n\n        if (username.length < 3 || username.length > 24) {\n            throw new ValidationError('Username must be between 3 and 24 characters.');\n        }\n\n        if (await this.usernameExists(username)) {\n            throw new ValidationError('Cannot change your username, the new username is already in use by another account.');\n        }\n\n        await this.userRepo.updateOne({\n            _id: id\n        }, {\n            username\n        });\n    }\n\n    async updatePassword(id: DBObjectId, currentPassword: string, newPassword: string) {\n        let user = await this.userRepo.findById(id);\n        \n        if (!user) {\n            throw new ValidationError(`Could not find user`, 404);\n        }\n\n        // Make sure the current password matches.\n        let result = await this.passwordService.compare(currentPassword, user.password!);\n\n        if (result) {\n            // Update the current password to the new password.\n            let hash = await this.passwordService.hash(newPassword, 10);\n            \n            await this.userRepo.updateOne({\n                _id: user._id\n            }, {\n                password: hash\n            });\n        } else {\n            throw new ValidationError('The current password is incorrect.');\n        }\n    }\n\n    async requestResetPassword(email: string) {\n        email = email.trim();\n        email = email.toLowerCase();\n\n        let user = await this.userRepo.findOne({\n            email\n        });\n\n        if (user == null) {\n            throw new ValidationError(`An account does not exist with the email address: ${email}`);\n        }\n\n        let resetPasswordToken = uuidv4();\n\n        await this.userRepo.updateOne({\n            _id: user._id\n        }, {\n            resetPasswordToken\n        });\n\n        return resetPasswordToken;\n    }\n\n    async resetPassword(resetPasswordToken: string, newPassword: string) {\n        if (resetPasswordToken == null || !resetPasswordToken.length) {\n            throw new ValidationError(`The token is required`);\n        }\n\n        let user = await this.userRepo.findOne({\n            resetPasswordToken\n        });\n\n        if (user == null) {\n            throw new ValidationError(`The token is invalid.`);\n        }\n        \n        // Update the current password to the new password.\n        let hash = await this.passwordService.hash(newPassword, 10);\n        \n        await this.userRepo.updateOne({\n            _id: user._id\n        }, {\n            password: hash,\n            resetPasswordToken: null\n        });\n    }\n\n    async closeAccount(id: DBObjectId) {\n        await this.userRepo.deleteOne({\n            _id: id\n        });\n    }\n\n    async getGameSettings(userId: DBObjectId) {\n        if (!userId) {\n            return new this.userModel().gameSettings; // Return the default config\n        }\n\n        let user = await this.getMe(userId);\n\n        return user!.gameSettings;\n    }\n\n    async saveGameSettings(userId: DBObjectId, settings) {\n        if (+settings.carrier.defaultAmount < 0) {\n            throw new ValidationError(`Carrier default amount must be greater than 0.`);\n        }\n\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            gameSettings: settings\n        });\n    }\n\n    async getSubscriptions(userId: DBObjectId) {\n        let user = await this.getMe(userId);\n\n        return user!.subscriptions;\n    }\n\n    async saveSubscriptions(userId: DBObjectId, subscriptions: any) {\n        let obj: UserSubscriptions = {\n            settings: {\n                notifyActiveGamesOnly: subscriptions.settings?.notifyActiveGamesOnly || false\n            }\n        };\n\n        if (subscriptions.discord) {\n            obj.discord = {\n                gameEnded: subscriptions.discord.gameEnded || false,\n                gameStarted: subscriptions.discord.gameStarted || false,\n                gameTurnEnded: subscriptions.discord.gameTurnEnded || false,\n                playerCreditsReceived: subscriptions.discord.playerCreditsReceived || false,\n                playerCreditsSpecialistsReceived: subscriptions.discord.playerCreditsSpecialistsReceived || false,\n                playerGalacticCycleComplete: subscriptions.discord.playerGalacticCycleComplete || false,\n                playerRenownReceived: subscriptions.discord.playerRenownReceived || false,\n                playerResearchComplete: subscriptions.discord.playerResearchComplete || false,\n                playerTechnologyReceived: subscriptions.discord.playerTechnologyReceived || false,\n                conversationMessageSent: subscriptions.discord.conversationMessageSent || false\n            }\n        }\n\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            subscriptions: obj\n        });\n    }\n\n    async updateLastSeen(userId: DBObjectId, ipAddress: string) {\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            $set: {\n                'lastSeen': moment().utc(),\n                'lastSeenIP': ipAddress\n            }\n        });\n    }\n\n    async listUserEloRatingsByIds(userIds: DBObjectId[]) {\n        return await this.userRepo.find({\n            _id: { $in: userIds }\n        }, {\n            'achievements.eloRating': 1\n        });\n    }\n\n    async listUsersInGuilds(): Promise<User[]> {\n        return await this.userRepo.find({ \n            guildId: { $ne: null }\n        }, {\n            'achievements.rank': 1\n        });\n    }\n\n    async listUsersInGuild(guildId: DBObjectId, select: any | null = null) {\n        return await this.userRepo.find({\n            guildId\n        }, select);\n    }\n\n    async listUsers(userIds: DBObjectId[], select: any | null = null) {\n        return await this.userRepo.find({\n            _id: {\n                $in: userIds\n            }\n        }, select);\n    }\n\n    async getCredits(userId: DBObjectId) {\n        let userCredits = await this.userRepo.findById(userId, {\n            credits: 1\n        });\n\n        return userCredits?.credits || 0;\n    }\n\n    async setCredits(userId: DBObjectId, credits: number) {\n        credits = Math.max(credits, 0);\n        \n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            credits\n        });\n    }\n\n    async incrementCredits(userId: DBObjectId, credits: number) {\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            $inc: {\n                credits: credits\n            }\n        });\n    }\n\n    async incrementCreditsByPurchase(userId: DBObjectId, credits: number) {\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            $set: {\n                'roles.contributor': true\n            },\n            $inc: {\n                credits: credits\n            }\n        });\n    }\n\n    async isEstablishedPlayer(userId: DBObjectId) {\n        let user = await this.userRepo.findById(userId, {\n            isEstablishedPlayer: 1\n        });\n\n        return user?.isEstablishedPlayer || false;\n    }\n\n    async listUsersEligibleForReviewReminder(limit: number) {\n        const date = moment().utc().add(-30, 'days').toDate();\n        const ltId = this.userRepo.objectIdFromDate(date);\n\n        return await this.userRepo.find({\n            _id: { $lte: ltId },\n            emailOtherEnabled: true,\n            hasSentReviewReminder: false\n        }, {\n            _id: 1,\n            username: 1,\n            email: 1,\n            emailOtherEnabled: 1\n        }, {\n            _id: 1\n        },\n        limit);\n    }\n\n    async setReviewReminderEmailSent(userId: DBObjectId, sent: boolean) {\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            $set: {\n                hasSentReviewReminder: sent\n            }\n        });\n    }\n\n};\n"],
  "mappings": "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",
  "names": ["ValidationError"]
}
