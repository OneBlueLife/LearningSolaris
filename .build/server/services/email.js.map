{
  "version": 3,
  "sources": ["../../../server/services/email.ts"],
  "sourcesContent": ["import { DBObjectId } from \"./types/DBObjectId\";\nimport { Config } from \"../config/types/Config\";\nimport { EmailTemplate } from \"./types/Email\";\nimport { User } from \"./types/User\";\nimport GameService from \"./game\";\nimport GameStateService from \"./gameState\";\nimport GameTickService, { GameTickServiceEvents } from \"./gameTick\";\nimport GameTypeService from \"./gameType\";\nimport LeaderboardService from \"./leaderboard\";\nimport PlayerService from \"./player\";\nimport UserService, { UserServiceEvents } from \"./user\";\nimport { Player } from \"./types/Player\";\nimport GamePlayerAFKEvent from \"./types/events/GamePlayerAFK\";\nimport { BaseGameEvent } from \"./types/events/BaseGameEvent\";\nimport GameJoinService, { GameJoinServiceEvents } from \"./gameJoin\";\nimport PlayerReadyService, { PlayerReadyServiceEvents } from \"./playerReady\";\n\nconst nodemailer = require('nodemailer');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction getFakeTransport() {\n    return {\n        async sendMail(message) {\n            console.log(`SMTP DISABLED`);\n            // console.log(message.text);\n            // console.log(message.html);\n        }\n    };\n}\n\nfunction sleep(ms: number) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, ms);\n    });\n}   \n/*\n    Emails will be sent via a local SMTP server using Postfix.\n    See here: https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-postfix-as-a-send-only-smtp-server-on-ubuntu-14-04\n*/\n\nexport default class EmailService {\n\n    TEMPLATES = {\n        WELCOME: {\n            fileName: 'welcomeEmail.html',\n            subject: 'Welcome to Solaris'\n        },\n        RESET_PASSWORD: {\n            fileName: 'resetPassword.html',\n            subject: 'Reset your Solaris password'\n        },\n        FORGOT_USERNAME: {\n            fileName: 'forgotUsername.html',\n            subject: 'Your Solaris username'\n        },\n        GAME_WELCOME: {\n            fileName: 'gameWelcome.html',\n            subject: 'Your Solaris game starts soon!'\n        },\n        GAME_FINISHED: {\n            fileName: 'gameFinished.html',\n            subject: 'Your Solaris game has ended!'\n        },\n        GAME_CYCLE_SUMMARY: {\n            fileName: 'gameCycleSummary.html',\n            subject: 'A galactic cycle has ended - Upgrade your empire!'\n        },\n        YOUR_TURN_REMINDER: {\n            fileName: 'yourTurnReminder.html',\n            subject: 'Solaris - It\\'s your turn to play!'\n        },\n        NEXT_TURN_REMINDER: {\n            fileName: 'nextTurnReminder.html',\n            subject: 'Solaris - Turn finished, it\\'s your turn to play!'\n        },\n        GAME_TIMED_OUT: {\n            fileName: 'gameTimedOut.html',\n            subject: 'Solaris - Your game did not start'\n        },\n        GAME_PLAYER_AFK: {\n            fileName: 'gamePlayerAfk.html',\n            subject: 'Solaris - You\\'ve gone AFK'\n        },\n        REVIEW_REMINDER_30_DAYS: {\n            fileName: 'reviewReminder.html',\n            subject: 'Solaris - How did we do?'\n        }\n    };\n\n    config: Config;\n    gameService: GameService;\n    gameJoinService: GameJoinService;\n    userService: UserService;\n    leaderboardService: LeaderboardService;\n    playerService: PlayerService;\n    playerReadyService: PlayerReadyService;\n    gameTypeService: GameTypeService;\n    gameStateService: GameStateService;\n    gameTickService: GameTickService;\n\n    constructor(\n        config: Config,\n        gameService: GameService,\n        gameJoinService: GameJoinService,\n        userService: UserService,\n        leaderboardService: LeaderboardService,\n        playerService: PlayerService,\n        playerReadyService: PlayerReadyService,\n        gameTypeService: GameTypeService,\n        gameStateService: GameStateService,\n        gameTickService: GameTickService\n    ) {\n        this.config = config;\n        this.gameService = gameService;\n        this.gameJoinService = gameJoinService;\n        this.userService = userService;\n        this.leaderboardService = leaderboardService;\n        this.playerService = playerService;\n        this.playerReadyService = playerReadyService;\n        this.gameTypeService = gameTypeService;\n        this.gameStateService = gameStateService;\n        this.gameTickService = gameTickService;\n\n        this.gameJoinService.on(GameJoinServiceEvents.onGameStarted, (args) => this.sendGameStartedEmail(args));\n        this.userService.on(UserServiceEvents.onUserCreated, (user) => this.sendWelcomeEmail(user));\n        this.playerReadyService.on(PlayerReadyServiceEvents.onGamePlayerReady, (data) => this.trySendLastPlayerTurnReminder(data.gameId));\n\n        this.gameTickService.on(GameTickServiceEvents.onGameTurnEnded, (args) => this.trySendNextTurnReminder(args.gameId));\n        this.gameTickService.on(GameTickServiceEvents.onPlayerAfk, (args) => this.sendGamePlayerAfkEmail(args));\n        this.gameTickService.on(GameTickServiceEvents.onGameEnded, (args) => this.sendGameFinishedEmail(args.gameId));\n        this.gameTickService.on(GameTickServiceEvents.onGameCycleEnded, (args) => this.sendGameCycleSummaryEmail(args.gameId));\n    }\n\n    isEnabled() {\n        return this.config.smtp.enabled\n    }\n\n    _getTransport() {\n        // If emails are disabled, return a fake transport which\n        //outputs the message to the console.\n        if (this.isEnabled()) {\n            return nodemailer.createTransport({\n                host: this.config.smtp.host,\n                port: this.config.smtp.port,\n                tls: {\n                      rejectUnauthorized: false\n                }\n            });\n        } else {\n            return getFakeTransport();\n        }\n    }\n\n    async send(toEmail: string, subject: string, text: string) {\n        const transport = this._getTransport();\n        \n        const message = {\n            from: this.config.smtp.from,\n            to: toEmail,\n            subject,\n            text\n        };\n        \n        console.log(`EMAIL: [${message.to}] - ${subject}`);\n\n        return await transport.sendMail(message);\n    }\n\n    async sendHtml(toEmail: string, subject: string, html: string) {\n        const transport = this._getTransport();\n        \n        const message = {\n            from: this.config.smtp.from,\n            to: toEmail,\n            subject,\n            html\n        };\n        \n        console.log(`EMAIL HTML: [${message.to}] - ${subject}`);\n\n        return await transport.sendMail(message);\n    }\n\n    async sendTemplate(toEmail: string, template: EmailTemplate, parameters) {\n        parameters = parameters || [];\n\n        const filePath = path.join(__dirname, './emailTemplates/', template.fileName);\n\n        if (!fs.existsSync(filePath)) {\n            throw new Error(`Could not find email template with path: ${filePath}`);\n        }\n\n        let html = fs.readFileSync(filePath, { encoding: 'UTF8' });\n\n        // Replace the default parameters in the file\n        // TODO: These should be environment variables.\n        html = html.replace('[{solaris_url}]', this.config.clientUrl);\n        html = html.replace('[{solaris_url_gamelist}]', `${this.config.clientUrl}/#/game/list`);\n        html = html.replace('[{solaris_url_resetpassword}]', `${this.config.clientUrl}/#/account/reset-password-external`);\n        html = html.replace('[{source_code_url}]', 'https://github.com/solaris-games/solaris');\n\n        // Replace the parameters in the file\n        for (let i = 0; i < parameters.length; i++) {\n            let parameterString = `[{${i.toString()}}]`;\n\n            html = html.split(parameterString).join(parameters[i].toString());\n        }\n\n        return await this.sendHtml(toEmail, template.subject, html);\n    }\n\n    async sendWelcomeEmail(user: User) {\n        try {\n            await this.sendTemplate(user.email, this.TEMPLATES.WELCOME, [user.username]);\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    async sendReviewReminderEmail(user: User) {\n        if (!user.emailOtherEnabled) {\n            throw new Error(`The user is not subscribed to review reminder emails.`);\n        }\n\n        await this.sendTemplate(user.email, this.TEMPLATES.REVIEW_REMINDER_30_DAYS, [\n            user.username\n        ]);\n    }\n\n    async sendGameStartedEmail(args: BaseGameEvent) {\n        let game = (await this.gameService.getById(args.gameId))!;\n        let gameUrl = `${this.config.clientUrl}/#/game?id=${game._id}`;\n        let gameName = game.settings.general.name;\n\n        for (let player of game.galaxy.players.filter(p => p.userId)) {\n            await this._trySendEmailToPlayer(player, this.TEMPLATES.GAME_WELCOME, [\n                gameName,\n                gameUrl\n            ]);\n        }\n    }\n\n    async sendGameFinishedEmail(gameId: DBObjectId) {\n        let game = (await this.gameService.getById(gameId))!;\n        let gameUrl = `${this.config.clientUrl}/#/game?id=${game._id}`;\n        let gameName = game.settings.general.name;\n\n        for (let player of game.galaxy.players.filter(p => p.userId)) {\n            await this._trySendEmailToPlayer(player, this.TEMPLATES.GAME_FINISHED, [\n                gameName,\n                gameUrl\n            ]);\n        }\n    }\n\n    async sendGameCycleSummaryEmail(gameId: DBObjectId) {      \n        let game = (await this.gameService.getById(gameId))!;\n        let leaderboard = this.leaderboardService.getGameLeaderboard(game).leaderboard;\n\n        let leaderboardHtml = '';\n\n        // Leaderboard is hidden for ultra dark mode games.\n        if (!this.gameTypeService.isDarkModeExtra(game)) {\n            leaderboardHtml = leaderboard.map(l => {\n                return `\n                    <tr>\n                        <td><span style=\"color:#F39C12\">${l.player.alias}</span></td>\n                        <td>${l.stats.totalStars} Stars</td>\n                        <td>${l.stats.totalShips} Ships in ${l.stats.totalCarriers} Carriers</td>\n                    </tr>\n                `;\n            })\n            .join('');\n        }\n\n        let gameUrl = `${this.config.clientUrl}/#/game?id=${game._id}`;\n        let gameName = game.settings.general.name;\n\n        // Send the email only to undefeated players.\n        let undefeatedPlayers = game.galaxy.players.filter((p: Player) => !p.defeated && p.userId);\n        let winConditionText = '';\n\n        switch (game.settings.general.mode) {\n            case 'conquest':\n                switch (game.settings.conquest.victoryCondition) {\n                    case 'starPercentage':\n                        winConditionText = `Winner will be the first to <span style=\"color:#3498DB;\">capture ${game.state.starsForVictory} of ${game.state.stars} stars</span>.`;\n                        break;\n                    case 'homeStarPercentage':\n                        winConditionText = `Winner will be the first to <span style=\"color:#3498DB;\">capture ${game.state.starsForVictory} capital stars of ${game.settings.general.playerLimit} stars</span>.`;\n                        break;\n                    default:\n                        throw new Error(`Unsupported conquest victory condition: ${game.settings.conquest.victoryCondition}`);\n                }\n                break;\n            case 'battleRoyale':\n                winConditionText = 'Winner will be the <span style=\"color:#3498DB;\">last man standing</span>.';\n                break;\n            case 'kingOfTheHill':\n                winConditionText = 'Winner will be the player who <span style=\"color:#3498DB;\">captures and holds</span> the center star.';\n                break;\n        }\n\n        for (let player of undefeatedPlayers) {\n            await this._trySendEmailToPlayer(player, this.TEMPLATES.GAME_CYCLE_SUMMARY, [\n                gameName,\n                gameUrl,\n                winConditionText,\n                leaderboardHtml\n            ]);\n        }\n    }\n\n    async trySendLastPlayerTurnReminder(gameId: DBObjectId) {\n        let game = (await this.gameService.getById(gameId))!;\n\n        if (!this.gameTypeService.isTurnBasedGame(game)) {\n            throw new Error('Cannot send a last turn reminder for non turn based games.');\n        }\n\n        if (!this.gameStateService.isInProgress(game)) {\n            return;\n        }\n\n        let undefeatedPlayers = game.galaxy.players.filter((p: Player) => !p.defeated && !p.ready && p.userId);\n\n        if (undefeatedPlayers.length === 1) {\n            let player = undefeatedPlayers[0];\n\n            // If we have already sent a last turn reminder to this player then do not\n            // send one again, this prevents players from spamming ready/unready and sending\n            // the last player loads of emails.\n            if (player.hasSentTurnReminder) {\n                return;\n            }\n\n            await this.playerService.setHasSentTurnReminder(game, player, true);\n\n            let gameUrl = `${this.config.clientUrl}/#/game?id=${game._id}`;\n            let gameName = game.settings.general.name;\n\n            await this._trySendEmailToPlayer(player, this.TEMPLATES.YOUR_TURN_REMINDER, [\n                gameName,\n                gameUrl\n            ]);\n        }\n    }\n\n    async trySendNextTurnReminder(gameId: DBObjectId) {\n        let game = (await this.gameService.getById(gameId))!;\n\n        // Only send the next turn reminder in TB games and if the game is in progress.\n        if (!this.gameTypeService.isTurnBasedGame(game) || !this.gameStateService.isInProgress(game) || this.gameTypeService.isTutorialGame(game)) {\n            return;\n        }\n        \n        let undefeatedPlayers = game.galaxy.players.filter((p: Player) => !p.defeated && !p.ready && p.userId);\n\n        let gameUrl = `${this.config.clientUrl}/#/game?id=${game._id}`;\n        let gameName = game.settings.general.name;\n\n        for (let player of undefeatedPlayers) {\n            await this._trySendEmailToPlayer(player, this.TEMPLATES.NEXT_TURN_REMINDER, [\n                gameName,\n                gameUrl\n            ]);\n        }\n    }\n\n    async sendGameTimedOutEmail(gameId: DBObjectId) {\n        let game = (await this.gameService.getById(gameId))!;\n        let gameName = game.settings.general.name;\n\n        for (let player of game.galaxy.players.filter(p => p.userId)) {\n            await this._trySendEmailToPlayer(player, this.TEMPLATES.GAME_TIMED_OUT, [\n                gameName\n            ]);\n        }\n    }\n\n    async sendGamePlayerAfkEmail(args: GamePlayerAFKEvent) {\n        let game = (await this.gameService.getById(args.gameId))!;\n\n        // Don't bother sending AFK emails for tutorials.\n        if (this.gameTypeService.isTutorialGame(game)) {\n            return;\n        }\n\n        let player = this.playerService.getById(game, args.playerId!);\n        \n        if (player && player.userId) {\n            let gameUrl = `${this.config.clientUrl}/#/game?id=${game._id}`;\n            let gameName = game.settings.general.name;\n\n            await this._trySendEmailToPlayer(player, this.TEMPLATES.GAME_PLAYER_AFK, [\n                gameName,\n                gameUrl\n            ]);\n        }\n    }\n\n    async _trySendEmailToPlayer(player: Player, template: EmailTemplate, args: string[]) {\n        if (!player.userId) {\n            throw new Error(`Cannot send an email to an unknown player.`)\n        }\n\n        let user = await this.userService.getEmailById(player.userId!);\n            \n        if (user && user.emailEnabled) {\n            try {\n                await this.sendTemplate(user.email, template, args);\n            } catch (err) {\n                console.error(err);\n            }\n        }\n    }\n\n};\n"],
  "mappings": "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",
  "names": []
}
