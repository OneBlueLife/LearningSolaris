{
  "version": 3,
  "sources": ["../../../server/services/paypal.ts"],
  "sourcesContent": ["import { DBObjectId } from \"./types/DBObjectId\";\nimport Repository from \"./repository\";\nimport { Payment } from \"./types/Payment\";\nimport CacheService from \"./cache\";\nimport UserService from \"./user\";\nimport { Config } from \"../config/types/Config\";\n\nconst axios = require('axios');\n\nconst CURRENCY = 'GBP';\nconst CACHE_KEY_TOKEN = 'paypalToken';\n\nexport default class PaypalService {\n    PaymentModel: any;\n    config: Config;\n    paymentRepo: Repository<Payment>;\n    userService: UserService;\n    cacheService: CacheService;\n\n    API = {\n        sandbox: {\n            auth: 'https://api-m.sandbox.paypal.com/v1/oauth2/token',\n            payment: 'https://api-m.sandbox.paypal.com/v1/payments/payment',\n            execute: (paymentId: string) => `https://api-m.sandbox.paypal.com/v1/payments/payment/${paymentId}/execute`,\n            capture: (authorizationId: string) => `https://api-m.sandbox.paypal.com/v1/payments/authorization/${authorizationId}/capture`\n        },\n        production: {\n            auth: 'https://api-m.paypal.com/v1/oauth2/token',\n            payment: 'https://api-m.paypal.com/v1/payments/payment',\n            execute: (paymentId: string) => `https://api-m.paypal.com/v1/payments/payment/${paymentId}/execute`,\n            capture: (authorizationId: string) => `https://api-m.paypal.com/v1/payments/authorization/${authorizationId}/capture`\n        }\n    };\n\n    constructor (\n        PaymentModel,\n        config: Config,\n        paymentRepo: Repository<Payment>,\n        userService: UserService,\n        cacheService: CacheService\n    ) {\n        this.PaymentModel= PaymentModel;\n        this.config = config;\n        this.paymentRepo = paymentRepo;\n        this.userService = userService;\n        this.cacheService = cacheService;\n    }\n\n    async authorize() {\n        let cached = this.cacheService.get(CACHE_KEY_TOKEN);\n\n        if (cached) {\n            return cached;\n        }\n\n        const environment = this.config.paypal.environment;\n\n        const params = new URLSearchParams()\n        params.append('grant_type', 'client_credentials')\n\n        let authResponse = await axios.post(this.API[environment].auth, params, {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            auth: {\n                username: this.config.paypal.clientId,\n                password: this.config.paypal.clientSecret\n            }\n        });\n\n        let token = authResponse.data.access_token;\n\n        this.cacheService.put(CACHE_KEY_TOKEN, token, 3600000); // 1 hour\n\n        return token;\n    }\n\n    async authorizePayment(userId: DBObjectId, totalQuantity: number, totalCost: number, unitCost: number, returnUrl: string, cancelUrl: string) {\n        const environment = this.config.paypal.environment;\n\n        // Get a token from PayPal\n        let token = await this.authorize();\n        const requestOptions = {\n            headers: {\n                'Authorization': 'Bearer ' + token\n            }\n        };\n\n        // Authorize a payment\n        let paymentResponse = await axios.post(this.API[environment].payment, {\n            intent: 'authorize',\n            payer: {\n                payment_method: \"paypal\"\n            },\n            transactions: [\n                {\n                    amount: {\n                        total: totalCost.toFixed(2),\n                        currency: CURRENCY\n                    },\n                    description: `${totalQuantity} Galactic Tokens on Solaris`,\n                    item_list: {\n                        items: [\n                            {\n                                name: \"Galactic Tokens\",\n                                quantity: totalQuantity,\n                                price: unitCost.toFixed(2),\n                                currency: CURRENCY\n                            }\n                        ]\n                    }\n                }\n            ],\n            note_to_payer: \"Contact us for any questions on your order.\",\n            redirect_urls: {\n                return_url: returnUrl,\n                cancel_url: cancelUrl\n            }\n        }, requestOptions);\n\n        // Create a payment in the database against the user so it can be retrieved later when processing the payment.\n        let payment = new this.PaymentModel({\n            userId,\n            paymentId: paymentResponse.data.id,\n            totalCost,\n            totalQuantity,\n            unitCost\n        });\n\n        await payment.save();\n\n        // Redirect the user to the authorize URL\n        let approvalUrl = paymentResponse.data.links.find((l) => l.rel === 'approval_url').href;\n\n        return approvalUrl;\n    }\n\n    async processPayment(paymentId: string, payerId: string) {\n        const environment = this.config.paypal.environment;\n        \n        // Get the payment from the DB to verify transaction.\n        const payment = await this.paymentRepo.findOne({\n            paymentId\n        });\n\n        if (!payment) {\n            throw new Error(`Payment not found with id: ${paymentId}`);\n        }\n\n        // Get a token from PayPal\n        let token = await this.authorize();\n        const requestOptions = {\n            headers: {\n                'Authorization': 'Bearer ' + token\n            }\n        };\n\n        // Execute the approved payment\n        let executeResponse = await axios.post(this.API[environment].execute(paymentId), {\n            payer_id: payerId\n        }, requestOptions);\n\n        if (executeResponse.status !== 200) {\n            throw new Error(`Execute payment request failed: ${paymentId}`);\n        }\n\n        for (let transaction of executeResponse.data.transactions) {\n            const authorizationId = transaction.related_resources.find((r) => r.authorization != null).authorization.id;\n\n            // Capture the payment.\n            const authResponse = await axios.post(this.API[environment].capture(authorizationId), {\n                amount: {\n                    total: parseFloat(transaction.amount.total).toFixed(2),\n                    currency: transaction.amount.currency\n                }\n            }, requestOptions);\n\n            if (authResponse.status !== 201) {\n                throw new Error(`Authorize payment request failed: ${authorizationId}`);\n            }\n        }\n\n        // Add credits to the users account.\n        await this.userService.incrementCreditsByPurchase(payment.userId, payment.totalQuantity);\n\n        return {\n            galacticTokens: payment.totalQuantity\n        };\n    }\n\n};\n"],
  "mappings": "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",
  "names": []
}
