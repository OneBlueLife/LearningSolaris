{
  "version": 3,
  "sources": ["../../../server/services/player.ts"],
  "sourcesContent": ["const mongoose = require('mongoose');\nconst moment = require('moment');\nconst EventEmitter = require('events');\nimport Repository from './repository';\nimport { DBObjectId } from './types/DBObjectId';\nimport { Game } from './types/Game';\nimport { Location } from './types/Location';\nimport { Player, PlayerColour, PlayerColourShapeCombination, PlayerShape, ResearchTypeNotRandom } from './types/Player';\nimport { Star } from './types/Star';\nimport CarrierService from './carrier';\nimport GameTypeService from './gameType';\nimport MapService from './map';\nimport PlayerReadyService from './playerReady';\nimport RandomService from './random';\nimport SpecialistService from './specialist';\nimport StarService from './star';\nimport StarDistanceService from './starDistance';\nimport TechnologyService from './technology';\nimport ValidationError from '../errors/validation';\n\nexport default class PlayerService extends EventEmitter {\n    gameRepo: Repository<Game>;\n    randomService: RandomService;\n    mapService: MapService;\n    starService: StarService;\n    carrierService: CarrierService;\n    starDistanceService: StarDistanceService;\n    technologyService: TechnologyService;\n    specialistService: SpecialistService;\n    gameTypeService: GameTypeService;\n    playerReadyService: PlayerReadyService;\n\n    constructor(\n        gameRepo: Repository<Game>,\n        randomService: RandomService,\n        mapService: MapService,\n        starService: StarService,\n        carrierService: CarrierService,\n        starDistanceService: StarDistanceService,\n        technologyService: TechnologyService,\n        specialistService: SpecialistService,\n        gameTypeService: GameTypeService,\n        playerReadyService: PlayerReadyService\n    ) {\n        super();\n\n        this.gameRepo = gameRepo;\n        this.randomService = randomService;\n        this.mapService = mapService;\n        this.starService = starService;\n        this.carrierService = carrierService;\n        this.starDistanceService = starDistanceService;\n        this.technologyService = technologyService;\n        this.specialistService = specialistService;\n        this.gameTypeService = gameTypeService;\n        this.playerReadyService = playerReadyService;\n    }\n\n    getById(game: Game, playerId: DBObjectId) {\n        return game.galaxy.players.find(p => p._id.toString() === playerId.toString());\n    }\n\n    getByUserId(game: Game, userId: DBObjectId) {\n        return game.galaxy.players.find(p => p.userId && p.userId.toString() === userId.toString());\n    }\n\n    getPlayersWithinScanningRangeOfPlayer(game: Game, players: Player[], player: Player) {\n        let inRange = [player];\n        let playerStars = this.starService.listStarsWithScanningRangeByPlayer(game, player._id);\n\n        for (let otherPlayer of players) {\n            if (inRange.indexOf(otherPlayer) > -1) {\n                continue;\n            }\n\n            let otherPlayerStars = this.starService.listStarsOwnedByPlayer(game.galaxy.stars, otherPlayer._id);\n\n            let isInRange = false;\n\n            for (let s of otherPlayerStars) {\n                if (this.starService.isStarWithinScanningRangeOfStars(game, s, playerStars)) {\n                    isInRange = true;\n                    break;\n                }\n            }\n\n            if (isInRange) {\n                inRange.push(otherPlayer);\n            }\n        }\n\n        return inRange;\n    }\n\n    isInScanningRangeOfPlayer(game: Game, sourcePlayer: Player, targetPlayer: Player) {\n        return this.getPlayersWithinScanningRangeOfPlayer(game, [targetPlayer], sourcePlayer)\n            .find(p => p._id.toString() === targetPlayer._id.toString()) != null;\n    }\n\n    createEmptyPlayer(game: Game, colour: PlayerColour, shape: PlayerShape): Player {\n        let researchingNow: ResearchTypeNotRandom = 'terraforming';\n        let researchingNext: ResearchTypeNotRandom = 'terraforming';\n\n        let player: Player = {\n            _id: mongoose.Types.ObjectId(),\n            userId: null,\n            homeStarId: null,\n            alias: 'Empty Slot',\n            avatar: null,\n            notes: null,\n            colour: colour,\n            shape: shape,\n            lastSeen: null,\n            lastSeenIP: null,\n            researchingNow,\n            researchingNext,\n            credits: game.settings.player.startingCredits,\n            creditsSpecialists: game.settings.player.startingCreditsSpecialists,\n            isOpenSlot: true,\n            defeated: false,\n            defeatedDate: null,\n            afk: false,\n            renownToGive: game.settings.general.playerLimit,\n            ready: false,\n            readyToCycle: false,\n            readyToQuit: false,\n            missedTurns: 0,\n            hasSentTurnReminder: false,\n            hasFilledAfkSlot: false,\n            research: {\n                terraforming: { level: game.settings.technology.startingTechnologyLevel.terraforming },\n                experimentation: { level: game.settings.technology.startingTechnologyLevel.experimentation },\n                scanning: { level: game.settings.technology.startingTechnologyLevel.scanning },\n                hyperspace: { level: game.settings.technology.startingTechnologyLevel.hyperspace },\n                manufacturing: { level: game.settings.technology.startingTechnologyLevel.manufacturing },\n                banking: { level: game.settings.technology.startingTechnologyLevel.banking },\n                weapons: { level: game.settings.technology.startingTechnologyLevel.weapons },\n                specialists: { level: game.settings.technology.startingTechnologyLevel.specialists }\n            },\n            ledger: {\n                credits: [],\n                creditsSpecialists: [],\n            },\n            reputations: [],\n            diplomacy: [],\n            spectators: [],\n        };\n\n        this._setDefaultResearchTechnology(game, player as any);\n\n        return player;\n    }\n\n    createEmptyPlayers(game: Game) {\n        let players: Player[] = [];\n\n        let shapeColours = this._generatePlayerColourShapeList(game.settings.general.playerLimit);\n\n        for (let i = 0; i < game.settings.general.playerLimit; i++) {\n            let shapeColour = shapeColours[i];\n\n            players.push(this.createEmptyPlayer(game, shapeColour.colour, shapeColour.shape));\n        }\n\n        if (game.galaxy.homeStars && game.galaxy.homeStars.length) {\n            this._distributePlayerLinkedHomeStars(game, players);\n        } else {\n            this._distributePlayerHomeStars(game, players);\n        }\n\n        if (game.galaxy.linkedStars && game.galaxy.linkedStars.length) {\n            this._distributePlayerLinkedStartingStars(game, players);\n        }\n        else {\n            this._distributePlayerStartingStars(game, players);\n        }\n\n        return players;\n    }\n\n    _generatePlayerColourShapeList(playerCount: number) {\n        let shapes: PlayerShape[] = ['circle', 'square', 'diamond', 'hexagon'];\n        let colours = require('../config/game/colours').slice();\n\n        let combinations: PlayerColourShapeCombination[] = [];\n\n        for (let shape of shapes) {\n            for (let colour of colours) {\n                combinations.push({\n                    shape,\n                    colour\n                });\n            }\n        }\n\n        let result: PlayerColourShapeCombination[] = [];\n\n        const maxAttempts: number = 2;\n        let attempts: number = 0;\n\n        while (result.length !== playerCount) {\n            // Choose a random shape colour combination\n            let shapeColourIndex = this.randomService.getRandomNumber(combinations.length - 1);\n            let shapeColour = combinations[shapeColourIndex];\n\n            // Test if the colour is already in the list,\n            // if it is, try again up to the max attempt limit.\n            // Ideally we do not want to have the same colours often.\n            let existingColour = result.find(r => r.colour.alias === shapeColour.colour.alias);\n\n            if (!existingColour || attempts >= maxAttempts) {\n                combinations.splice(shapeColourIndex, 1);\n                result.push(shapeColour);\n                attempts = 0;\n            } else {\n                attempts++;\n            }\n        }\n\n        return result;\n    }\n\n    _distributePlayerLinkedHomeStars(game: Game, players: Player[]) {\n        for (let player of players) {\n            let homeStarId = game.galaxy.homeStars!.pop()!;\n\n            // Set up the home star\n            let homeStar = this.starService.getById(game, homeStarId);\n\n            this.starService.setupHomeStar(game, homeStar, player, game.settings);\n        }\n    }\n\n    _distributePlayerHomeStars(game: Game, players: Player[]) {\n        // Divide the galaxy into equal chunks, each player will spawned\n        // at near equal distance from the center of the galaxy.\n        const starLocations = game.galaxy.stars.map(s => s.location);\n\n        // Calculate the center point of the galaxy as we need to add it onto the starting location.\n        let galaxyCenter = this.mapService.getGalaxyCenterOfMass(starLocations);\n\n        const distanceFromCenter = this._getDesiredPlayerDistanceFromCenter(game);\n\n        let radians = this._getPlayerStartingLocationRadians(game.settings.general.playerLimit);\n\n        // Create each player starting at angle 0 at a distance of half the galaxy radius\n\n        for(let player of players) {\n            let homeStar = this._getNewPlayerHomeStar(game, starLocations, galaxyCenter, distanceFromCenter, radians);\n\n            // Set up the home star\n            this.starService.setupHomeStar(game, homeStar, player, game.settings);\n        }\n    }\n\n    _getDesiredPlayerDistanceFromCenter(game: Game) {\n        let distanceFromCenter;\n        const locations = game.galaxy.stars.map(s => s.location);\n\n        // doughnut galaxies need the distance from the center needs to be slightly more than others\n        // spiral galaxies need the distance to be slightly less, and they have a different galactic center\n        if (game.settings.galaxy.galaxyType === 'doughnut') {\n            distanceFromCenter = (this.starDistanceService.getMaxGalaxyDiameter(locations) / 2) * (3/4);\n        } else if(game.settings.galaxy.galaxyType === 'spiral') {\n            distanceFromCenter = this.starDistanceService.getMaxGalaxyDiameter(locations) / 2 / 2;\n        } else{\n            // The desired distance from the center is on two thirds from the galaxy center and the edge\n            // for all galaxies other than doughnut and spiral.\n            distanceFromCenter = (this.starDistanceService.getMaxGalaxyDiameter(locations) / 2) * (2/3);\n        }\n\n        return distanceFromCenter;\n    }\n\n    _distributePlayerLinkedStartingStars(game: Game, players: Player[]) {\n        for (let player of players) {\n            let linkedStars = game.galaxy.linkedStars.pop()!;\n\n            for (let starId of linkedStars) {\n                let star = this.starService.getById(game, starId);\n\n                this.starService.setupPlayerStarForGameStart(game, star, player);\n            }\n        }\n    }\n\n    _distributePlayerStartingStars(game: Game, players: Player[]) {\n        // The fairest way to distribute stars to players is to\n        // iterate over each player and give them 1 star at a time, this is arguably the fairest way\n        // otherwise we'll end up with the last player potentially having a really bad position as their\n        // stars could be miles away from their home star.\n        let starsToDistribute = game.settings.player.startingStars - 1;\n\n        while (starsToDistribute--) {\n            for (let player of players) {\n                let homeStar = this.starService.getById(game, player.homeStarId!);\n\n                // Get X closest stars to the home star and also give those to the player.\n                let s = this.starDistanceService.getClosestUnownedStar(homeStar, game.galaxy.stars);\n\n                // Set up the closest star.\n                this.starService.setupPlayerStarForGameStart(game, s, player);\n            }\n        }\n    }\n\n    resetPlayerForGameStart(game: Game, player: Player) {\n        player.userId = null;\n        player.alias = \"Empty Slot\";\n        player.avatar = null;\n        player.credits = game.settings.player.startingCredits;\n        player.creditsSpecialists = game.settings.player.startingCreditsSpecialists;\n        player.ready = false;\n        player.readyToCycle = false;\n        player.readyToQuit = false;\n        player.isOpenSlot = true;\n        player.spectators = [];\n\n        // Reset the player's research\n        this._setDefaultResearchTechnology(game, player);\n\n        // Reset the player's stars.\n        let playerStars = this.starService.listStarsOwnedByPlayer(game.galaxy.stars, player._id);\n\n        for (let star of playerStars) {\n            this.starService.setupPlayerStarForGameStart(game, star, player);\n        }\n\n        // Reset the player's carriers\n        this.carrierService.clearPlayerCarriers(game, player);\n\n        let homeCarrier = this.createHomeStarCarrier(game, player);\n\n        game.galaxy.carriers.push(homeCarrier as any);\n    }\n\n    _getNewPlayerHomeStar(game: Game, starLocations: Location[], galaxyCenter: Location, distanceFromCenter: number, radians: number[]) {\n        switch (game.settings.specialGalaxy.playerDistribution) {\n            case 'circular':\n                return this._getNewPlayerHomeStarCircular(game, starLocations, galaxyCenter, distanceFromCenter, radians);\n            case 'random':\n                return this._getNewPlayerHomeStarRandom(game);\n        }\n\n        throw new Error(`Unsupported player distribution setting: ${game.settings.specialGalaxy.playerDistribution}`);\n    }\n\n    _getNewPlayerHomeStarCircular(game: Game, starLocations: Location[], galaxyCenter: Location, distanceFromCenter: number, radians: number[]) {\n        // Get the player's starting location.\n        let startingLocation = this._getPlayerStartingLocation(radians, galaxyCenter, distanceFromCenter);\n\n        // Find the star that is closest to this location, that will be the player's home star.\n        let homeStar = this.starDistanceService.getClosestUnownedStarFromLocation(startingLocation, game.galaxy.stars);\n\n        return homeStar;\n    }\n\n    _getNewPlayerHomeStarRandom(game: Game) {\n        // Pick a random unowned star.\n        let unownedStars = game.galaxy.stars.filter(s => s.ownedByPlayerId == null);\n\n        let rnd = this.randomService.getRandomNumber(unownedStars.length);\n\n        return unownedStars[rnd];\n    }\n\n    _getPlayerStartingLocationRadians(playerCount: number) {\n        const increment = 360 / playerCount * Math.PI / 180;\n        let current = 0;\n\n        let radians: number[] = [];\n\n        for (let i = 0; i < playerCount; i++) {\n            radians.push(current);\n            current += increment;\n        }\n\n        return radians;\n    }\n\n    _getPlayerStartingLocation(radians: number[], galaxyCenter: Location, distanceFromCenter: number) {\n        // Pick a random radian for the player's starting position.\n        let radianIndex = this.randomService.getRandomNumber(radians.length);\n        let currentRadians = radians.splice(radianIndex, 1)[0];\n\n        // Get the desired player starting location.\n        let startingLocation = {\n            x: distanceFromCenter * Math.cos(currentRadians),\n            y: distanceFromCenter * Math.sin(currentRadians)\n        };\n\n        // Add the galaxy center x and y so that the desired location is relative to the center.\n        startingLocation.x += galaxyCenter.x;\n        startingLocation.y += galaxyCenter.y;\n\n        return startingLocation;\n    }\n\n    _setDefaultResearchTechnology(game: Game, player: Player) {\n        let enabledTechs = this.technologyService.getEnabledTechnologies(game);\n\n        player.researchingNow = enabledTechs[0] || 'weapons';\n        player.researchingNext = player.researchingNow;\n    }\n\n    createHomeStarCarriers(game: Game) {\n        let carriers: any[] = [];\n\n        for (let i = 0; i < game.galaxy.players.length; i++) {\n            let player = game.galaxy.players[i];\n\n            let homeCarrier = this.createHomeStarCarrier(game, player);\n\n            carriers.push(homeCarrier);\n        }\n\n        return carriers;\n    }\n\n    createHomeStarCarrier(game: Game, player: Player) {\n        let homeStar = this.starService.getPlayerHomeStar(game.galaxy.stars, player);\n\n        if (!homeStar) {\n            throw new Error('The player must have a home star in order to set up a carrier');\n        }\n\n        // Create a carrier for the home star.\n        let homeCarrier = this.carrierService.createAtStar(homeStar, game.galaxy.carriers);\n\n        return homeCarrier;\n    }\n\n    updateLastSeen(game: Game, player: Player, date?: Date) {\n        player.lastSeen = date || moment().utc();\n    }\n\n    async updateLastSeenLean(gameId: DBObjectId, userId: DBObjectId, ipAddress: string) {\n        await this.gameRepo.updateOne({\n            _id: gameId,\n            'galaxy.players.userId': userId\n        }, {\n            $set: {\n                'galaxy.players.$.lastSeen': moment().utc(),\n                'galaxy.players.$.lastSeenIP': ipAddress\n            }\n        });\n    }\n\n    deductCarrierUpkeepCost(game: Game, player: Player) {\n        const upkeepCosts = {\n            'none': 0,\n            'cheap': 1,\n            'standard': 3,\n            'expensive': 6\n        };\n\n        let costPerCarrier = upkeepCosts[game.settings.specialGalaxy.carrierUpkeepCost];\n\n        if (!costPerCarrier) {\n            return null;\n        }\n\n        let carrierCount = this.carrierService.listCarriersOwnedByPlayer(game.galaxy.carriers, player._id).length;\n        let totalCost = carrierCount * costPerCarrier;\n\n        player.credits -= totalCost; // Note: Don't care if this goes into negative figures.\n\n        return {\n            carrierCount,\n            totalCost\n        };\n    }\n\n    async getGameNotes(game: Game, player: Player) {\n        return player.notes;\n    }\n\n    async updateGameNotes(game: Game, player: Player, notes: string) {\n        if (notes.length > 2000) {\n            throw new ValidationError('Notes cannot exceed 2000 characters.');\n        }\n\n        player.notes = notes;\n\n        await this.gameRepo.updateOne({\n            _id: game._id,\n            'galaxy.players._id': player._id\n        }, {\n            $set: {\n                'galaxy.players.$.notes': notes\n            }\n        });\n    }\n\n    ownsOriginalHomeStar(game: Game, player: Player) {\n        const stars = this.starService.listStarsOwnedByPlayer(game.galaxy.stars, player._id);\n\n        return stars.find(s => s._id.toString() === player.homeStarId!.toString()) != null;\n    }\n\n    incrementMissedTurns(game: Game) {\n        for (let player of game.galaxy.players) {\n            // If the player isn't ready, increase their number of missed turns.\n            if (!player.ready && !player.defeated) {\n                player.missedTurns++;\n            }\n            else {\n                // Reset the missed turns if the player was ready, we'll kick the player if they have missed consecutive turns only.\n                player.missedTurns = 0;\n            }\n        }\n    }\n\n    setPlayerAsDefeated(game: Game, player: Player, openSlot: boolean) {\n        player.isOpenSlot = openSlot;\n        player.defeated = true;\n        player.defeatedDate = moment().utc();\n\n        player.researchingNext = 'random'; // Set up the AI for random research.\n\n        // Auto-ready the player so they don't hold up the game.\n        if (game.settings.gameTime.gameType === 'turnBased') {\n            player.ready = true;\n        }\n\n        // Make sure all stars are marked as not ignored - This is so the AI can bulk upgrade them.\n        const playerStars = this.starService.listStarsOwnedByPlayer(game.galaxy.stars, player._id);\n\n        for (let star of playerStars) {\n            this.starService.resetIgnoreBulkUpgradeStatuses(star);\n        }\n\n        // Clear out any carriers that have looped waypoints.\n        this.carrierService.clearPlayerCarrierWaypointsLooped(game, player);\n    }\n\n    setPlayerAsAfk(game: Game, player: Player) {\n        this.setPlayerAsDefeated(game, player, true);\n\n        player.isOpenSlot = true; // AFK players will always have their slots open.\n        player.afk = true;\n    }\n\n    hasDuplicateLastSeenIP(game: Game, player: Player) {\n        if (!player.lastSeenIP) {\n            return false;\n        }\n\n        return game.galaxy.players.find(p => p.lastSeenIP\n            && p._id.toString() !== player._id.toString()\n            && p.lastSeenIP === player.lastSeenIP) != null;\n    }\n\n    getKingOfTheHillPlayer(game: Game) {\n        const star = this.starService.getKingOfTheHillStar(game);\n\n        if (!star.ownedByPlayerId) {\n            return null;\n        }\n\n        return this.getById(game, star.ownedByPlayerId)!;\n    }\n\n    async setHasSentTurnReminder(game: Game, player: Player, sent: boolean) {\n        await this.gameRepo.updateOne({\n            _id: game._id,\n            'galaxy.players._id': player._id\n        }, {\n            $set: {\n                'galaxy.players.$.hasSentTurnReminder': sent\n            }\n        });\n    }\n\n}\n"],
  "mappings": "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",
  "names": ["ValidationError"]
}
