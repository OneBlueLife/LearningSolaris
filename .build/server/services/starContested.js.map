{
  "version": 3,
  "sources": ["../../../server/services/starContested.ts"],
  "sourcesContent": ["import { Game } from './types/Game';\nimport DiplomacyService from './diplomacy';\n\nexport default class StarContestedService {\n\n    diplomacyService: DiplomacyService;\n\n    constructor(\n        diplomacyService: DiplomacyService\n    ) {\n        this.diplomacyService = diplomacyService;\n    }\n\n    listContestedStars(game: Game) {\n        return game.galaxy.stars\n            .filter(s => s.ownedByPlayerId)\n            .map(s => {\n                // Calculate other players in orbit of the star\n                let carriersInOrbit = game.galaxy.carriers.filter(c => c.orbiting && c.orbiting.toString() === s._id.toString());\n                let otherPlayerIdsInOrbit = [...new Set(carriersInOrbit.map(c => c.ownedByPlayerId!))];\n\n                if (otherPlayerIdsInOrbit.indexOf(s.ownedByPlayerId!) > -1) {\n                    otherPlayerIdsInOrbit.splice(otherPlayerIdsInOrbit.indexOf(s.ownedByPlayerId!), 1); // Remove the star owner as we don't need it here.\n                }\n\n                return {\n                    star: s,\n                    carriersInOrbit,\n                    otherPlayerIdsInOrbit\n                };\n            })\n            .filter(x => {\n                // Filter stars where there are other players in orbit and those players are not allied with the star owner.\n                return x.otherPlayerIdsInOrbit.length\n                    && !this.diplomacyService.isDiplomaticStatusToPlayersAllied(game, x.star.ownedByPlayerId!, x.otherPlayerIdsInOrbit);\n            });\n    }\n\n    listContestedUnownedStars(game: Game) {\n        return game.galaxy.stars\n            .filter(s => s.ownedByPlayerId == null)\n            .map(s => {\n                let carriersInOrbit = game.galaxy.carriers.filter(c => c.orbiting && c.orbiting.toString() === s._id.toString());\n\n                return {\n                    star: s,\n                    carriersInOrbit\n                };\n            })\n            .filter(x => x.carriersInOrbit.length);\n    }\n\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,MAAO,qBAAmC;AAAA,EAItC,YACI,kBACF;AACE,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EAEA,mBAAmB,MAAY;AAC3B,WAAO,KAAK,OAAO,MACd,OAAO,OAAK,EAAE,eAAe,EAC7B,IAAI,OAAK;AAEN,UAAI,kBAAkB,KAAK,OAAO,SAAS,OAAO,OAAK,EAAE,YAAY,EAAE,SAAS,SAAS,MAAM,EAAE,IAAI,SAAS,CAAC;AAC/G,UAAI,wBAAwB,CAAC,GAAG,IAAI,IAAI,gBAAgB,IAAI,OAAK,EAAE,eAAgB,CAAC,CAAC;AAErF,UAAI,sBAAsB,QAAQ,EAAE,eAAgB,IAAI,IAAI;AACxD,8BAAsB,OAAO,sBAAsB,QAAQ,EAAE,eAAgB,GAAG,CAAC;AAAA,MACrF;AAEA,aAAO;AAAA,QACH,MAAM;AAAA,QACN;AAAA,QACA;AAAA,MACJ;AAAA,IACJ,CAAC,EACA,OAAO,OAAK;AAET,aAAO,EAAE,sBAAsB,UACxB,CAAC,KAAK,iBAAiB,kCAAkC,MAAM,EAAE,KAAK,iBAAkB,EAAE,qBAAqB;AAAA,IAC1H,CAAC;AAAA,EACT;AAAA,EAEA,0BAA0B,MAAY;AAClC,WAAO,KAAK,OAAO,MACd,OAAO,OAAK,EAAE,mBAAmB,IAAI,EACrC,IAAI,OAAK;AACN,UAAI,kBAAkB,KAAK,OAAO,SAAS,OAAO,OAAK,EAAE,YAAY,EAAE,SAAS,SAAS,MAAM,EAAE,IAAI,SAAS,CAAC;AAE/G,aAAO;AAAA,QACH,MAAM;AAAA,QACN;AAAA,MACJ;AAAA,IACJ,CAAC,EACA,OAAO,OAAK,EAAE,gBAAgB,MAAM;AAAA,EAC7C;AAEJ;",
  "names": []
}
