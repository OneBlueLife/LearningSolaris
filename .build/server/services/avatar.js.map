{
  "version": 3,
  "sources": ["../../../server/services/avatar.ts"],
  "sourcesContent": ["import { DBObjectId } from './types/DBObjectId';\nimport ValidationError from '../errors/validation';\nimport Repository from './repository';\nimport { Avatar, UserAvatar } from './types/Avatar';\nimport { User } from './types/User';\nimport UserService from './user';\n\nexport default class AvatarService {\n    userRepo: Repository<User>;\n    userService: UserService;\n\n    constructor(\n        userRepo: Repository<User>,\n        userService: UserService\n    ) {\n        this.userRepo = userRepo;\n        this.userService = userService;\n    }\n\n    listAllAvatars(): Avatar[] {\n        return require('../config/game/avatars').slice();\n    }\n\n    listAllSolarisAvatars(): Avatar[] {\n        return this.listAllAvatars().filter(a => !a.isPatronAvatar);\n    }\n\n    listAllAliases(): string[] {\n        return require('../config/game/aliases').slice();\n    }\n\n    async listUserAvatars(userId: DBObjectId): Promise<UserAvatar[]> {\n        let avatars = require('../config/game/avatars').slice();\n\n        let userAvatars = await this.userRepo.findById(userId, {\n            avatars: 1\n        });\n\n        if (!userAvatars) {\n            return [];\n        }\n\n        for (let avatar of avatars) {\n            avatar.purchased = avatar.price == null || (userAvatars.avatars || []).indexOf(avatar.id) > -1;\n        }\n\n        return avatars;\n    }\n\n    async getUserAvatar(userId: DBObjectId, avatarId: number): Promise<UserAvatar> {\n        return (await this.listUserAvatars(userId)).find(a => a.id === avatarId)!;\n    }\n\n    async purchaseAvatar(userId: DBObjectId, avatarId: number) {\n        let userCredits = await this.userService.getCredits(userId);\n        let avatar = await this.getUserAvatar(userId, avatarId);\n\n        if (!avatar) {\n            throw new ValidationError(`Avatar ${avatarId} does not exist.`);\n        }\n\n        if (avatar.purchased) {\n            throw new ValidationError(`You have already purchased this avatar.`);\n        }\n\n        if (userCredits < avatar.price) {\n            throw new ValidationError(`You do not have enough credits to purchase this avatar. The cost is ${avatar.price} credits, you have ${userCredits}.`);\n        }\n\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            $inc: {\n                credits: -avatar.price\n            },\n            $addToSet: {\n                avatars: avatarId\n            }\n        });\n    }\n\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAA4B;AAM5B,MAAO,cAA4B;AAAA,EAI/B,YACI,UACA,aACF;AACE,SAAK,WAAW;AAChB,SAAK,cAAc;AAAA,EACvB;AAAA,EAEA,iBAA2B;AACvB,WAAO,QAAQ,wBAAwB,EAAE,MAAM;AAAA,EACnD;AAAA,EAEA,wBAAkC;AAC9B,WAAO,KAAK,eAAe,EAAE,OAAO,OAAK,CAAC,EAAE,cAAc;AAAA,EAC9D;AAAA,EAEA,iBAA2B;AACvB,WAAO,QAAQ,wBAAwB,EAAE,MAAM;AAAA,EACnD;AAAA,EAEA,MAAM,gBAAgB,QAA2C;AAC7D,QAAI,UAAU,QAAQ,wBAAwB,EAAE,MAAM;AAEtD,QAAI,cAAc,MAAM,KAAK,SAAS,SAAS,QAAQ;AAAA,MACnD,SAAS;AAAA,IACb,CAAC;AAED,QAAI,CAAC,aAAa;AACd,aAAO,CAAC;AAAA,IACZ;AAEA,aAAS,UAAU,SAAS;AACxB,aAAO,YAAY,OAAO,SAAS,SAAS,YAAY,WAAW,CAAC,GAAG,QAAQ,OAAO,EAAE,IAAI;AAAA,IAChG;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,cAAc,QAAoB,UAAuC;AAC3E,YAAQ,MAAM,KAAK,gBAAgB,MAAM,GAAG,KAAK,OAAK,EAAE,OAAO,QAAQ;AAAA,EAC3E;AAAA,EAEA,MAAM,eAAe,QAAoB,UAAkB;AACvD,QAAI,cAAc,MAAM,KAAK,YAAY,WAAW,MAAM;AAC1D,QAAI,SAAS,MAAM,KAAK,cAAc,QAAQ,QAAQ;AAEtD,QAAI,CAAC,QAAQ;AACT,YAAM,IAAI,kBAAAA,QAAgB,UAAU,0BAA0B;AAAA,IAClE;AAEA,QAAI,OAAO,WAAW;AAClB,YAAM,IAAI,kBAAAA,QAAgB,yCAAyC;AAAA,IACvE;AAEA,QAAI,cAAc,OAAO,OAAO;AAC5B,YAAM,IAAI,kBAAAA,QAAgB,uEAAuE,OAAO,2BAA2B,cAAc;AAAA,IACrJ;AAEA,UAAM,KAAK,SAAS,UAAU;AAAA,MAC1B,KAAK;AAAA,IACT,GAAG;AAAA,MACC,MAAM;AAAA,QACF,SAAS,CAAC,OAAO;AAAA,MACrB;AAAA,MACA,WAAW;AAAA,QACP,SAAS;AAAA,MACb;AAAA,IACJ,CAAC;AAAA,EACL;AAEJ;AAAC;",
  "names": ["ValidationError"]
}
