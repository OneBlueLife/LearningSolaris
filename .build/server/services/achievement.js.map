{
  "version": 3,
  "sources": ["../../../server/services/achievement.ts"],
  "sourcesContent": ["import { DBObjectId } from \"./types/DBObjectId\";\nimport Repository from \"./repository\";\nimport { User } from \"./types/User\";\nimport GuildService from \"./guild\";\nimport UserLevelService from \"./userLevel\";\n\nexport default class AchievementService {\n    \n    userRepo: Repository<User>;\n    guildService: GuildService;\n    userLevelService: UserLevelService;\n\n    constructor(userRepo: Repository<User>, guildService: GuildService, userLevelService: UserLevelService) {\n        this.userRepo = userRepo;\n        this.guildService = guildService;\n        this.userLevelService = userLevelService;\n    }\n\n    async getAchievements(id: DBObjectId) {\n        const user = await this.userRepo.findById(id, {\n            // Remove fields we don't want to send back.\n            achievements: 1,\n            guildId: 1,\n            username: 1,\n            'roles.contributor': 1,\n            'roles.developer': 1,\n            'roles.communityManager': 1,\n            'roles.gameMaster': 1\n        });\n\n        if (user) {\n            user.level = this.userLevelService.getByRankPoints(user.achievements.rank);\n        }\n\n        if (user && user.guildId) {\n            return {\n                ...user,\n                guild: await this.guildService.getInfoById(user.guildId)\n            }\n        }\n\n        return user;\n    }\n\n    async incrementAchievement(userId: DBObjectId, achievement: string, amount: number = 1) {\n        let updateQuery = {\n            $inc: {}\n        };\n\n        updateQuery.$inc[achievement] = amount;\n\n        await this.userRepo.updateOne({\n            _id: userId\n        }, updateQuery);\n    }\n\n    async incrementSpecialistsHired(userId: DBObjectId, amount: number = 1) {\n        return await this.incrementAchievement(userId, 'achievements.infrastructure.specialistsHired', amount);\n    }\n\n    async incrementWarpGatesBuilt(userId: DBObjectId, amount: number = 1) {\n        return await this.incrementAchievement(userId, 'achievements.infrastructure.warpGates', amount);\n    }\n\n    async incrementWarpGatesDestroyed(userId: DBObjectId, amount: number = 1) {\n        return await this.incrementAchievement(userId, 'achievements.infrastructure.warpGatesDestroyed', amount);\n    }\n\n    async incrementCarriersBuilt(userId: DBObjectId, amount: number = 1) {\n        return await this.incrementAchievement(userId, 'achievements.infrastructure.carriers', amount);\n    }\n\n    async incrementInfrastructureBuilt(type: string, userId: DBObjectId, amount: number = 1) {\n        switch (type) {\n            case 'economy':\n                await this.incrementEconomyBuilt(userId, amount);\n                break;\n            case 'industry':\n                await this.incrementIndustryBuilt(userId, amount);\n                break;\n            case 'science':\n                await this.incrementScienceBuilt(userId, amount);\n                break;\n        }\n    }\n\n    async incrementEconomyBuilt(userId: DBObjectId, amount: number = 1) {\n        return await this.incrementAchievement(userId, 'achievements.infrastructure.economy', amount);\n    }\n\n    async incrementIndustryBuilt(userId: DBObjectId, amount: number = 1) {\n        return await this.incrementAchievement(userId, 'achievements.infrastructure.industry', amount);\n    }\n\n    async incrementScienceBuilt(userId: DBObjectId, amount: number = 1) {\n        return await this.incrementAchievement(userId, 'achievements.infrastructure.science', amount);\n    }\n\n    async incrementTradeCreditsSent(userId: DBObjectId, amount: number = 0) {\n        return await this.incrementAchievement(userId, 'achievements.trade.creditsSent', amount);\n    }\n\n    async incrementTradeCreditsReceived(userId: DBObjectId, amount: number = 0) {\n        return await this.incrementAchievement(userId, 'achievements.trade.creditsReceived', amount);\n    }\n\n    async incrementTradeCreditsSpecialistsSent(userId: DBObjectId, amount: number = 0) {\n        return await this.incrementAchievement(userId, 'achievements.trade.creditsSpecialistsSent', amount);\n    }\n\n    async incrementTradeCreditsSpecialistsReceived(userId: DBObjectId, amount: number = 0) {\n        return await this.incrementAchievement(userId, 'achievements.trade.creditsSpecialistsReceived', amount);\n    }\n\n    async incrementTradeTechnologySent(userId: DBObjectId, amount: number = 1) {\n        return await this.incrementAchievement(userId, 'achievements.trade.technologySent', amount);\n    }\n\n    async incrementTradeTechnologyReceived(userId: DBObjectId, amount: number = 1) {\n        return await this.incrementAchievement(userId, 'achievements.trade.technologyReceived', amount);\n    }\n\n    async incrementRenownSent(userId: DBObjectId, amount: number = 1) {\n        return await this.incrementAchievement(userId, 'achievements.trade.renownSent', amount);\n    }\n\n    async incrementRenownReceived(userId: DBObjectId, amount: number = 1) {\n        return await this.incrementAchievement(userId, 'achievements.renown', amount);\n    }\n\n    async incrementDefeated(userId: DBObjectId, amount: number = 1) {\n        return await this.incrementAchievement(userId, 'achievements.defeated', amount);\n    }\n\n    async incrementJoined(userId: DBObjectId, amount: number = 1) {\n        return await this.incrementAchievement(userId, 'achievements.joined', amount);\n    }\n\n    async incrementQuit(userId: DBObjectId, amount: number = 1) {\n        return await this.incrementAchievement(userId, 'achievements.quit', amount);\n    }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,MAAO,mBAAiC;AAAA,EAMpC,YAAY,UAA4B,cAA4B,kBAAoC;AACpG,SAAK,WAAW;AAChB,SAAK,eAAe;AACpB,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EAEA,MAAM,gBAAgB,IAAgB;AAClC,UAAM,OAAO,MAAM,KAAK,SAAS,SAAS,IAAI;AAAA,MAE1C,cAAc;AAAA,MACd,SAAS;AAAA,MACT,UAAU;AAAA,MACV,qBAAqB;AAAA,MACrB,mBAAmB;AAAA,MACnB,0BAA0B;AAAA,MAC1B,oBAAoB;AAAA,IACxB,CAAC;AAED,QAAI,MAAM;AACN,WAAK,QAAQ,KAAK,iBAAiB,gBAAgB,KAAK,aAAa,IAAI;AAAA,IAC7E;AAEA,QAAI,QAAQ,KAAK,SAAS;AACtB,aAAO;AAAA,QACH,GAAG;AAAA,QACH,OAAO,MAAM,KAAK,aAAa,YAAY,KAAK,OAAO;AAAA,MAC3D;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,qBAAqB,QAAoB,aAAqB,SAAiB,GAAG;AACpF,QAAI,cAAc;AAAA,MACd,MAAM,CAAC;AAAA,IACX;AAEA,gBAAY,KAAK,eAAe;AAEhC,UAAM,KAAK,SAAS,UAAU;AAAA,MAC1B,KAAK;AAAA,IACT,GAAG,WAAW;AAAA,EAClB;AAAA,EAEA,MAAM,0BAA0B,QAAoB,SAAiB,GAAG;AACpE,WAAO,MAAM,KAAK,qBAAqB,QAAQ,gDAAgD,MAAM;AAAA,EACzG;AAAA,EAEA,MAAM,wBAAwB,QAAoB,SAAiB,GAAG;AAClE,WAAO,MAAM,KAAK,qBAAqB,QAAQ,yCAAyC,MAAM;AAAA,EAClG;AAAA,EAEA,MAAM,4BAA4B,QAAoB,SAAiB,GAAG;AACtE,WAAO,MAAM,KAAK,qBAAqB,QAAQ,kDAAkD,MAAM;AAAA,EAC3G;AAAA,EAEA,MAAM,uBAAuB,QAAoB,SAAiB,GAAG;AACjE,WAAO,MAAM,KAAK,qBAAqB,QAAQ,wCAAwC,MAAM;AAAA,EACjG;AAAA,EAEA,MAAM,6BAA6B,MAAc,QAAoB,SAAiB,GAAG;AACrF,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,cAAM,KAAK,sBAAsB,QAAQ,MAAM;AAC/C;AAAA,MACJ,KAAK;AACD,cAAM,KAAK,uBAAuB,QAAQ,MAAM;AAChD;AAAA,MACJ,KAAK;AACD,cAAM,KAAK,sBAAsB,QAAQ,MAAM;AAC/C;AAAA,IACR;AAAA,EACJ;AAAA,EAEA,MAAM,sBAAsB,QAAoB,SAAiB,GAAG;AAChE,WAAO,MAAM,KAAK,qBAAqB,QAAQ,uCAAuC,MAAM;AAAA,EAChG;AAAA,EAEA,MAAM,uBAAuB,QAAoB,SAAiB,GAAG;AACjE,WAAO,MAAM,KAAK,qBAAqB,QAAQ,wCAAwC,MAAM;AAAA,EACjG;AAAA,EAEA,MAAM,sBAAsB,QAAoB,SAAiB,GAAG;AAChE,WAAO,MAAM,KAAK,qBAAqB,QAAQ,uCAAuC,MAAM;AAAA,EAChG;AAAA,EAEA,MAAM,0BAA0B,QAAoB,SAAiB,GAAG;AACpE,WAAO,MAAM,KAAK,qBAAqB,QAAQ,kCAAkC,MAAM;AAAA,EAC3F;AAAA,EAEA,MAAM,8BAA8B,QAAoB,SAAiB,GAAG;AACxE,WAAO,MAAM,KAAK,qBAAqB,QAAQ,sCAAsC,MAAM;AAAA,EAC/F;AAAA,EAEA,MAAM,qCAAqC,QAAoB,SAAiB,GAAG;AAC/E,WAAO,MAAM,KAAK,qBAAqB,QAAQ,6CAA6C,MAAM;AAAA,EACtG;AAAA,EAEA,MAAM,yCAAyC,QAAoB,SAAiB,GAAG;AACnF,WAAO,MAAM,KAAK,qBAAqB,QAAQ,iDAAiD,MAAM;AAAA,EAC1G;AAAA,EAEA,MAAM,6BAA6B,QAAoB,SAAiB,GAAG;AACvE,WAAO,MAAM,KAAK,qBAAqB,QAAQ,qCAAqC,MAAM;AAAA,EAC9F;AAAA,EAEA,MAAM,iCAAiC,QAAoB,SAAiB,GAAG;AAC3E,WAAO,MAAM,KAAK,qBAAqB,QAAQ,yCAAyC,MAAM;AAAA,EAClG;AAAA,EAEA,MAAM,oBAAoB,QAAoB,SAAiB,GAAG;AAC9D,WAAO,MAAM,KAAK,qBAAqB,QAAQ,iCAAiC,MAAM;AAAA,EAC1F;AAAA,EAEA,MAAM,wBAAwB,QAAoB,SAAiB,GAAG;AAClE,WAAO,MAAM,KAAK,qBAAqB,QAAQ,uBAAuB,MAAM;AAAA,EAChF;AAAA,EAEA,MAAM,kBAAkB,QAAoB,SAAiB,GAAG;AAC5D,WAAO,MAAM,KAAK,qBAAqB,QAAQ,yBAAyB,MAAM;AAAA,EAClF;AAAA,EAEA,MAAM,gBAAgB,QAAoB,SAAiB,GAAG;AAC1D,WAAO,MAAM,KAAK,qBAAqB,QAAQ,uBAAuB,MAAM;AAAA,EAChF;AAAA,EAEA,MAAM,cAAc,QAAoB,SAAiB,GAAG;AACxD,WAAO,MAAM,KAAK,qBAAqB,QAAQ,qBAAqB,MAAM;AAAA,EAC9E;AACJ;AAAC;",
  "names": []
}
