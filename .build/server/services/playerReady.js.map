{
  "version": 3,
  "sources": ["../../../server/services/playerReady.ts"],
  "sourcesContent": ["const EventEmitter = require('events');\nimport ValidationError from '../errors/validation';\nimport Repository from './repository';\nimport { Game } from './types/Game';\nimport { Player } from './types/Player';\nimport GameTypeService from './gameType';\n\nexport const PlayerReadyServiceEvents = {\n    onGamePlayerReady: 'onGamePlayerReady'\n}\n\nexport default class PlayerReadyService extends EventEmitter {\n    gameRepo: Repository<Game>;\n    gameTypeService: GameTypeService;\n\n    constructor(\n        gameRepo: Repository<Game>,\n        gameTypeService: GameTypeService\n    ) {\n        super();\n\n        this.gameRepo = gameRepo;\n        this.gameTypeService = gameTypeService\n    }\n\n    async declareReady(game: Game, player: Player) {\n        player.ready = true;\n\n        await this.gameRepo.updateOne({\n            _id: game._id,\n            'galaxy.players._id': player._id\n        }, {\n            $set: {\n                'galaxy.players.$.ready': true\n            }\n        });\n\n        this.emit(PlayerReadyServiceEvents.onGamePlayerReady, {\n            gameId: game._id,\n            gameTick: game.state.tick,\n        });\n    }\n\n    async declareReadyToCycle(game: Game, player: Player) {\n        player.ready = true;\n        player.readyToCycle = true;\n\n        await this.gameRepo.updateOne({\n            _id: game._id,\n            'galaxy.players._id': player._id\n        }, {\n            $set: {\n                'galaxy.players.$.ready': true,\n                'galaxy.players.$.readyToCycle': true\n            }\n        });\n\n        this.emit(PlayerReadyServiceEvents.onGamePlayerReady, {\n            gameId: game._id,\n            gameTick: game.state.tick,\n        });\n    }\n\n    async undeclareReady(game: Game, player: Player) {\n        player.ready = false;\n        player.readyToCycle = false;\n\n        await this.gameRepo.updateOne({\n            _id: game._id,\n            'galaxy.players._id': player._id\n        }, {\n            $set: {\n                'galaxy.players.$.ready': false,\n                'galaxy.players.$.readyToCycle': false\n            }\n        });\n    }\n\n    async declareReadyToQuit(game: Game, player: Player, force: boolean = false) {\n        if (!force && game.state.productionTick <= 0) {\n            throw new ValidationError('Cannot declare ready to quit until at least 1 production cycle has completed.');\n        }\n\n        if (!force && this.gameTypeService.isTutorialGame(game)) {\n            throw new ValidationError('Cannot declare ready to quit in a tutorial.');\n        }\n\n        player.readyToQuit = true;\n\n        await this.gameRepo.updateOne({\n            _id: game._id,\n            'galaxy.players._id': player._id\n        }, {\n            $set: {\n                'galaxy.players.$.readyToQuit': true\n            }\n        });\n    }\n\n    async undeclareReadyToQuit(game: Game, player: Player) {\n        if (game.state.productionTick <= 0) {\n            throw new ValidationError('Cannot undeclare ready to quit until at least 1 production cycle has completed.');\n        }\n\n        if (this.gameTypeService.isTutorialGame(game)) {\n            throw new ValidationError('Cannot undeclare ready to quit in a tutorial.');\n        }\n\n        player.readyToQuit = false;\n\n        await this.gameRepo.updateOne({\n            _id: game._id,\n            'galaxy.players._id': player._id\n        }, {\n            $set: {\n                'galaxy.players.$.readyToQuit': false\n            }\n        });\n    }\n\n    resetReadyStatuses(game: Game, hasProductionTicked: boolean) {\n        for (let player of game.galaxy.players) {\n            // Reset whether we have sent the player a turn reminder.\n            player.hasSentTurnReminder = false;\n\n            // Reset the ready status for players who have a legit user.\n            // Accounts could be deleted, could be a tutorial etc.\n            if (player.userId == null) {\n                player.ready = true;\n                player.readyToCycle = true;\n            }\n            // If the player hasn't ready to cycled then standard procedure applies.\n            else if (!player.readyToCycle) {\n                player.ready = false;\n            }\n            // Otherwise if they have ready to cycled then reset only if a production cycle has occurred.\n            else if (player.readyToCycle && hasProductionTicked) {\n                player.ready = false;\n                player.readyToCycle = false;\n            }\n        }\n    }\n\n}\n"],
  "mappings": "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",
  "names": ["ValidationError"]
}
