{
  "version": 3,
  "sources": ["../../../server/services/gameCreateValidation.ts"],
  "sourcesContent": ["import ValidationError from '../errors/validation';\nimport { Game } from './types/Game';\nimport CarrierService from './carrier';\nimport GameTypeService from './gameType';\nimport PlayerService from './player';\nimport SpecialistService from './specialist';\nimport StarService from './star';\n\nexport default class GameCreateValidationService {\n    playerService: PlayerService;\n    starService: StarService;\n    carrierService: CarrierService;\n    specialistService: SpecialistService;\n    gameTypeService: GameTypeService;\n    \n    constructor(\n        playerService: PlayerService,\n        starService: StarService,\n        carrierService: CarrierService,\n        specialistService: SpecialistService,\n        gameTypeService: GameTypeService\n    ) {\n        this.playerService = playerService;\n        this.starService = starService;\n        this.carrierService = carrierService;\n        this.specialistService = specialistService;\n        this.gameTypeService = gameTypeService;\n    }\n\n    // Note: The reason why this isn't in a unit test is because custom galaxies\n    // need to run through this validation.\n    validate(game: Game) {\n        // Assert that there is the correct number of players.\n        if (game.galaxy.players.length !== game.settings.general.playerLimit) {\n            throw new ValidationError(`The game must have ${game.settings.general.playerLimit} players.`);\n        }\n\n        for (let player of game.galaxy.players) {\n            // Assert that all players have the correct number of stars.\n            let playerStars = this.starService.listStarsOwnedByPlayer(game.galaxy.stars, player._id);\n\n            if (playerStars.length !== game.settings.player.startingStars) {\n                throw new ValidationError(`All players must have ${game.settings.player.startingStars} stars.`);\n            }\n\n            // Assert that all players have a home star.\n            if (!player.homeStarId || !this.starService.getById(game, player.homeStarId)) {\n                throw new ValidationError(`All players must have a capital star.`);\n            }\n            \n            // Assert that all players have a unique colour and shape combination.\n            let otherPlayer = game.galaxy.players\n                .find(p => p._id.toString() !== player._id.toString()\n                    && p.shape === player.shape \n                    && p.colour.value === player.colour.value);\n\n            if (otherPlayer) {\n                throw new ValidationError(`All players must have a unique colour/shape combination.`);\n            }\n\n            // Assert that the player has the correct amount of starting credits\n            if (player.credits !== game.settings.player.startingCredits) {\n                throw new ValidationError(`All players must start with ${game.settings.player.startingCredits} credits.`);\n            }\n\n            // Assert that the player has the correct amount of starting tokens\n            if (player.creditsSpecialists !== game.settings.player.startingCreditsSpecialists) {\n                throw new ValidationError(`All players must start with ${game.settings.player.startingCreditsSpecialists} specialist tokens.`);\n            }\n\n            // Assert that all players start with 1 carrier.\n            let carriers = this.carrierService.listCarriersOwnedByPlayer(game.galaxy.carriers, player._id);\n\n            if (carriers.length !== 1) {\n                throw new ValidationError(`All players must have 1 carrier.`);\n            }\n\n            // Assert that all players have the correct starting technology levels.\n            if (\n                player.research.terraforming.level !== game.settings.technology.startingTechnologyLevel.terraforming ||\n                player.research.experimentation.level !== game.settings.technology.startingTechnologyLevel.experimentation ||\n                player.research.scanning.level !== game.settings.technology.startingTechnologyLevel.scanning ||\n                player.research.hyperspace.level !== game.settings.technology.startingTechnologyLevel.hyperspace ||\n                player.research.manufacturing.level !== game.settings.technology.startingTechnologyLevel.manufacturing ||\n                player.research.banking.level !== game.settings.technology.startingTechnologyLevel.banking ||\n                player.research.weapons.level !== game.settings.technology.startingTechnologyLevel.weapons ||\n                player.research.specialists.level !== game.settings.technology.startingTechnologyLevel.specialists\n            ) {\n                throw new ValidationError(`All players must start with valid starting technology levels.`);\n            }\n        }\n\n        // Assert that the galaxy has the correct number of stars.\n        const noOfStars = game.settings.galaxy.starsPerPlayer * game.settings.general.playerLimit;\n\n        if (game.galaxy.stars.length !== noOfStars) {\n            throw new ValidationError(`The galaxy must have a total of ${noOfStars} stars.`);\n        }\n\n        // Assert that there are the correct number of home stars.\n        if (game.galaxy.stars.filter(s => s.homeStar).length !== game.settings.general.playerLimit) {\n            throw new ValidationError(`The galaxy must have a total of ${game.settings.general.playerLimit} capital stars.`);\n        }\n        \n        if (this.gameTypeService.isKingOfTheHillMode(game) && !this.starService.getKingOfTheHillStar(game)) {\n            throw new ValidationError(`A center star must be present in king of the hill mode.`);\n        }\n\n        for (let star of game.galaxy.stars) {\n            // Assert that home stars are owned by players.\n            if (star.homeStar && (\n                !star.ownedByPlayerId || !this.playerService.getById(game, star.ownedByPlayerId)\n            )) {\n                throw new ValidationError(`All capital stars must be owned by a player.`);\n            }\n\n            // Assert that all stars in the galaxy have valid natural resources\n            if (star.naturalResources.economy < 0\n                || star.naturalResources.industry < 0\n                || star.naturalResources.science < 0) {\n                    throw new ValidationError(`All stars must have valid natural resources.`);\n                }\n\n            // Assert that the natural resources are correct based on normal vs. split resources setting.\n            if (game.settings.specialGalaxy.splitResources === 'disabled' && (\n                star.naturalResources.economy !== star.naturalResources.industry\n                || star.naturalResources.economy !== star.naturalResources.science\n            )) {\n                throw new ValidationError(`All stars must have equal natural resources for non-split resources.`);\n            }\n\n            // Assert that all stars in the galaxy have valid infrastructure\n            if (star.infrastructure.economy! < 0\n                || star.infrastructure.industry! < 0\n                || star.infrastructure.science! < 0) {\n                    throw new ValidationError(`All stars must have valid infrastructure.`);\n                }\n\n            if (star.homeStar && (\n                star.infrastructure.economy !== game.settings.player.startingInfrastructure.economy\n                || star.infrastructure.industry !== game.settings.player.startingInfrastructure.industry\n                || star.infrastructure.science !== game.settings.player.startingInfrastructure.science\n            )) {\n                throw new ValidationError(`All capital stars must start with valid starting infrastructure.`);\n            }\n\n            // Assert that dead stars have valid infrastructure\n            if (this.starService.isDeadStar(star)\n                && (\n                    star.infrastructure.economy! > 0\n                    || star.infrastructure.industry! > 0\n                    || star.infrastructure.science! > 0\n                    || star.specialistId\n                    // || star.warpGate // TODO: This is a bug, dead stars cannot have warp gates however the map gen sometimes assigns them which is incorrect.\n                )) {\n                    throw new ValidationError(`All dead stars must have 0 infrastructure, no specialists and no warp gates.`);\n                }\n    \n            // Assert that all stars have valid starting ships\n            if (star.ships! < 0 || star.shipsActual! < 0) {\n                throw new ValidationError(`All stars must have 0 or greater ships.`);\n            }\n\n            if (!star.homeStar && star.ownedByPlayerId && (\n                star.ships !== game.settings.player.startingShips\n                || star.shipsActual !== game.settings.player.startingShips\n            )) {\n                throw new ValidationError(`All non capital stars owned by players must have ${game.settings.player.startingShips} ships.`);\n            }\n    \n            // Assert that all stars have valid specialists.\n            if (star.specialistId && !this.specialistService.getByIdStar(star.specialistId)) {\n                throw new ValidationError(`All stars with specialists must have a valid specialist.`);\n            }\n\n            // Assert that home stars have the correct number of starting ships and infrastructure\n            if (star.homeStar && (\n                star.ships !== game.settings.player.startingShips - 1\n                || star.shipsActual !== game.settings.player.startingShips - 1\n                || star.infrastructure.economy !== game.settings.player.startingInfrastructure.economy\n                || star.infrastructure.industry !== game.settings.player.startingInfrastructure.industry\n                || star.infrastructure.science !== game.settings.player.startingInfrastructure.science\n            )) {\n                throw new ValidationError(`All capital stars must start with valid ships and infrastructure.`);\n            }\n\n            // Assert that the worm home IDs are valid\n            if (star.wormHoleToStarId && !this.starService.getById(game, star.wormHoleToStarId)) {\n                throw new ValidationError(`All worm holes must be paired with a valid star.`);\n            }\n        }\n\n        for (let carrier of game.galaxy.carriers) {\n            // Assert that all carriers are owned by players.\n            if (!carrier.ownedByPlayerId) {\n                throw new ValidationError(`All carriers must be owned by a player.`);\n            }\n\n            // Assert that all carriers must be in orbit\n            if (!carrier.orbiting) {\n                throw new ValidationError(`All carriers must be in orbit.`);\n            }\n\n            // Assert that all carriers must have 0 waypoints.\n            if (carrier.waypoints.length) {\n                throw new ValidationError(`All carriers must have 0 waypoints.`);\n            }\n\n            // Assert that all carriers have valid starting ships.\n            if (carrier.ships !== 1) {\n                throw new ValidationError(`All carriers must start with ${game.settings.player.startingShips} ships.`);\n            }\n    \n            // Assert that all carriers have valid specialists.\n            if (carrier.specialistId && !this.specialistService.getByIdCarrier(carrier.specialistId)) {\n                throw new ValidationError(`All carriers with specialists must have a valid specialist.`);\n            }\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA4B;AAQ5B,MAAO,4BAA0C;AAAA,EAO7C,YACI,eACA,aACA,gBACA,mBACA,iBACF;AACE,SAAK,gBAAgB;AACrB,SAAK,cAAc;AACnB,SAAK,iBAAiB;AACtB,SAAK,oBAAoB;AACzB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EAIA,SAAS,MAAY;AAEjB,QAAI,KAAK,OAAO,QAAQ,WAAW,KAAK,SAAS,QAAQ,aAAa;AAClE,YAAM,IAAI,kBAAAA,QAAgB,sBAAsB,KAAK,SAAS,QAAQ,sBAAsB;AAAA,IAChG;AAEA,aAAS,UAAU,KAAK,OAAO,SAAS;AAEpC,UAAI,cAAc,KAAK,YAAY,uBAAuB,KAAK,OAAO,OAAO,OAAO,GAAG;AAEvF,UAAI,YAAY,WAAW,KAAK,SAAS,OAAO,eAAe;AAC3D,cAAM,IAAI,kBAAAA,QAAgB,yBAAyB,KAAK,SAAS,OAAO,sBAAsB;AAAA,MAClG;AAGA,UAAI,CAAC,OAAO,cAAc,CAAC,KAAK,YAAY,QAAQ,MAAM,OAAO,UAAU,GAAG;AAC1E,cAAM,IAAI,kBAAAA,QAAgB,uCAAuC;AAAA,MACrE;AAGA,UAAI,cAAc,KAAK,OAAO,QACzB,KAAK,OAAK,EAAE,IAAI,SAAS,MAAM,OAAO,IAAI,SAAS,KAC7C,EAAE,UAAU,OAAO,SACnB,EAAE,OAAO,UAAU,OAAO,OAAO,KAAK;AAEjD,UAAI,aAAa;AACb,cAAM,IAAI,kBAAAA,QAAgB,0DAA0D;AAAA,MACxF;AAGA,UAAI,OAAO,YAAY,KAAK,SAAS,OAAO,iBAAiB;AACzD,cAAM,IAAI,kBAAAA,QAAgB,+BAA+B,KAAK,SAAS,OAAO,0BAA0B;AAAA,MAC5G;AAGA,UAAI,OAAO,uBAAuB,KAAK,SAAS,OAAO,4BAA4B;AAC/E,cAAM,IAAI,kBAAAA,QAAgB,+BAA+B,KAAK,SAAS,OAAO,+CAA+C;AAAA,MACjI;AAGA,UAAI,WAAW,KAAK,eAAe,0BAA0B,KAAK,OAAO,UAAU,OAAO,GAAG;AAE7F,UAAI,SAAS,WAAW,GAAG;AACvB,cAAM,IAAI,kBAAAA,QAAgB,kCAAkC;AAAA,MAChE;AAGA,UACI,OAAO,SAAS,aAAa,UAAU,KAAK,SAAS,WAAW,wBAAwB,gBACxF,OAAO,SAAS,gBAAgB,UAAU,KAAK,SAAS,WAAW,wBAAwB,mBAC3F,OAAO,SAAS,SAAS,UAAU,KAAK,SAAS,WAAW,wBAAwB,YACpF,OAAO,SAAS,WAAW,UAAU,KAAK,SAAS,WAAW,wBAAwB,cACtF,OAAO,SAAS,cAAc,UAAU,KAAK,SAAS,WAAW,wBAAwB,iBACzF,OAAO,SAAS,QAAQ,UAAU,KAAK,SAAS,WAAW,wBAAwB,WACnF,OAAO,SAAS,QAAQ,UAAU,KAAK,SAAS,WAAW,wBAAwB,WACnF,OAAO,SAAS,YAAY,UAAU,KAAK,SAAS,WAAW,wBAAwB,aACzF;AACE,cAAM,IAAI,kBAAAA,QAAgB,+DAA+D;AAAA,MAC7F;AAAA,IACJ;AAGA,UAAM,YAAY,KAAK,SAAS,OAAO,iBAAiB,KAAK,SAAS,QAAQ;AAE9E,QAAI,KAAK,OAAO,MAAM,WAAW,WAAW;AACxC,YAAM,IAAI,kBAAAA,QAAgB,mCAAmC,kBAAkB;AAAA,IACnF;AAGA,QAAI,KAAK,OAAO,MAAM,OAAO,OAAK,EAAE,QAAQ,EAAE,WAAW,KAAK,SAAS,QAAQ,aAAa;AACxF,YAAM,IAAI,kBAAAA,QAAgB,mCAAmC,KAAK,SAAS,QAAQ,4BAA4B;AAAA,IACnH;AAEA,QAAI,KAAK,gBAAgB,oBAAoB,IAAI,KAAK,CAAC,KAAK,YAAY,qBAAqB,IAAI,GAAG;AAChG,YAAM,IAAI,kBAAAA,QAAgB,yDAAyD;AAAA,IACvF;AAEA,aAAS,QAAQ,KAAK,OAAO,OAAO;AAEhC,UAAI,KAAK,aACL,CAAC,KAAK,mBAAmB,CAAC,KAAK,cAAc,QAAQ,MAAM,KAAK,eAAe,IAChF;AACC,cAAM,IAAI,kBAAAA,QAAgB,8CAA8C;AAAA,MAC5E;AAGA,UAAI,KAAK,iBAAiB,UAAU,KAC7B,KAAK,iBAAiB,WAAW,KACjC,KAAK,iBAAiB,UAAU,GAAG;AAClC,cAAM,IAAI,kBAAAA,QAAgB,8CAA8C;AAAA,MAC5E;AAGJ,UAAI,KAAK,SAAS,cAAc,mBAAmB,eAC/C,KAAK,iBAAiB,YAAY,KAAK,iBAAiB,YACrD,KAAK,iBAAiB,YAAY,KAAK,iBAAiB,UAC5D;AACC,cAAM,IAAI,kBAAAA,QAAgB,sEAAsE;AAAA,MACpG;AAGA,UAAI,KAAK,eAAe,UAAW,KAC5B,KAAK,eAAe,WAAY,KAChC,KAAK,eAAe,UAAW,GAAG;AACjC,cAAM,IAAI,kBAAAA,QAAgB,2CAA2C;AAAA,MACzE;AAEJ,UAAI,KAAK,aACL,KAAK,eAAe,YAAY,KAAK,SAAS,OAAO,uBAAuB,WACzE,KAAK,eAAe,aAAa,KAAK,SAAS,OAAO,uBAAuB,YAC7E,KAAK,eAAe,YAAY,KAAK,SAAS,OAAO,uBAAuB,UAChF;AACC,cAAM,IAAI,kBAAAA,QAAgB,kEAAkE;AAAA,MAChG;AAGA,UAAI,KAAK,YAAY,WAAW,IAAI,MAE5B,KAAK,eAAe,UAAW,KAC5B,KAAK,eAAe,WAAY,KAChC,KAAK,eAAe,UAAW,KAC/B,KAAK,eAET;AACC,cAAM,IAAI,kBAAAA,QAAgB,8EAA8E;AAAA,MAC5G;AAGJ,UAAI,KAAK,QAAS,KAAK,KAAK,cAAe,GAAG;AAC1C,cAAM,IAAI,kBAAAA,QAAgB,yCAAyC;AAAA,MACvE;AAEA,UAAI,CAAC,KAAK,YAAY,KAAK,oBACvB,KAAK,UAAU,KAAK,SAAS,OAAO,iBACjC,KAAK,gBAAgB,KAAK,SAAS,OAAO,gBAC9C;AACC,cAAM,IAAI,kBAAAA,QAAgB,oDAAoD,KAAK,SAAS,OAAO,sBAAsB;AAAA,MAC7H;AAGA,UAAI,KAAK,gBAAgB,CAAC,KAAK,kBAAkB,YAAY,KAAK,YAAY,GAAG;AAC7E,cAAM,IAAI,kBAAAA,QAAgB,0DAA0D;AAAA,MACxF;AAGA,UAAI,KAAK,aACL,KAAK,UAAU,KAAK,SAAS,OAAO,gBAAgB,KACjD,KAAK,gBAAgB,KAAK,SAAS,OAAO,gBAAgB,KAC1D,KAAK,eAAe,YAAY,KAAK,SAAS,OAAO,uBAAuB,WAC5E,KAAK,eAAe,aAAa,KAAK,SAAS,OAAO,uBAAuB,YAC7E,KAAK,eAAe,YAAY,KAAK,SAAS,OAAO,uBAAuB,UAChF;AACC,cAAM,IAAI,kBAAAA,QAAgB,mEAAmE;AAAA,MACjG;AAGA,UAAI,KAAK,oBAAoB,CAAC,KAAK,YAAY,QAAQ,MAAM,KAAK,gBAAgB,GAAG;AACjF,cAAM,IAAI,kBAAAA,QAAgB,kDAAkD;AAAA,MAChF;AAAA,IACJ;AAEA,aAAS,WAAW,KAAK,OAAO,UAAU;AAEtC,UAAI,CAAC,QAAQ,iBAAiB;AAC1B,cAAM,IAAI,kBAAAA,QAAgB,yCAAyC;AAAA,MACvE;AAGA,UAAI,CAAC,QAAQ,UAAU;AACnB,cAAM,IAAI,kBAAAA,QAAgB,gCAAgC;AAAA,MAC9D;AAGA,UAAI,QAAQ,UAAU,QAAQ;AAC1B,cAAM,IAAI,kBAAAA,QAAgB,qCAAqC;AAAA,MACnE;AAGA,UAAI,QAAQ,UAAU,GAAG;AACrB,cAAM,IAAI,kBAAAA,QAAgB,gCAAgC,KAAK,SAAS,OAAO,sBAAsB;AAAA,MACzG;AAGA,UAAI,QAAQ,gBAAgB,CAAC,KAAK,kBAAkB,eAAe,QAAQ,YAAY,GAAG;AACtF,cAAM,IAAI,kBAAAA,QAAgB,6DAA6D;AAAA,MAC3F;AAAA,IACJ;AAAA,EACJ;AACJ;",
  "names": ["ValidationError"]
}
