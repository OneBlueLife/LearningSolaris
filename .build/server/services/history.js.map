{
  "version": 3,
  "sources": ["../../../server/services/history.ts"],
  "sourcesContent": ["const cache = require('memory-cache');\nimport { DBObjectId } from './types/DBObjectId';\nimport ValidationError from '../errors/validation';\nimport Repository from './repository';\nimport { Game } from './types/Game';\nimport { GameHistory, GameHistoryCarrier } from './types/GameHistory';\nimport GameService from './game';\nimport PlayerService from './player';\nimport PlayerStatisticsService from './playerStatistics';\n\nexport default class HistoryService {\n    historyRepo: Repository<GameHistory>;\n    playerService: PlayerService;\n    gameService: GameService;\n    playerStatisticsService: PlayerStatisticsService;\n\n    constructor(\n        historyRepo: Repository<GameHistory>,\n        playerService: PlayerService,\n        gameService: GameService,\n        playerStatisticsService: PlayerStatisticsService\n    ) {\n        this.historyRepo = historyRepo;\n        this.playerService = playerService;\n        this.gameService = gameService;\n        this.playerStatisticsService = playerStatisticsService;\n\n        this.gameService.on('onGameDeleted', (args) => this.deleteByGameId(args.gameId));\n    }\n\n    async listIntel(gameId: DBObjectId, startTick: number, endTick: number) {\n        let settings = await this.gameService.getGameSettings(gameId);\n\n        if (!settings || settings.specialGalaxy.darkGalaxy === 'extra') {\n            throw new ValidationError('Intel is not available in this game mode.');\n        }\n\n        startTick = startTick || 0;\n        endTick = endTick || Number.MAX_VALUE;;\n\n        let cacheKey = `intel_${gameId}_${startTick}_${endTick}`;\n        let cached = cache.get(cacheKey);\n\n        if (cached) {\n            return cached;\n        }\n\n        let intel = await this.historyRepo.find({\n            gameId,\n            tick: { \n                $gte: startTick,\n                $lte: endTick\n            }\n        }, {\n            gameId: 1,\n            tick: 1,\n            'players.playerId': 1,\n            'players.statistics.totalStars': 1,\n            'players.statistics.totalHomeStars': 1,\n            'players.statistics.totalEconomy': 1,\n            'players.statistics.totalIndustry': 1,\n            'players.statistics.totalScience': 1,\n            'players.statistics.totalShips': 1,\n            'players.statistics.totalCarriers': 1,\n            'players.statistics.totalSpecialists': 1,\n            'players.statistics.totalStarSpecialists': 1,\n            'players.statistics.totalCarrierSpecialists': 1,\n            'players.statistics.newShips': 1,\n            'players.statistics.warpgates': 1,\n            'players.research.weapons.level': 1,\n            'players.research.banking.level': 1,\n            'players.research.manufacturing.level': 1,\n            'players.research.hyperspace.level': 1,\n            'players.research.scanning.level': 1,\n            'players.research.experimentation.level': 1,\n            'players.research.terraforming.level': 1,\n            'players.research.specialists.level': 1,\n        }, { \n            tick: 1 \n        });\n\n        cache.put(cacheKey, intel, 3600000); // 1 hour\n\n        return intel;\n    }\n\n    async log(game: Game) {\n        // Check if there is already a history record with this tick, if so we should ignore this call.\n        let history = await this.historyRepo.findOne({\n            gameId: game._id,\n            tick: game.state.tick\n        });\n\n        if (history) {\n            return;\n        }\n\n        history = {\n            gameId: game._id,\n            tick: game.state.tick,\n            productionTick: game.state.productionTick,\n            players: [],\n            stars: [],\n            carriers: []\n        };\n\n        history.players = game.galaxy.players.map(player => {\n            let stats = this.playerStatisticsService.getStats(game, player);\n\n            return {\n                userId: player.userId,\n                playerId: player._id,\n                statistics: {\n                    totalStars: stats.totalStars,\n                    totalHomeStars: stats.totalHomeStars,\n                    totalEconomy: stats.totalEconomy,\n                    totalIndustry: stats.totalIndustry,\n                    totalScience: stats.totalScience,\n                    totalShips: stats.totalShips,\n                    totalCarriers: stats.totalCarriers,\n                    totalSpecialists: stats.totalSpecialists,\n                    totalStarSpecialists: stats.totalStarSpecialists,\n                    totalCarrierSpecialists: stats.totalCarrierSpecialists,\n                    newShips: stats.newShips,\n                    warpgates: stats.warpgates\n                },\n                alias: player.alias,\n                avatar: player.avatar,\n                researchingNow: player.researchingNow,\n                researchingNext: player.researchingNext,\n                credits: player.credits,\n                creditsSpecialists: player.creditsSpecialists,\n                isOpenSlot: player.isOpenSlot,\n                defeated: player.defeated,\n                defeatedDate: player.defeatedDate,\n                afk: player.afk,\n                ready: player.ready,\n                readyToQuit: player.readyToQuit,\n                research: player.research\n            };\n        });\n\n        // Note: We save the star and carrier data in the history for galaxy masking.\n        \n        history.stars = game.galaxy.stars.map(s => {\n            return {\n                starId: s._id,\n                ownedByPlayerId: s.ownedByPlayerId,\n                naturalResources: s.naturalResources,\n                ships: s.ships!,\n                shipsActual: s.shipsActual!,\n                specialistId: s.specialistId,\n                homeStar: s.homeStar,\n                warpGate: s.warpGate,\n                ignoreBulkUpgrade: s.ignoreBulkUpgrade!,\n                infrastructure: s.infrastructure,\n                location: s.location\n            };\n        });\n\n        history.carriers = game.galaxy.carriers.map(c => {\n            let x: GameHistoryCarrier = {\n                carrierId: c._id,\n                ownedByPlayerId: c.ownedByPlayerId!,\n                name: c.name,\n                orbiting: c.orbiting,\n                ships: c.ships!,\n                specialistId: c.specialistId,\n                isGift: c.isGift,\n                location: c.location,\n                waypoints: []\n            };\n\n            // Trim off unwanted waypoints, we only care about the first one.\n            if (c.waypoints.length) {\n                x.waypoints = [c.waypoints[0]];\n            }\n\n            return x;\n        });\n\n        await this.historyRepo.insertOne(history);\n\n        await this.cleanupTimeMachineHistory(game);\n    }\n\n    async cleanupTimeMachineHistory(game: Game) {\n        let maxTick;\n\n        const MIN_HISTORY_TICK_OFFSET = null; // Decide how many ticks to store.\n\n        // For games where the time machine is disabled, clear out the all previous tick\n        // data to save space as we only need the current tick data for masking.\n        // Otherwise limit normal games to MIN_HISTORY_TICK_OFFSET ticks ago to save space.\n        if (game.settings.general.timeMachine === 'disabled') {\n            maxTick = game.state.tick;\n        } \n        else if (MIN_HISTORY_TICK_OFFSET) {\n            maxTick = Math.max(0, game.state.tick - MIN_HISTORY_TICK_OFFSET);\n        }\n\n        await this.historyRepo.updateMany({\n            gameId: game._id,\n            tick: {\n                $lt: maxTick\n            },\n            stars: {\n                $exists: true,\n                $not: { $size: 0 }\n            }\n        }, {\n            $unset: {\n                'players.$[].alias': '',\n                'players.$[].avatar': '',\n                'players.$[].researchingNow': '',\n                'players.$[].researchingNext': '',\n                'players.$[].credits': '',\n                'players.$[].creditsSpecialists': '',\n                'players.$[].defeated': '',\n                'players.$[].defeatedDate': '',\n                'players.$[].afk': '',\n                'players.$[].ready': '',\n                'players.$[].readyToQuit': '',\n                'stars': '',\n                'carriers': ''\n            }\n        });\n    }\n\n    async getHistoryByTick(gameId: DBObjectId, tick: number | null) {\n        return await this.historyRepo.findOne({\n            gameId,\n            tick\n        });\n    }\n\n    async deleteByGameId(gameId: DBObjectId) {\n        await this.historyRepo.deleteMany({\n            gameId\n        });\n    }\n\n};\n"],
  "mappings": "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",
  "names": ["ValidationError"]
}
