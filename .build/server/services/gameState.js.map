{
  "version": 3,
  "sources": ["../../../server/services/gameState.ts"],
  "sourcesContent": ["import { Game } from \"./types/Game\";\nimport { Player } from \"./types/Player\";\n\nconst moment = require('moment');\n\nexport default class GameStateService {\n\n    isInProgress(game: Game) {\n        return game.state.startDate != null && game.state.endDate == null;\n    }\n\n    isStarted(game: Game) {\n        return game.state.startDate != null;\n    }\n\n    isFinished(game: Game) {\n        return game.state.endDate != null;\n    }\n\n    isLocked(game: Game) {\n        return game.state.locked;\n    }\n\n    updateStatePlayerCount(game: Game) {\n        if (game.settings.general.type === 'tutorial') {\n            game.state.players = game.galaxy.players.filter(p => !p.defeated && !p.afk).length;\n        } else {\n            game.state.players = game.galaxy.players.filter(p => p.userId && !p.defeated && !p.afk).length;\n        }\n    }\n\n    finishGame(game: Game, winnerPlayer: Player) {\n        game.state.paused = true;\n        game.state.endDate = moment().utc();\n        game.state.winner = winnerPlayer._id;\n    }\n\n    isCountingDownToEnd(game: Game) {\n        return game.state.ticksToEnd != null;\n    }\n\n    isCountingDownToEndInLastCycle(game: Game) {\n        return this.isCountingDownToEnd(game) && game.state.ticksToEnd! < game.settings.galaxy.productionTicks;\n    }\n\n    countdownToEnd(game: Game) {\n        // If we are already in the countdown, decrease the counter.\n        // Otherwise, try to start the countdown.\n        if (this.isCountingDownToEnd(game)) {\n            game.state.ticksToEnd!--;\n        } else {\n            // Note: This should only occur if in KotH mode.\n            game.state.ticksToEnd = game.settings.kingOfTheHill.productionCycles * game.settings.galaxy.productionTicks;\n        }\n    }\n\n    setCountdownToEndToOneCycle(game: Game) {\n        game.state.ticksToEnd = game.settings.galaxy.productionTicks;\n    }\n\n    hasReachedCountdownEnd(game: Game) {\n        return game.state.ticksToEnd! <= 0;\n    }\n\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,MAAM,SAAS,QAAQ,QAAQ;AAE/B,MAAO,iBAA+B;AAAA,EAElC,aAAa,MAAY;AACrB,WAAO,KAAK,MAAM,aAAa,QAAQ,KAAK,MAAM,WAAW;AAAA,EACjE;AAAA,EAEA,UAAU,MAAY;AAClB,WAAO,KAAK,MAAM,aAAa;AAAA,EACnC;AAAA,EAEA,WAAW,MAAY;AACnB,WAAO,KAAK,MAAM,WAAW;AAAA,EACjC;AAAA,EAEA,SAAS,MAAY;AACjB,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EAEA,uBAAuB,MAAY;AAC/B,QAAI,KAAK,SAAS,QAAQ,SAAS,YAAY;AAC3C,WAAK,MAAM,UAAU,KAAK,OAAO,QAAQ,OAAO,OAAK,CAAC,EAAE,YAAY,CAAC,EAAE,GAAG,EAAE;AAAA,IAChF,OAAO;AACH,WAAK,MAAM,UAAU,KAAK,OAAO,QAAQ,OAAO,OAAK,EAAE,UAAU,CAAC,EAAE,YAAY,CAAC,EAAE,GAAG,EAAE;AAAA,IAC5F;AAAA,EACJ;AAAA,EAEA,WAAW,MAAY,cAAsB;AACzC,SAAK,MAAM,SAAS;AACpB,SAAK,MAAM,UAAU,OAAO,EAAE,IAAI;AAClC,SAAK,MAAM,SAAS,aAAa;AAAA,EACrC;AAAA,EAEA,oBAAoB,MAAY;AAC5B,WAAO,KAAK,MAAM,cAAc;AAAA,EACpC;AAAA,EAEA,+BAA+B,MAAY;AACvC,WAAO,KAAK,oBAAoB,IAAI,KAAK,KAAK,MAAM,aAAc,KAAK,SAAS,OAAO;AAAA,EAC3F;AAAA,EAEA,eAAe,MAAY;AAGvB,QAAI,KAAK,oBAAoB,IAAI,GAAG;AAChC,WAAK,MAAM;AAAA,IACf,OAAO;AAEH,WAAK,MAAM,aAAa,KAAK,SAAS,cAAc,mBAAmB,KAAK,SAAS,OAAO;AAAA,IAChG;AAAA,EACJ;AAAA,EAEA,4BAA4B,MAAY;AACpC,SAAK,MAAM,aAAa,KAAK,SAAS,OAAO;AAAA,EACjD;AAAA,EAEA,uBAAuB,MAAY;AAC/B,WAAO,KAAK,MAAM,cAAe;AAAA,EACrC;AAEJ;",
  "names": []
}
