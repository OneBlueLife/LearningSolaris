{
  "version": 3,
  "sources": ["../../../server/services/broadcast.ts"],
  "sourcesContent": ["import { DBObjectId } from \"./types/DBObjectId\";\nimport { Conversation } from \"./types/Conversation\";\nimport { ConversationMessageSentResult } from \"./types/ConversationMessage\";\nimport { Game } from \"./types/Game\";\nimport { Player } from \"./types/Player\";\nimport { DiplomaticStatus } from \"./types/Diplomacy\";\nimport { TradeEventTechnology } from \"./types/Trade\";\nimport { LedgerType } from \"./ledger\";\n\n\nexport default class BroadcastService {\n    io;\n\n    constructor(io) {\n        this.io = io;\n    }\n\n    roomExists(socketId: DBObjectId) {\n        return this.io && this.io.sockets.adapter.rooms[socketId.toString()] != null;\n    }\n\n    playerRoomExists(player: Player) {\n        return this.io && this.io.sockets.adapter.rooms[player._id.toString()] != null;\n    }\n\n    getOnlinePlayers(game: Game) {\n        return game.galaxy.players.filter(p => this.playerRoomExists(p));\n    }\n\n    gameStarted(game: Game) {\n        this.io.to(game._id).emit('gameStarted', {\n            state: game.state\n        });\n    }\n\n    gamePlayerJoined(game: Game, playerId: DBObjectId, alias: string, avatar: number) {\n        this.io.to(game._id).emit('gamePlayerJoined', {\n            playerId,\n            alias,\n            avatar\n        });\n    }\n\n    gamePlayerQuit(game: Game, player: Player) {\n        this.io.to(game._id).emit('gamePlayerQuit', {\n            playerId: player._id\n        });\n    }\n\n    gamePlayerReady(game: Game, player: Player) {\n        this.io.to(game._id).emit('gamePlayerReady', {\n            playerId: player._id\n        });\n    }\n\n    gamePlayerNotReady(game: Game, player: Player) {\n        this.io.to(game._id).emit('gamePlayerNotReady', {\n            playerId: player._id\n        });\n    }\n\n    gamePlayerReadyToQuit(game: Game, player: Player) {\n        this.io.to(game._id).emit('gamePlayerReadyToQuit', {\n            playerId: player._id\n        });\n    }\n\n    gamePlayerNotReadyToQuit(game: Game, player: Player) {\n        this.io.to(game._id).emit('gamePlayerNotReadyToQuit', {\n            playerId: player._id\n        });\n    }\n\n    gameMessageSent(game: Game, message: ConversationMessageSentResult) {\n        message.toPlayerIds.forEach(p => this.io.to(p).emit('gameMessageSent', message));\n    }\n\n    gameConversationRead(game: Game, conversation: Conversation, readByPlayerId: DBObjectId) {\n        conversation.participants.forEach(p => this.io.to(p).emit('gameConversationRead', {\n            conversationId: conversation._id,\n            readByPlayerId\n        }));\n    }\n\n    gameConversationLeft(game: Game, conversation: Conversation, playerId: DBObjectId) {\n        conversation.participants.forEach(p => this.io.to(p).emit('gameConversationLeft', {\n            conversationId: conversation._id,\n            playerId\n        }));\n    }\n\n    gameConversationMessagePinned(game: Game, conversation: Conversation, messageId: DBObjectId) {\n        conversation.participants.forEach(p => this.io.to(p).emit('gameConversationMessagePinned', {\n            conversationId: conversation._id,\n            messageId: messageId\n        }));\n    }\n\n    gameConversationMessageUnpinned(game: Game, conversation: Conversation, messageId: DBObjectId) {\n        conversation.participants.forEach(p => this.io.to(p).emit('gameConversationMessageUnpinned', {\n            conversationId: conversation._id,\n            messageId: messageId\n        }));\n    }\n\n    // gameMessagesAllRead(game, playerId) {\n    //     this.io.to(playerId).emit('gameMessagesAllRead');\n    // }\n\n    playerEventRead(game: Game, playerId: DBObjectId, eventId: DBObjectId) {\n        this.io.to(playerId).emit('playerEventRead', {\n            eventId\n        })\n    }\n\n    playerAllEventsRead(game: Game, playerId: DBObjectId) {\n        this.io.to(playerId).emit('playerAllEventsRead', {})\n    }\n\n    gamePlayerCreditsReceived(game: Game, fromPlayerId: DBObjectId, toPlayerId: DBObjectId, credits: number, date: Date) {\n        this.io.to(toPlayerId).emit('playerCreditsReceived', {\n            playerId: toPlayerId,\n            type: 'playerCreditsReceived',\n            date,\n            data: {\n                fromPlayerId,\n                toPlayerId,\n                credits\n            }\n        });\n    }\n\n    gamePlayerCreditsSpecialistsReceived(game: Game, fromPlayerId: DBObjectId, toPlayerId: DBObjectId, creditsSpecialists: number, date: Date) {\n        this.io.to(toPlayerId).emit('playerCreditsSpecialistsReceived', {\n            playerId: toPlayerId,\n            type: 'playerCreditsSpecialistsReceived',\n            date,\n            data: {\n                fromPlayerId,\n                toPlayerId,\n                creditsSpecialists\n            }\n        });\n    }\n\n    gamePlayerRenownReceived(game: Game, fromPlayerId: DBObjectId, toPlayerId: DBObjectId, renown: number, date: Date) {\n        this.io.to(toPlayerId).emit('playerRenownReceived', {\n            playerId: toPlayerId,\n            type: 'playerRenownReceived',\n            date,\n            data: {\n                fromPlayerId,\n                toPlayerId,\n                renown\n            }\n        });\n    }\n\n    gamePlayerTechnologyReceived(game: Game, fromPlayerId: DBObjectId, toPlayerId: DBObjectId, technology: TradeEventTechnology, date: Date) {\n        this.io.to(toPlayerId).emit('playerTechnologyReceived', {\n            playerId: toPlayerId,\n            type: 'playerTechnologyReceived',\n            date,\n            data: {\n                fromPlayerId,\n                toPlayerId,\n                technology\n            }\n        });\n    }\n\n    gamePlayerDebtAdded(debtorPlayerId: DBObjectId, creditorPlayerId: DBObjectId, amount: number, ledgerType: LedgerType) {\n        let data = {\n            debtorPlayerId,\n            creditorPlayerId,\n            amount,\n            ledgerType\n        };\n\n        this.io.to(debtorPlayerId).emit('playerDebtAdded', data);\n        this.io.to(creditorPlayerId).emit('playerDebtAdded', data);\n    }\n\n    gamePlayerDebtForgiven(debtorPlayerId: DBObjectId, creditorPlayerId: DBObjectId, amount: number, ledgerType: LedgerType) {\n        let data = {\n            debtorPlayerId,\n            creditorPlayerId,\n            amount,\n            ledgerType\n        };\n\n        this.io.to(debtorPlayerId).emit('playerDebtForgiven', data);\n        this.io.to(creditorPlayerId).emit('playerDebtForgiven', data);\n    }\n\n    gamePlayerDebtSettled(debtorPlayerId: DBObjectId, creditorPlayerId: DBObjectId, amount: number, ledgerType: LedgerType) {\n        let data = {\n            debtorPlayerId,\n            creditorPlayerId,\n            amount,\n            ledgerType\n        };\n\n        this.io.to(debtorPlayerId).emit('playerDebtSettled', data);\n        this.io.to(creditorPlayerId).emit('playerDebtSettled', data);\n    }\n\n    gamePlayerDiplomaticStatusChanged(playerIdFrom: DBObjectId, playerIdTo: DBObjectId, diplomaticStatus: DiplomaticStatus) {\n        let data = {\n            diplomaticStatus\n        };\n\n        this.io.to(playerIdFrom).emit('playerDiplomaticStatusChanged', data);\n        this.io.to(playerIdTo).emit('playerDiplomaticStatusChanged', data);\n    }\n\n    // userRenownReceived(game, toUserId, renown) {\n    //     this.io.to(toUserId).emit('playerRenownReceived', renown); // TODO: Do we have a socket for the user?\n    // }\n\n};\n"],
  "mappings": "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",
  "names": []
}
