{
  "version": 3,
  "sources": ["../../../server/services/specialistHire.ts"],
  "sourcesContent": ["import { DBObjectId } from \"./types/DBObjectId\";\nimport Repository from \"./repository\";\nimport { Game } from \"./types/Game\";\nimport { Player } from \"./types/Player\";\nimport { Specialist } from \"./types/Specialist\";\nimport AchievementService from \"./achievement\";\nimport GameTypeService from \"./gameType\";\nimport SpecialistService from \"./specialist\";\nimport StarService from \"./star\";\nimport WaypointService from \"./waypoint\";\n\nimport ValidationError from \"../errors/validation\";\nimport SpecialistBanService from \"./specialistBan\";\nimport PlayerCreditsService from \"./playerCredits\";\nimport TechnologyService from \"./technology\";\n\nexport default class SpecialistHireService {\n    gameRepo: Repository<Game>;\n    specialistService: SpecialistService;\n    achievementService: AchievementService;\n    waypointService: WaypointService;\n    playerCreditsService: PlayerCreditsService;\n    starService: StarService;\n    gameTypeService: GameTypeService;\n    specialistBanService: SpecialistBanService;\n    technologyService: TechnologyService;\n\n    constructor(\n        gameRepo: Repository<Game>,\n        specialistService: SpecialistService,\n        achievementService: AchievementService,\n        waypointService: WaypointService,\n        playerCreditsService: PlayerCreditsService,\n        starService: StarService,\n        gameTypeService: GameTypeService,\n        specialistBanService: SpecialistBanService,\n        technologyService: TechnologyService\n    ) {\n        this.gameRepo = gameRepo;\n        this.specialistService = specialistService;\n        this.achievementService = achievementService;\n        this.waypointService = waypointService;\n        this.playerCreditsService = playerCreditsService;\n        this.starService = starService;\n        this.gameTypeService = gameTypeService;\n        this.specialistBanService = specialistBanService;\n        this.technologyService = technologyService;\n    }\n\n    async hireCarrierSpecialist(game: Game, player: Player, carrierId: DBObjectId, specialistId: number) {\n        if (game.settings.specialGalaxy.specialistCost === 'none') {\n            throw new ValidationError('The game settings has disabled the hiring of specialists.');\n        }\n\n        if (this.specialistBanService.isCarrierSpecialistBanned(game, specialistId)) {\n            throw new ValidationError('This specialist has been banned from this game.');\n        }\n\n        let carrier = game.galaxy.carriers.find(x => x.ownedByPlayerId && x.ownedByPlayerId.toString() === player._id.toString() && x._id.toString() === carrierId.toString());\n\n        if (!carrier) {\n            throw new ValidationError(`Cannot assign a specialist to a carrier that you do not own.`);\n        }\n\n        if (!carrier.orbiting) {\n            throw new ValidationError(`Cannot assign a specialist to a carrier in transit.`);\n        }\n\n        let star = this.starService.getById(game, carrier.orbiting);\n\n        if (this.starService.isDeadStar(star)) {\n            throw new ValidationError('Cannot hire a specialist while in orbit of a dead star.');\n        }\n\n        if (!this.starService.isOwnedByPlayer(star, player)) {\n            throw new ValidationError('Cannot hire a specialist while in orbit of a star that you do not own.');\n        }\n\n        const specialist = this.specialistService.getByIdCarrier(specialistId);\n\n        if (!specialist) {\n            throw new ValidationError(`A specialist with ID ${specialistId} does not exist or is disabled.`);\n        }\n\n        if (carrier.specialistId && carrier.specialistId === specialist.id) {\n            throw new ValidationError(`The carrier already has the specialist assigned.`);\n        }\n        \n        // Calculate whether the player can afford to buy the specialist.\n        if (!this._canAffordSpecialist(game, player, specialist)) {\n            throw new ValidationError(`You cannot afford to buy this specialist.`);\n        }\n\n        let cost = this.specialistService.getSpecialistActualCost(game, specialist);\n\n        if (carrier.specialistId) {\n            let carrierSpecialist = this.specialistService.getByIdCarrier(carrier.specialistId);\n\n            if (carrierSpecialist && carrierSpecialist.oneShot) {\n                throw new ValidationError(`The current specialist cannot be replaced.`);\n            }\n        }\n\n        carrier.specialistId = specialist.id;\n        carrier.specialistExpireTick = specialist.expireTicks ? game.state.tick + specialist.expireTicks : null;\n\n        // Update the DB.\n        await this.gameRepo.bulkWrite([\n            await this._deductSpecialistCost(game, player, specialist),\n            {\n                updateOne: {\n                    filter: {\n                        _id: game._id,\n                        'galaxy.carriers._id': carrier._id\n                    },\n                    update: {\n                        'galaxy.carriers.$.specialistId': carrier.specialistId,\n                        'galaxy.carriers.$.specialistExpireTick': carrier.specialistExpireTick\n                    }\n                }\n            }\n        ]);\n\n        if (player.userId && !player.defeated && !this.gameTypeService.isTutorialGame(game)) {\n            await this.achievementService.incrementSpecialistsHired(player.userId);\n        }\n\n        // TODO: Need to consider local and global effects and update the UI accordingly.\n\n        carrier.effectiveTechs = this.technologyService.getCarrierEffectiveTechnologyLevels(game, carrier, true);\n\n        let waypoints = await this.waypointService.cullWaypointsByHyperspaceRangeDB(game, carrier);\n\n        let result = {\n            game,\n            carrier,\n            specialist,\n            cost,\n            waypoints\n        };\n\n        return result;\n    }\n\n    async hireStarSpecialist(game: Game, player: Player, starId: DBObjectId, specialistId: number) {\n        if (game.settings.specialGalaxy.specialistCost === 'none') {\n            throw new ValidationError('The game settings has disabled the hiring of specialists.');\n        }\n\n        if (this.specialistBanService.isStarSpecialistBanned(game, specialistId)) {\n            throw new ValidationError('This specialist has been banned from this game.');\n        }\n\n        let star = game.galaxy.stars.find(x => x.ownedByPlayerId && x.ownedByPlayerId.toString() === player._id.toString() && x._id.toString() === starId.toString());\n\n        if (!star) {\n            throw new ValidationError(`Cannot assign a specialist to a star that you do not own.`);\n        }\n\n        if (this.starService.isDeadStar(star)) {\n            throw new ValidationError('Cannot hire a specialist on a dead star.');\n        }\n\n        const specialist = this.specialistService.getByIdStar(specialistId);\n\n        if (!specialist) {\n            throw new ValidationError(`A specialist with ID ${specialistId} does not exist or is disabled.`);\n        }\n\n        if (star.specialistId && star.specialistId === specialist.id) {\n            throw new ValidationError(`The star already has the specialist assigned.`);\n        }\n        \n        // Calculate whether the player can afford to buy the specialist.\n        if (!this._canAffordSpecialist(game, player, specialist)) {\n            throw new ValidationError(`You cannot afford to buy this specialist.`);\n        }\n\n        let cost = this.specialistService.getSpecialistActualCost(game, specialist);\n\n        if (star.specialistId) {\n            let starSpecialist = this.specialistService.getByIdStar(star.specialistId);\n\n            if (starSpecialist && starSpecialist.oneShot) {\n                throw new ValidationError(`The current specialist cannot be replaced.`);\n            }\n        }\n\n        // If the spec hired is one that builds worm holes, validate that the star isn't already a worm hole.\n        if (star.wormHoleToStarId && specialist.modifiers.special?.wormHoleConstructor) {\n            throw new ValidationError(`The star already has a worm hole connected to another star.`);\n        }\n\n        star.specialistId = specialist.id;\n        star.specialistExpireTick = specialist.expireTicks ? game.state.tick + specialist.expireTicks : null;\n\n        // Update the DB.\n        await this.gameRepo.bulkWrite([\n            await this._deductSpecialistCost(game, player, specialist),\n            {\n                updateOne: {\n                    filter: {\n                        _id: game._id,\n                        'galaxy.stars._id': star._id\n                    },\n                    update: {\n                        'galaxy.stars.$.specialistId': star.specialistId,\n                        'galaxy.stars.$.specialistExpireTick': star.specialistExpireTick\n                    }\n                }\n            }\n        ]);\n\n        if (player.userId && !player.defeated && !this.gameTypeService.isTutorialGame(game)) {\n            await this.achievementService.incrementSpecialistsHired(player.userId);\n        }\n\n        // TODO: The star may have its manufacturing changed so return back the new manufacturing.\n        // TODO: Scanning changes are done by refreshing the entire game on the UI, would be ideally better to calculate it here?\n        // TODO: Need to consider local and global effects and update the UI accordingly.\n\n        star.effectiveTechs = this.technologyService.getStarEffectiveTechnologyLevels(game, star, true);\n\n        return {\n            star,\n            specialist,\n            cost\n        };\n    }\n\n    _canAffordSpecialist(game: Game, player: Player, specialist: Specialist) {\n        let cost = this.specialistService.getSpecialistActualCost(game, specialist);\n\n        switch (game.settings.specialGalaxy.specialistsCurrency) {\n            case 'credits':\n                return player.credits >= cost.credits;\n            case 'creditsSpecialists':\n                return player.creditsSpecialists >= cost.creditsSpecialists;\n            default:\n                throw new Error(`Unsupported specialist currency type: ${game.settings.specialGalaxy.specialistsCurrency}`);\n        }\n    }\n\n    async _deductSpecialistCost(game: Game, player: Player, specialist: Specialist) {\n        let cost = this.specialistService.getSpecialistActualCost(game, specialist);\n\n        switch (game.settings.specialGalaxy.specialistsCurrency) {\n            case 'credits':\n                player.credits -= cost.credits;\n\n                return await this.playerCreditsService.addCredits(game, player, -cost.credits, false);\n            case 'creditsSpecialists':\n                player.creditsSpecialists -= cost.creditsSpecialists;\n\n                return await this.playerCreditsService.addCreditsSpecialists(game, player, -cost.creditsSpecialists, false);\n            default:\n                throw new Error(`Unsupported specialist currency type: ${game.settings.specialGalaxy.specialistsCurrency}`);\n        }\n        \n    }\n\n};\n"],
  "mappings": "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",
  "names": ["ValidationError"]
}
