{
  "version": 3,
  "sources": ["../../../server/services/discord.ts"],
  "sourcesContent": ["import ValidationError from '../errors/validation';\nimport Repository from './repository';\nimport { Config } from '../config/types/Config';\nimport { User } from './types/User';\n\nconst Discord = require('discord.js');\n\nexport default class DiscordService {\n    config: Config;\n    userRepo: Repository<User>;\n\n    client: any = null;\n    \n    constructor(\n        config: Config,\n        userRepo: Repository<User>\n    ) {\n        this.config = config;\n        this.userRepo = userRepo;\n    }\n\n    async initialize() {\n        if (this.config.discord.botToken) { // Don't initialize the service if there's no token configured.\n            this.client = new Discord.Client()\n            await this.client.login(this.config.discord.botToken);\n\n            console.log('Discord Initialized');\n        }\n    }\n\n    isConnected() {\n        return this.client != null;\n    }\n\n    async isServerMember(discordUserId: string) {\n        let guild = await this.client.guilds.fetch(this.config.discord.serverId);\n        let guildMember = await guild.members.resolveID(discordUserId);\n\n        return guildMember != null;\n    }\n\n    async updateOAuth(userId, discordUserId, oauth) {\n        if (!this.isConnected()) {\n            throw new Error(`The Discord integration is not enabled.`);\n        }\n\n        const isServerMember = await this.isServerMember(discordUserId);\n\n        if (!isServerMember) {\n            throw new ValidationError(`You must be a member of the official Solaris discord server to continue. Please join the server and try again.`);\n        }\n\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            $set: {\n                'oauth.discord': {\n                    userId: discordUserId,\n                    token: {\n                        access_token: oauth.access_token,\n                        token_type: oauth.token_type,\n                        expires_in: oauth.expires_in,\n                        refresh_token: oauth.refresh_token,\n                        scope: oauth.scope\n                    }\n                }\n            }\n        });\n\n        const user = await this.client.users.fetch(discordUserId);\n\n        user.send(`Hello there, you've just connected your Solaris account to Discord!\\r\\n\\r\\nWe'll start sending notifications to you for in-game events. To change your subscriptions, head over to your user account page.`);\n    }\n\n    async clearOAuth(userId) {\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            $set: {\n                'oauth.discord': null\n            }\n        });\n    }\n\n    async sendMessageByUserId(discordUserId: string, messageTemplate: any) {\n        const duser = await this.client.users.fetch(discordUserId);\n\n        if (!duser) {\n            return;\n        }\n\n        // We need to double check that the user is a member of the Solaris discord server\n        // because if they are not, then we cannot send a PM to them.\n        const isServerMember = await this.isServerMember(discordUserId);\n\n        if (!isServerMember) {\n            return;\n        }\n\n        try {\n            await duser.send({\n                embed: messageTemplate\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    async sendMessageOAuth(user: User, messageTemplate: any) {\n        if (!this.isConnected() || !user.oauth.discord || !user.oauth.discord.userId) {\n            return\n        }\n        \n        await this.sendMessageByUserId(user.oauth.discord.userId, messageTemplate);\n    }\n\n    async sendMessageByChannel(channelId: string, messageTemplate: any) {\n        const channel = await this.client.channels.fetch(channelId);\n\n        if (!channel) {\n            return;\n        }\n\n        try {\n            await channel.send({\n                embed: messageTemplate\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    }\n}"],
  "mappings": "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",
  "names": ["ValidationError"]
}
