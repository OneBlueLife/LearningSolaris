{
  "version": 3,
  "sources": ["../../../server/services/repository.ts"],
  "sourcesContent": ["import { DBObjectId } from \"./types/DBObjectId\";\n\nexport default class Repository<T> {\n\n    model;\n    \n    constructor(model) {\n        this.model = model;\n    }\n\n    async findById(id: DBObjectId, select?): Promise<T | null> {\n        return await this.model.findById(id, select)\n        .lean({ defaults: true })\n        .exec();\n    }\n\n    async findByIdAsModel(id: DBObjectId, select?): Promise<any | null> {\n        return await this.model.findById(id, select).exec();\n    }\n\n    async find(query, select?: any | null, sort?: any | null, limit?: number | null, skip?: number | null): Promise<T[]> {\n        return await this.model.find(query, select)\n        .sort(sort)\n        .skip(skip)\n        .limit(limit)\n        .lean({ defaults: true })\n        .exec();\n    }\n\n    async findAsModels(query, select?, sort?, limit?: number, skip?: number): Promise<any[]> {\n        return await this.model.find(query, select)\n        .sort(sort)\n        .skip(skip)\n        .limit(limit)\n        .exec();\n    }\n\n    async findOne(query, select?): Promise<T | null> {\n        return await this.model.findOne(query, select)\n        .lean({ defaults: true })\n        .exec();\n    }\n\n    async findOneAsModel(query, select?): Promise<any | null> {\n        return await this.model.findOne(query, select)\n        .exec();\n    }\n\n    async count(query): Promise<number> {\n        return await this.model.countDocuments(query).exec();\n    }\n\n    async countAll(): Promise<number> {\n        return this.model.estimatedDocumentCount();\n    }\n\n    async updateOne(query, update, options?): Promise<void> {\n        return await this.model.updateOne(query, update, options).exec();\n    }\n\n    async updateMany(query, update, options?): Promise<void> {\n        return await this.model.updateMany(query, update, options).exec();\n    }\n\n    async bulkWrite(updates): Promise<void> {\n        return await this.model.bulkWrite(updates);\n    }\n\n    async deleteOne(query): Promise<void> {\n        return await this.model.deleteOne(query).exec();\n    }\n\n    async deleteMany(query): Promise<void> {\n        return await this.model.deleteMany(query).exec();\n    }\n\n    async insertOne(document): Promise<void> {\n        return await this.bulkWrite([\n            {\n                insertOne: {\n                    document\n                }\n            }\n        ]);\n    }\n\n    objectIdFromDate(date: Date) {\n        return Math.floor(date.getTime() / 1000).toString(16) + \"0000000000000000\";\n    }\n    \n    dateFromObjectId(objectId: DBObjectId | string) {\n        return new Date(parseInt(objectId.toString().substring(0, 8), 16) * 1000);\n    }\n\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,MAAO,WAA4B;AAAA,EAI/B,YAAY,OAAO;AACf,SAAK,QAAQ;AAAA,EACjB;AAAA,EAEA,MAAM,SAAS,IAAgB,QAA4B;AACvD,WAAO,MAAM,KAAK,MAAM,SAAS,IAAI,MAAM,EAC1C,KAAK,EAAE,UAAU,KAAK,CAAC,EACvB,KAAK;AAAA,EACV;AAAA,EAEA,MAAM,gBAAgB,IAAgB,QAA8B;AAChE,WAAO,MAAM,KAAK,MAAM,SAAS,IAAI,MAAM,EAAE,KAAK;AAAA,EACtD;AAAA,EAEA,MAAM,KAAK,OAAO,QAAqB,MAAmB,OAAuB,MAAoC;AACjH,WAAO,MAAM,KAAK,MAAM,KAAK,OAAO,MAAM,EACzC,KAAK,IAAI,EACT,KAAK,IAAI,EACT,MAAM,KAAK,EACX,KAAK,EAAE,UAAU,KAAK,CAAC,EACvB,KAAK;AAAA,EACV;AAAA,EAEA,MAAM,aAAa,OAAO,QAAS,MAAO,OAAgB,MAA+B;AACrF,WAAO,MAAM,KAAK,MAAM,KAAK,OAAO,MAAM,EACzC,KAAK,IAAI,EACT,KAAK,IAAI,EACT,MAAM,KAAK,EACX,KAAK;AAAA,EACV;AAAA,EAEA,MAAM,QAAQ,OAAO,QAA4B;AAC7C,WAAO,MAAM,KAAK,MAAM,QAAQ,OAAO,MAAM,EAC5C,KAAK,EAAE,UAAU,KAAK,CAAC,EACvB,KAAK;AAAA,EACV;AAAA,EAEA,MAAM,eAAe,OAAO,QAA8B;AACtD,WAAO,MAAM,KAAK,MAAM,QAAQ,OAAO,MAAM,EAC5C,KAAK;AAAA,EACV;AAAA,EAEA,MAAM,MAAM,OAAwB;AAChC,WAAO,MAAM,KAAK,MAAM,eAAe,KAAK,EAAE,KAAK;AAAA,EACvD;AAAA,EAEA,MAAM,WAA4B;AAC9B,WAAO,KAAK,MAAM,uBAAuB;AAAA,EAC7C;AAAA,EAEA,MAAM,UAAU,OAAO,QAAQ,SAAyB;AACpD,WAAO,MAAM,KAAK,MAAM,UAAU,OAAO,QAAQ,OAAO,EAAE,KAAK;AAAA,EACnE;AAAA,EAEA,MAAM,WAAW,OAAO,QAAQ,SAAyB;AACrD,WAAO,MAAM,KAAK,MAAM,WAAW,OAAO,QAAQ,OAAO,EAAE,KAAK;AAAA,EACpE;AAAA,EAEA,MAAM,UAAU,SAAwB;AACpC,WAAO,MAAM,KAAK,MAAM,UAAU,OAAO;AAAA,EAC7C;AAAA,EAEA,MAAM,UAAU,OAAsB;AAClC,WAAO,MAAM,KAAK,MAAM,UAAU,KAAK,EAAE,KAAK;AAAA,EAClD;AAAA,EAEA,MAAM,WAAW,OAAsB;AACnC,WAAO,MAAM,KAAK,MAAM,WAAW,KAAK,EAAE,KAAK;AAAA,EACnD;AAAA,EAEA,MAAM,UAAU,UAAyB;AACrC,WAAO,MAAM,KAAK,UAAU;AAAA,MACxB;AAAA,QACI,WAAW;AAAA,UACP;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,iBAAiB,MAAY;AACzB,WAAO,KAAK,MAAM,KAAK,QAAQ,IAAI,GAAI,EAAE,SAAS,EAAE,IAAI;AAAA,EAC5D;AAAA,EAEA,iBAAiB,UAA+B;AAC5C,WAAO,IAAI,KAAK,SAAS,SAAS,SAAS,EAAE,UAAU,GAAG,CAAC,GAAG,EAAE,IAAI,GAAI;AAAA,EAC5E;AAEJ;AAAC;",
  "names": []
}
