{
  "version": 3,
  "sources": ["../../../server/services/notification.ts"],
  "sourcesContent": ["import Repository from './repository';\nimport { Config } from '../config/types/Config';\nimport { DBObjectId } from './types/DBObjectId';\nimport { Game } from './types/Game';\nimport { Player } from './types/Player';\nimport { User } from './types/User';\nimport DiscordService from './discord';\nimport ConversationService, { ConversationServiceEvents } from './conversation';\nimport GameService from './game';\nimport GameTickService, { GameTickServiceEvents } from './gameTick';\nimport ResearchService, { ResearchServiceEvents } from './research';\nimport TradeService, { TradeServiceEvents } from './trade';\nimport PlayerGalacticCycleCompletedEvent from './types/events/PlayerGalacticCycleComplete';\nimport { BaseGameEvent } from './types/events/BaseGameEvent';\nimport GameEndedEvent from './types/events/GameEnded';\nimport GameTurnEndedEvent from './types/events/GameTurnEnded';\nimport ConversationMessageSentEvent from './types/events/ConversationMessageSent';\nimport GameJoinService, { GameJoinServiceEvents } from './gameJoin';\n\n// Note: We only support discord subscriptions at this point, if any new ones are added\n// this class will need to be refactored to use something like the strategy pattern.\ntype SubscriptionType = 'discord';\ntype SubscriptionEvent = 'gameStarted'|\n    'gameEnded'|\n    'gameTurnEnded'|\n    'playerGalacticCycleComplete'|\n    'playerResearchComplete'|\n    'playerTechnologyReceived'|\n    'playerCreditsReceived'|\n    'playerCreditsSpecialistsReceived'|\n    'playerRenownReceived'|\n    'conversationMessageSent';\n\nexport default class NotificationService {\n    config: Config;\n    userRepo: Repository<User>;\n    gameRepo: Repository<Game>;\n    discordService: DiscordService;\n    conversationService: ConversationService;\n    gameService: GameService;\n    gameJoinService: GameJoinService;\n    gameTickService: GameTickService;\n    researchService: ResearchService;\n    tradeService: TradeService;\n\n    constructor(\n        config: Config,\n        userRepo: Repository<User>,\n        gameRepo: Repository<Game>,\n        discordService: DiscordService,\n        conversationService: ConversationService,\n        gameService: GameService,\n        gameJoinService: GameJoinService,\n        gameTickService: GameTickService,\n        researchService: ResearchService,\n        tradeService: TradeService\n    ) {\n        this.config = config;\n        this.userRepo = userRepo;\n        this.gameRepo = gameRepo;\n        this.discordService = discordService;\n        this.conversationService = conversationService;\n        this.gameService = gameService;\n        this.gameJoinService = gameJoinService;\n        this.gameTickService = gameTickService;\n        this.researchService = researchService;\n        this.tradeService = tradeService;\n    }\n\n    initialize() {\n        if (this.discordService.isConnected()) { // Don't initialize the notification service if there's no token configured.\n            this.conversationService.on(ConversationServiceEvents.onConversationMessageSent, (args) => this.onConversationMessageSent(args));\n\n            this.gameJoinService.on(GameJoinServiceEvents.onGameStarted, (args) => this.onGameStarted(args));\n            this.gameTickService.on(GameTickServiceEvents.onGameEnded, (args) => this.onGameEnded(args));\n            this.gameTickService.on(GameTickServiceEvents.onGameTurnEnded, (args) => this.onGameTurnEnded(args));\n            this.gameTickService.on(GameTickServiceEvents.onPlayerGalacticCycleCompleted, (args) => this.onPlayerGalacticCycleCompleted(args));\n            this.researchService.on(ResearchServiceEvents.onPlayerResearchCompleted, (args) => this.onPlayerResearchCompleted(args.gameId, args.playerId, args.technologyKey, args.technologyLevel, args.technologyKeyNext, args.technologyLevelNext));\n            this.tradeService.on(TradeServiceEvents.onPlayerCreditsReceived, (args) => this.onPlayerCreditsReceived(args.gameId, args.fromPlayer, args.toPlayer, args.amount));\n            this.tradeService.on(TradeServiceEvents.onPlayerCreditsSpecialistsReceived, (args) => this.onPlayerCreditsSpecialistsReceived(args.gameId, args.fromPlayer, args.toPlayer, args.amount));\n            this.tradeService.on(TradeServiceEvents.onPlayerRenownReceived, (args) => this.onPlayerRenownReceived(args.gameId, args.fromPlayer, args.toPlayer, args.amount));\n            this.tradeService.on(TradeServiceEvents.onPlayerTechnologyReceived, (args) => this.onPlayerTechnologyReceived(args.gameId, args.fromPlayer, args.toPlayer, args.technology));\n\n            console.log('Notifications initialized.')\n        }\n    }\n\n    async _getNotificationContext(gameId: DBObjectId, playerIds: string[] | null) {\n        // Get the game that the players are in.\n        const game = (await this.gameRepo.findOne({\n            _id: gameId\n        }, {\n            '_id': 1,\n            'settings.general.name': 1,\n            'galaxy.players._id': 1,\n            'galaxy.players.userId': 1,\n            'galaxy.players.defeated': 1\n        }))!;\n\n        // Filter to get the user ids for the players in this context.\n        const players = game.galaxy.players.filter(p => !playerIds || playerIds.includes(p._id.toString()))\n        const userIds = players.map(p => p.userId);\n\n        // Get the user profiles for the filtered users in the context\n        const users = await this.userRepo.find({\n            $and: [\n                { _id: { $in: userIds } },\n                { 'oauth': { $ne: null } },\n                { 'subscriptions': { $ne: null } }\n            ]\n        }, {\n            _id: 1,\n            'oauth': 1,\n            'subscriptions': 1\n        });\n\n        return {\n            game,\n            players,\n            users\n        };\n    }\n\n    async _trySendNotifications(gameId: DBObjectId, playerIds: string[] | null, type: SubscriptionType, event: SubscriptionEvent, sendNotificationCallback: (game: Game, user: User) => any) {\n        // Get the context of the notification; the game, users and their subscriptions.\n        const context = await this._getNotificationContext(gameId, playerIds);\n\n        // Try to send a notification to each user in the context\n        for (let user of context.users) {\n            // User doesn't have subscriptions for the type or no subscriptions for the given event\n            if (!user.subscriptions[type] || !user.subscriptions[type]![event]) {\n                continue;\n            }\n\n            // Check for if the user does not want to be notified if they are defeated.\n            if (user.subscriptions.settings.notifyActiveGamesOnly &&\n                context.players.find(p => p.userId!.toString() === user._id.toString())!.defeated) {\n                continue;\n            }\n\n            await sendNotificationCallback(context.game, user);\n        }\n    }\n\n    _generateBaseDiscordMessageTemplate(game: Game, title: string, description: string) {\n        return {\n            title,\n            url: `${this.config.clientUrl}/#/game/?id=${game._id}`,\n            author: {\n                name: game.settings.general.name\n            },\n            description,\n            fields: [] as any[],\n            timestamp: new Date(),\n            footer: {\n                text: `Solaris`\n            }\n        }\n    }\n\n    async onGameStarted(args: BaseGameEvent) {\n        // Send the game started notification for Discord subscription to all players.\n        await this._trySendNotifications(args.gameId, null, 'discord', 'gameStarted',\n            async (game: Game, user: User) => {\n                const template = this._generateBaseDiscordMessageTemplate(game, 'Game Started', 'The game has started. Good luck and have fun!');\n\n                await this.discordService.sendMessageOAuth(user, template);\n            });\n    }\n\n    async onGameEnded(args: GameEndedEvent) {\n        // Send the game ended notification for Discord subscription to all players.\n        await this._trySendNotifications(args.gameId, null, 'discord', 'gameEnded', \n            async (game: Game, user: User) => {\n                const template = this._generateBaseDiscordMessageTemplate(game, 'Game Ended', 'The game has ended.');\n\n                await this.discordService.sendMessageOAuth(user, template);\n            });\n    }\n\n    async onGameTurnEnded(args: GameTurnEndedEvent) {\n        // Send the game turn ended notification for Discord subscription to all players.\n        await this._trySendNotifications(args.gameId, null, 'discord', 'gameTurnEnded', \n            async (game: Game, user: User) => {\n                const template = this._generateBaseDiscordMessageTemplate(game, 'Game Turn Ended', 'A turn has finished, it\\'s your turn to play!');\n\n                await this.discordService.sendMessageOAuth(user, template);\n            });\n    }\n\n    async onPlayerGalacticCycleCompleted(args: PlayerGalacticCycleCompletedEvent) {\n        // Send the galactic cycle completed notification for Discord subscription to the player.\n        await this._trySendNotifications(args.gameId, [args.playerId!.toString()], 'discord', 'playerGalacticCycleComplete', \n            async (game: Game, user: User) => {\n                const template = this._generateBaseDiscordMessageTemplate(game, 'Galactic Cycle Complete', 'A galactic cycle has finished! You have received new funds to spend upgrading your empire.');\n\n                if (args.creditsEconomy) {\n                    template.fields.push({\n                        name: 'Credits from Economy',\n                        value: args.creditsEconomy,\n                        inline: true\n                    });\n                }\n\n                if (args.creditsBanking) {\n                    template.fields.push({\n                        name: 'Credits from Banking',\n                        value: args.creditsBanking,\n                        inline: true\n                    });\n                }\n\n                if (args.creditsSpecialists) {\n                    template.fields.push({\n                        name: 'Specialist Tokens',\n                        value: args.creditsSpecialists,\n                        inline: true\n                    });\n                }\n\n                if (args.experimentTechnology) {\n                    template.fields.push({\n                        name: 'Experimentation',\n                        value: `${args.experimentTechnology} (${args.experimentAmount} points)`,\n                        inline: true\n                    });\n                }\n\n                if (args.experimentLevelUp) {\n                    template.fields.push({\n                        name: 'Now Researching',\n                        value: `${args.experimentResearchingNext}`,\n                        inline: true\n                    });\n                }\n\n                if (args.carrierUpkeep && (args.carrierUpkeep.carrierCount || args.carrierUpkeep.totalCost)) {\n                    template.fields.push({\n                        name: 'Carrier Upkeep',\n                        value: `$${args.carrierUpkeep.totalCost} (${args.carrierUpkeep.carrierCount} carriers)`,\n                        inline: true\n                    });\n                }\n\n                if (args.allianceUpkeep && (args.allianceUpkeep.allianceCount || args.allianceUpkeep.totalCost)) {\n                    template.fields.push({\n                        name: 'Alliance Upkeep',\n                        value: `$${args.allianceUpkeep.totalCost} (${args.allianceUpkeep.allianceCount} alliances)`,\n                        inline: true\n                    });\n                }\n\n                await this.discordService.sendMessageOAuth(user, template);\n            });\n    }\n\n    async onPlayerResearchCompleted(gameId: DBObjectId, playerId: DBObjectId, technologyKey: string, technologyLevel: number, technologyKeyNext: string, technologyLevelNext: number) {\n        // Send the research completed notification for Discord subscription to the player.\n        await this._trySendNotifications(gameId, [playerId.toString()], 'discord', 'playerResearchComplete', \n            async (game: Game, user: User) => {\n                const template = this._generateBaseDiscordMessageTemplate(game, 'Research Complete', 'You have finished researching a technology.');\n\n                template.fields.push({\n                    name: 'Technology',\n                    value: `${technologyKey} level ${technologyLevel}`,\n                    inline: false\n                });\n\n                template.fields.push({\n                    name: 'Now Researching',\n                    value: `${technologyKeyNext} level ${technologyLevelNext}`,\n                    inline: false\n                });\n\n                await this.discordService.sendMessageOAuth(user, template);\n            });\n    }\n\n    async onPlayerCreditsReceived(gameId: DBObjectId, fromPlayer: Player, toPlayer: Player, amount: number) {\n        // Send the credits received notification for Discord subscription to the player.\n        await this._trySendNotifications(gameId, [toPlayer._id.toString()], 'discord', 'playerCreditsReceived', \n            async (game: Game, user: User) => {\n                const template = this._generateBaseDiscordMessageTemplate(game, 'Credits Received', `You have received **$${amount}** credits from **${fromPlayer.alias}**.`);\n\n                await this.discordService.sendMessageOAuth(user, template);\n            });\n    }\n\n    async onPlayerCreditsSpecialistsReceived(gameId: DBObjectId, fromPlayer: Player, toPlayer: Player, amount: number) {\n        // Send the specialist tokens received notification for Discord subscription to the player.\n        await this._trySendNotifications(gameId, [toPlayer._id.toString()], 'discord', 'playerCreditsSpecialistsReceived', \n            async (game: Game, user: User) => {\n                const template = this._generateBaseDiscordMessageTemplate(game, 'Specialist Tokens Received', `You have received **${amount}** specialist token(s) from **${fromPlayer.alias}**.`);\n\n                await this.discordService.sendMessageOAuth(user, template);\n            });\n    }\n\n    async onPlayerTechnologyReceived(gameId: DBObjectId, fromPlayer: Player, toPlayer: Player, technology: any) {\n        // Send the specialist tokens received notification for Discord subscription to the player.\n        await this._trySendNotifications(gameId, [toPlayer._id.toString()], 'discord', 'playerTechnologyReceived', \n            async (game: Game, user: User) => {\n                const template = this._generateBaseDiscordMessageTemplate(game, 'Technology Received', `You have received **Level ${technology.level} ${technology.name}** from **${fromPlayer.alias}**.`);\n\n                await this.discordService.sendMessageOAuth(user, template);\n            });\n    }\n\n    async onPlayerRenownReceived(gameId: DBObjectId, fromPlayer: Player, toPlayer: Player, amount: number) {\n        // Send the renown received notification for Discord subscription to the player.\n        await this._trySendNotifications(gameId, [toPlayer._id.toString()], 'discord', 'playerRenownReceived', \n            async (game: Game, user: User) => {\n                const template = this._generateBaseDiscordMessageTemplate(game, 'Renown Received', `You have received **${amount}** renown from **${fromPlayer.alias}**.`);\n\n                await this.discordService.sendMessageOAuth(user, template);\n            });\n    }\n\n    async onConversationMessageSent(args: ConversationMessageSentEvent) {\n        const toPlayerIds = args.sentMessageResult.toPlayerIds.map(id => id.toString());\n        const readBy = args.sentMessageResult.readBy.map(id => id.toString());\n\n        // Filter the players who haven't auto-read the message.\n        const playerIdsToCheck = toPlayerIds.filter(pid => !readBy.includes(pid));\n\n        await this._trySendNotifications(args.gameId, playerIdsToCheck, 'discord', 'conversationMessageSent',\n            async (game: Game, user: User) => {\n                // Note: We have fancy mentions on the UI so we need to account for that here.\n                // Surround any mentions with square brackets.\n                const formattedMessage = args.sentMessageResult.message.replace(/{{(\\w)\\/(\\w+?)\\/(.+?)}}/g, (match, type, id, name) => `{${name}}`);\n\n                const template = this._generateBaseDiscordMessageTemplate(game, 'New Message Received', formattedMessage);\n\n                template.author.name = args.sentMessageResult.fromPlayerAlias;\n\n                await this.discordService.sendMessageOAuth(user, template);\n            });\n    }\n}"],
  "mappings": "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",
  "names": []
}
