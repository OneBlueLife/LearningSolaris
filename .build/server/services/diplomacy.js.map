{
  "version": 3,
  "sources": ["../../../server/services/diplomacy.ts"],
  "sourcesContent": ["const EventEmitter = require('events');\nconst moment = require('moment')\nimport { DBObjectId } from \"./types/DBObjectId\";\nimport ValidationError from '../errors/validation';\nimport Repository from \"./repository\";\nimport { DiplomacyEvent, DiplomaticState, DiplomaticStatus } from \"./types/Diplomacy\";\nimport { Game } from \"./types/Game\";\nimport { Player, PlayerDiplomaticState } from \"./types/Player\";\nimport DiplomacyUpkeepService from \"./diplomacyUpkeep\";\nimport GameDiplomacyPeaceDeclaredEvent from \"./types/events/GameDiplomacyPeaceDeclared\";\nimport GameDiplomacyWarDeclaredEvent from \"./types/events/GameDiplomacyWarDeclared\";\nimport { GameEvent } from \"./types/GameEvent\";\n\nexport const DiplomacyServiceEvents = {\n    onDiplomacyStatusChanged: 'onDiplomacyStatusChanged',\n    onDiplomacyPeaceDeclared: 'onDiplomacyPeaceDeclared',\n    onDiplomacyWarDeclared: 'onDiplomacyWarDeclared'\n}\n\nexport default class DiplomacyService extends EventEmitter {\n\n    gameRepo: Repository<Game>;\n    eventRepo: Repository<GameEvent>;\n    diplomacyUpkeepService: DiplomacyUpkeepService;\n\n    constructor(\n        gameRepo: Repository<Game>,\n        eventRepo: Repository<GameEvent>,\n        diplomacyUpkeepService: DiplomacyUpkeepService\n    ) {\n        super();\n\n        this.gameRepo = gameRepo;\n        this.eventRepo = eventRepo;\n        this.diplomacyUpkeepService = diplomacyUpkeepService;\n    }\n\n    isFormalAlliancesEnabled(game: Game): boolean {\n        return game.settings.diplomacy.enabled === 'enabled';\n    }\n\n    isTradeRestricted(game: Game): boolean {\n        return game.settings.diplomacy.tradeRestricted === 'enabled';\n    }\n\n    isMaxAlliancesEnabled(game: Game): boolean {\n        return game.settings.diplomacy.maxAlliances < game.settings.general.playerLimit - 1\n    }\n\n    isGlobalEventsEnabled(game: Game): boolean {\n        return game.settings.diplomacy.globalEvents === 'enabled';\n    }\n\n    getDiplomaticStatusBetweenPlayers(game: Game, playerIds: DBObjectId[]): DiplomaticState {\n        let statuses: DiplomaticState[] = [];\n\n        for (let i = 0; i < playerIds.length; i++) {\n            for (let ii = 0; ii < playerIds.length; ii++) {\n                if (i === ii) {\n                    continue;\n                }\n\n                let playerIdA = playerIds[i];\n                let playerIdB = playerIds[ii];\n\n                let diplomaticStatus = this.getDiplomaticStatusToPlayer(game, playerIdA, playerIdB);\n\n                statuses.push(diplomaticStatus.actualStatus);\n            }\n        }\n\n        if (statuses.indexOf('enemies') > -1) {\n            return 'enemies';\n        } else if (statuses.indexOf('neutral') > -1) {\n            return 'neutral';\n        }\n\n        return 'allies';\n    }\n\n    getDiplomaticStatusToPlayer(game: Game, playerIdA: DBObjectId, playerIdB: DBObjectId): DiplomaticStatus {\n        let playerA: Player = game.galaxy.players.find(p => p._id.toString() === playerIdA.toString())!;\n        let playerB: Player = game.galaxy.players.find(p => p._id.toString() === playerIdB.toString())!;\n\n        if (playerIdA.toString() === playerIdB.toString()) {\n            return {\n                playerIdFrom: playerIdA,\n                playerIdTo: playerIdB,\n                playerFromAlias: playerA.alias,\n                playerToAlias: playerB.alias,\n                statusFrom: 'allies',\n                statusTo: 'allies',\n                actualStatus: 'allies'\n            };\n        }\n\n        let statusTo: DiplomaticState = playerA.diplomacy.find(x => x.playerId.toString() === playerB._id.toString())?.status ?? 'neutral';\n        let statusFrom: DiplomaticState = playerB.diplomacy.find(x => x.playerId.toString() === playerA._id.toString())?.status ?? 'neutral';\n\n        let actualStatus: DiplomaticState;\n\n        if (statusTo === 'enemies' || statusFrom === 'enemies') {\n            actualStatus = 'enemies';\n        } else if (statusTo === 'neutral' || statusFrom === 'neutral') {\n            actualStatus = 'neutral';\n        } else {\n            actualStatus = 'allies';\n        }\n\n        return {\n            playerIdFrom: playerIdA,\n            playerIdTo: playerIdB,\n            playerFromAlias: playerA.alias,\n            playerToAlias: playerB.alias,\n            statusFrom,\n            statusTo,\n            actualStatus\n        };\n    }\n\n    getDiplomaticStatusToAllPlayers(game: Game, player: Player): DiplomaticStatus[] {\n        let diplomaticStatuses: DiplomaticStatus[] = [];\n\n        for (let otherPlayer of game.galaxy.players) {\n            if (player._id.toString() === otherPlayer._id.toString()) {\n                continue;\n            }\n\n            diplomaticStatuses.push(this.getDiplomaticStatusToPlayer(game, player._id, otherPlayer._id));\n        }\n\n        return diplomaticStatuses;\n    }\n\n    getAlliesOfPlayer(game: Game, player: Player): Player[] {\n        let allies: Player[] = [];\n\n        for (let otherPlayer of game.galaxy.players) {\n            if (otherPlayer._id.toString() === player._id.toString()) {\n                continue;\n            }\n\n            let diplomaticStatus = this.getDiplomaticStatusToPlayer(game, player._id, otherPlayer._id);\n\n            if (diplomaticStatus.actualStatus === 'allies') {\n                allies.push(otherPlayer);\n            }\n        }\n\n        return allies;\n    }\n\n    getAlliesOrOffersOfPlayer(game: Game, player: Player): Player[] {\n        let allies: Player[] = [];\n\n        for (let otherPlayer of game.galaxy.players) {\n            if (otherPlayer._id.toString() === player._id.toString()) {\n                continue;\n            }\n\n            let diplomaticStatus = this.getDiplomaticStatusToPlayer(game, player._id, otherPlayer._id);\n\n            if (diplomaticStatus.actualStatus === 'allies' || diplomaticStatus.statusTo === 'allies') {\n                allies.push(otherPlayer);\n            }\n        }\n\n        return allies;\n    }\n\n    isDiplomaticStatusBetweenPlayersAllied(game: Game, playerIds: DBObjectId[]): boolean {\n        return this.getDiplomaticStatusBetweenPlayers(game, playerIds) === 'allies';\n    }\n\n    isDiplomaticStatusToPlayersAllied(game: Game, playerId: DBObjectId, toPlayerIds: DBObjectId[]): boolean {\n        let playerIdA = playerId;\n\n        for (let i = 0; i < toPlayerIds.length; i++) {\n            let playerIdB = toPlayerIds[i];\n\n            let diplomaticStatus = this.getDiplomaticStatusToPlayer(game, playerIdA, playerIdB);\n\n            if (['enemies', 'neutral'].includes(diplomaticStatus.actualStatus)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    getFilteredDiplomacy(player: Player, forPlayer: Player): PlayerDiplomaticState[] {\n        return player.diplomacy.filter(a => a.toString() === forPlayer._id.toString());\n    }\n\n    async _declareStatus(game: Game, playerId: DBObjectId, playerIdTarget: DBObjectId, state: DiplomaticState, saveToDB: boolean = true) {\n        let player: Player = game.galaxy.players.find(p => p._id.toString() === playerId.toString())!;\n        let diplo = player.diplomacy.find(d => d.playerId.toString() === playerIdTarget.toString());\n\n        if (!diplo) {\n            diplo = {\n                playerId: playerIdTarget,\n                status: state\n            };\n\n            player.diplomacy.push(diplo);\n\n            if (saveToDB) {\n                await this.gameRepo.updateOne({\n                    _id: game._id,\n                    'galaxy.players._id': playerId\n                }, {\n                    $addToSet: {\n                        'galaxy.players.$.diplomacy': diplo\n                    }\n                });\n            }\n        } else {\n            diplo.status = state;\n\n            if (saveToDB) {\n                await this.gameRepo.updateOne({\n                    _id: game._id,\n                }, {\n                    $set: {\n                        'galaxy.players.$[p].diplomacy.$[d].status': diplo.status\n                    }\n                }, {\n                    arrayFilters: [\n                        { 'p._id': player._id },\n                        { 'd.playerId': diplo.playerId }\n                    ]\n                });\n            }\n        }\n\n        // Figure out what the new status is and return.\n        let diplomaticStatus = this.getDiplomaticStatusToPlayer(game, playerId, playerIdTarget);\n\n        return diplomaticStatus;\n    }\n\n    async declareAlly(game: Game, playerId: DBObjectId, playerIdTarget: DBObjectId, saveToDB: boolean = true) {\n        let oldStatus = this.getDiplomaticStatusToPlayer(game, playerId, playerIdTarget);\n\n        if (oldStatus.statusTo === \"allies\") {\n            throw new ValidationError(`The player has already been declared as allies`);\n        }\n\n        if (this.isMaxAlliancesEnabled(game)) {\n            let player = game.galaxy.players.find(p => p._id.toString() === playerId.toString())!;\n    \n            let allianceCount = this.getAlliesOrOffersOfPlayer(game, player).length;\n\n            if (allianceCount >= game.settings.diplomacy.maxAlliances) {\n                throw new ValidationError(`You have reached the alliance cap, you cannot declare any more alliances.`);\n            }\n        }\n\n        // If there is an upkeep cost, deduct 1 cycle's worth of up for 1 alliance upfront.\n        if (this.diplomacyUpkeepService.isAllianceUpkeepEnabled(game)) {\n            let player = game.galaxy.players.find(p => p._id.toString() === playerId.toString())!;\n\n            await this.diplomacyUpkeepService.deductUpkeep(game, player, 1, saveToDB);\n        }\n        \n        let wasAtWar = this.getDiplomaticStatusToPlayer(game, playerId, playerIdTarget).actualStatus === 'enemies';\n\n        let newStatus = await this._declareStatus(game, playerId, playerIdTarget, 'allies', saveToDB);\n\n        let isAllied = newStatus.actualStatus === 'allies';\n        let isFriendly = isAllied || newStatus.actualStatus === 'neutral';\n\n        this.emit(DiplomacyServiceEvents.onDiplomacyStatusChanged, {\n            gameId: game._id,\n            gameTick: game.state.tick,\n            status: newStatus\n        });\n\n        // Create a global event for peace reached if both players were at war and are now either neutral or allied.\n        if (this.isGlobalEventsEnabled(game) && wasAtWar && isFriendly) {\n            let e: GameDiplomacyPeaceDeclaredEvent = {\n                gameId: game._id,\n                gameTick: game.state.tick,\n                status: newStatus\n            };\n\n            this.emit(DiplomacyServiceEvents.onDiplomacyPeaceDeclared, e);\n        }\n\n        return newStatus;\n    }\n\n    async declareEnemy(game: Game, playerId: DBObjectId, playerIdTarget: DBObjectId, saveToDB: boolean = true) {\n        let oldStatus = this.getDiplomaticStatusToPlayer(game, playerId, playerIdTarget);\n\n        if (oldStatus.statusTo === \"enemies\") {\n            throw new ValidationError(`The player has already been declared as enemies`);\n        }\n\n        let wasAtWar = oldStatus.actualStatus === 'enemies';\n\n        // When declaring enemies, set both to enemies irrespective of which side declared it.\n        await this._declareStatus(game, playerId, playerIdTarget, 'enemies', saveToDB);\n        await this._declareStatus(game, playerIdTarget, playerId, 'enemies', saveToDB);\n\n        let newStatus = this.getDiplomaticStatusToPlayer(game, playerId, playerIdTarget);\n\n        this.emit(DiplomacyServiceEvents.onDiplomacyStatusChanged, {\n            gameId: game._id,\n            gameTick: game.state.tick,\n            status: newStatus\n        });\n\n        // Create a global event for enemy declaration.\n        if (this.isGlobalEventsEnabled(game) && !wasAtWar) {\n            let e: GameDiplomacyWarDeclaredEvent = {\n                gameId: game._id,\n                gameTick: game.state.tick,\n                status: newStatus\n            };\n            \n            this.emit(DiplomacyServiceEvents.onDiplomacyWarDeclared, e);\n        }\n\n        return newStatus;\n    }\n\n    async declareNeutral(game: Game, playerId: DBObjectId, playerIdTarget: DBObjectId, saveToDB: boolean = true) {\n        let oldStatus = this.getDiplomaticStatusToPlayer(game, playerId, playerIdTarget);\n\n        if (oldStatus.statusTo === \"neutral\") {\n            throw new ValidationError(`The player has already been declared as neutral`);\n        }\n\n        let wasAtWar = oldStatus.actualStatus === 'enemies';\n        let wasAllied = oldStatus.actualStatus === 'allies';\n        \n        await this._declareStatus(game, playerId, playerIdTarget, 'neutral', saveToDB);\n\n        // When declaring neutral, set both players to neutral if they were allies before.\n        if (wasAllied) {\n            await this._declareStatus(game, playerIdTarget, playerId, 'neutral', saveToDB);\n        }\n\n        let newStatus = this.getDiplomaticStatusToPlayer(game, playerId, playerIdTarget);\n\n        let isNeutral = newStatus.actualStatus === 'neutral';\n\n        this.emit(DiplomacyServiceEvents.onDiplomacyStatusChanged, {\n            gameId: game._id,\n            gameTick: game.state.tick,\n            status: newStatus\n        });\n\n        // Create a global event for peace reached if both players were at war.\n        if (this.isGlobalEventsEnabled(game) && wasAtWar && isNeutral) {\n            let e: GameDiplomacyPeaceDeclaredEvent = {\n                gameId: game._id,\n                gameTick: game.state.tick,\n                status: newStatus\n            };\n\n            this.emit(DiplomacyServiceEvents.onDiplomacyPeaceDeclared, e);\n        }\n\n        return newStatus;\n    }\n\n    async listDiplomacyEventsBetweenPlayers(game: Game, playerIdA: DBObjectId, playerIdB: DBObjectId): Promise<DiplomacyEvent[]> {\n        let events = await this.eventRepo.find({\n            gameId: game._id,\n            playerId: playerIdA,\n            type: 'playerDiplomacyStatusChanged',\n            $or: [\n                { 'data.playerIdFrom': playerIdB },\n                { 'data.playerIdTo': playerIdB }\n            ]\n        });\n\n        return events\n        .map(e => {\n            return {\n                playerId: e.playerId!,\n                type: e.type,\n                data: e.data,\n                sentDate: moment(e._id.getTimestamp()) as Date,\n                sentTick: e.tick\n            }\n        });\n    }\n\n};\n"],
  "mappings": "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",
  "names": ["ValidationError"]
}
