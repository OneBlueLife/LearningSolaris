{
  "version": 3,
  "sources": ["../../../server/services/resource.ts"],
  "sourcesContent": ["import { Game, GameResourceDistribution } from \"./types/Game\";\nimport { Location } from \"./types/Location\";\nimport { NaturalResources } from \"./types/Star\";\nimport DistanceService from \"./distance\";\nimport GameTypeService from \"./gameType\";\nimport RandomService from \"./random\";\nimport StarDistanceService from \"./starDistance\";\n\nexport default class ResourceService {\n    randomService: RandomService;\n    distanceService: DistanceService;\n    starDistanceService: StarDistanceService;\n    gameTypeService: GameTypeService;\n\n    constructor(\n        randomService: RandomService,\n        distanceService: DistanceService,\n        starDistanceService: StarDistanceService,\n        gameTypeService: GameTypeService\n    ) {\n        this.randomService = randomService;\n        this.distanceService = distanceService;\n        this.starDistanceService = starDistanceService;\n        this.gameTypeService = gameTypeService;\n    }\n\n    distribute(game: Game, locations: Location[], resourceDistribution: GameResourceDistribution) {\n        // Note: Always distribute randomly for doughnut and irregular regardless of setting.\n        const forcedRandom = ['doughnut', 'irregular'].includes(game.settings.galaxy.galaxyType);\n\n        if (resourceDistribution !== 'random' && !forcedRandom) {\n            return this._distributeWeightedCenter(game, locations);\n        }\n\n        // In all other cases, random.\n        return this._distributeRandom(game, locations);\n    }\n\n    _distributeRandom(game: Game, locations: Location[]) {\n        // Allocate random resources.\n        let minResources = game.constants.star.resources.minNaturalResources;\n        let maxResources = game.constants.star.resources.maxNaturalResources;\n\n        if (game.settings.galaxy.galaxyType === 'circular-balanced') {\n            this._distributeRandomMirrored(game, locations, minResources, maxResources);\n        } else {\n            this._distributeRandomAny(game, locations, minResources, maxResources);\n        }\n    }\n\n    _distributeRandomMirrored(game: Game, locations: Location[], minResources: number, maxResources: number) {\n        let playerCount = game.settings.general.playerLimit;\n        const splitRes = this.gameTypeService.isSplitResources(game);\n\n        for (let i = 0; i < locations.length / playerCount; i++) {\n            let resources = this._setResources(minResources, maxResources, splitRes);\n\n            for (let j = 0; j < playerCount; j++) {\n                (locations[i*playerCount+j] as any).resources = resources;\n            }\n        }\n    }\n\n    _distributeRandomAny(game: Game, locations: Location[], minResources: number, maxResources: number) {\n        const splitRes = this.gameTypeService.isSplitResources(game);\n\n        for (let location of locations) {\n            (location as any).resources = this._setResources(minResources, maxResources, splitRes);\n        }\n    }\n\n    _distributeWeightedCenter(game: Game, locations: Location[]) {\n        // The closer to the center of the galaxy, the more likely (exponentially) to find stars with higher resources.\n        let minResources = game.constants.star.resources.minNaturalResources;\n        let maxResources = game.constants.star.resources.maxNaturalResources;\n        let galaxyRadius = this.starDistanceService.getMaxGalaxyDiameter(locations) / 2;\n        let galacticCenter = { x: 0, y: 0 };\n\n        if (game.settings.galaxy.galaxyType == 'circular-balanced') {\n            this._distributeWeightedCenterMirrored(game, locations, minResources, maxResources, galaxyRadius, galacticCenter);\n        } else {\n            this._distributeWeightedCenterAny(game, locations, minResources, maxResources, galaxyRadius, galacticCenter);\n        }\n    }\n\n    _distributeWeightedCenterMirrored(game: Game, locations: Location[], minResources: number, maxResources: number, galaxyRadius: number, galacticCenter: Location) {\n        let playerCount = game.settings.general.playerLimit;\n        const splitRes = this.gameTypeService.isSplitResources(game);\n        \n        for (let i = 0; i < locations.length / playerCount; i++) {\n            let radius = this.distanceService.getDistanceBetweenLocations(galacticCenter, locations[i*playerCount]);\n\n            // The * 0.6 + 0.2 in the function prevents values like 0 or 1, in which case randomisation is gone, and the outcome can only be a min or a max value\n            // If you want the differences to be more extreme you can increase the 0.6 and decrease the 0.2 notice how: 1 - 0.6 = 2 * 0.2, keep that relation intact.\n            // So for example a good tweak to make the center even stronger and the edges weaker would be to pick * 0.8 + 0.1, and notice again how 1 - 0.8 = 2 * 0.1\n            let resources = this._setResources(minResources, maxResources, splitRes, radius/galaxyRadius * 0.6 + 0.2);\n\n            for (let j = 0; j < playerCount; j++) {\n                (locations[i*playerCount + j] as any).resources = resources;\n            }\n        }\n    }\n\n    _distributeWeightedCenterAny(game: Game, locations: Location[], minResources: number, maxResources: number, galaxyRadius: number, galacticCenter: Location) {\n        const splitRes = this.gameTypeService.isSplitResources(game);\n\n        for (let location of locations) {\n            let radius = this.distanceService.getDistanceBetweenLocations(galacticCenter, location);\n            \n            // The * 0.6 + 0.2 in the function prevents values like 0 or 1, in which case randomisation is gone, and the outcome can only be a min or a max value\n            // If you want the differences to be more extreme you can increase the 0.6 and decrease the 0.2 notice how: 1 - 0.6 = 2 * 0.2, keep that relation intact.\n            // So for example a good tweak to make the center even stronger and the edges weaker would be to pick * 0.8 + 0.1, and notice again how 1 - 0.8 = 2 * 0.1 \n            (location as any).resources = this._setResources(minResources, maxResources, splitRes, radius/galaxyRadius * 0.6 + 0.2);\n        }\n    }\n\n    _setResources(minResources: number, maxResources: number, isSplitResources: boolean, EXP: number = 0.5): NaturalResources {\n        if (isSplitResources) {\n            return {\n                economy: this.randomService.getRandomNumberBetweenEXP(minResources, maxResources, EXP),\n                industry: this.randomService.getRandomNumberBetweenEXP(minResources, maxResources, EXP),\n                science: this.randomService.getRandomNumberBetweenEXP(minResources, maxResources, EXP)\n            };\n        }\n\n        let resources = this.randomService.getRandomNumberBetweenEXP(minResources, maxResources, EXP);\n\n        return {\n            economy: resources,\n            industry: resources,\n            science: resources\n        };\n    }\n}"],
  "mappings": "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",
  "names": []
}
