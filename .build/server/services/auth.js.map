{
  "version": 3,
  "sources": ["../../../server/services/auth.ts"],
  "sourcesContent": ["import EventEmitter from 'events';\nimport ValidationError from '../errors/validation';\nimport Repository from './repository';\nimport { User } from './types/User';\nimport PasswordService from './password';\n\nexport default class AuthService extends EventEmitter {\n    userRepo: Repository<User>;\n    passwordService: PasswordService;\n    \n    constructor(\n        userRepo: Repository<User>,\n        passwordService: PasswordService\n    ) {\n        super();\n\n        this.userRepo = userRepo;\n        this.passwordService = passwordService;\n    }\n\n    async login(email: string, password: string) {\n        email = email.trim();\n        email = email.toLowerCase();\n\n        // Try to find the user by email\n        let user = await this.userRepo.findOne({\n            email\n        }, {\n            username: 1,\n            password: 1,\n            banned: 1,\n            roles: 1,\n            credits: 1\n        });\n        \n        if (!user) {\n            throw new ValidationError('The email address or password is incorrect.');\n        }\n\n        if (user.banned) {\n            throw new ValidationError('The account has been banned.');\n        }\n\n        if (user.password == null) {\n            return user;\n        }\n\n        // Compare the passwords and if they match then the user is authenticated.\n        let result = await this.passwordService.compare(password, user.password);\n\n        if (result) {\n            return user;\n        } else {\n            throw new ValidationError('The email address or password is incorrect.');\n        }\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAyB;AACzB,wBAA4B;AAK5B,MAAO,oBAAkC,cAAAA,QAAa;AAAA,EAIlD,YACI,UACA,iBACF;AACE,UAAM;AAEN,SAAK,WAAW;AAChB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EAEA,MAAM,MAAM,OAAe,UAAkB;AACzC,YAAQ,MAAM,KAAK;AACnB,YAAQ,MAAM,YAAY;AAG1B,QAAI,OAAO,MAAM,KAAK,SAAS,QAAQ;AAAA,MACnC;AAAA,IACJ,GAAG;AAAA,MACC,UAAU;AAAA,MACV,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,SAAS;AAAA,IACb,CAAC;AAED,QAAI,CAAC,MAAM;AACP,YAAM,IAAI,kBAAAC,QAAgB,6CAA6C;AAAA,IAC3E;AAEA,QAAI,KAAK,QAAQ;AACb,YAAM,IAAI,kBAAAA,QAAgB,8BAA8B;AAAA,IAC5D;AAEA,QAAI,KAAK,YAAY,MAAM;AACvB,aAAO;AAAA,IACX;AAGA,QAAI,SAAS,MAAM,KAAK,gBAAgB,QAAQ,UAAU,KAAK,QAAQ;AAEvE,QAAI,QAAQ;AACR,aAAO;AAAA,IACX,OAAO;AACH,YAAM,IAAI,kBAAAA,QAAgB,6CAA6C;AAAA,IAC3E;AAAA,EACJ;AACJ;",
  "names": ["EventEmitter", "ValidationError"]
}
