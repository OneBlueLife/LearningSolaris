{
  "version": 3,
  "sources": ["../../../server/services/admin.ts"],
  "sourcesContent": ["import { DBObjectId } from './types/DBObjectId';\nimport Repository from './repository';\nimport { Game } from './types/Game';\nimport { User } from './types/User';\n\nconst moment = require('moment');\n\nexport default class AdminService {\n    \n    userRepo: Repository<User>;\n    gameRepo: Repository<Game>;\n\n    constructor(\n        userRepo: Repository<User>, \n        gameRepo: Repository<Game>\n    ) {\n        this.userRepo = userRepo;\n        this.gameRepo = gameRepo;\n    }\n\n    async listUsers(isAdmin: boolean, limit: number) {\n        let select = isAdmin ? {\n            username: 1,\n            email: 1,\n            credits: 1,\n            banned: 1,\n            roles: 1,\n            emailEnabled: 1,\n            lastSeen: 1,\n            lastSeenIP: 1,\n            isEstablishedPlayer: 1\n        } : {\n            username: 1,\n            isEstablishedPlayer: 1\n        };\n\n        return await this.userRepo.find({\n            // All users\n        }, \n        select, {\n            lastSeen: -1\n        }, limit);\n    }\n\n    async listPasswordResets() {\n        return await this.userRepo.find({\n            resetPasswordToken: { $ne: null }\n        }, {\n            username: 1,\n            email: 1,\n            resetPasswordToken: 1\n        }, {\n            lastSeen: -1\n        });\n    }\n\n    async listGames(limit: number) {\n        return await this.gameRepo.find({\n            'settings.general.type': { $ne: 'tutorial' } // Non tutorial games\n        }, {\n            'settings.general': 1,\n            'state': 1\n        }, {\n            _id: -1\n        },\n        limit);\n    }\n\n    async setRoleContributor(userId: DBObjectId, enabled: boolean = true) {\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            'roles.contributor': enabled\n        });\n    }\n\n    async setRoleDeveloper(userId: DBObjectId, enabled: boolean = true) {\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            'roles.developer': enabled\n        });\n    }\n\n    async setRoleCommunityManager(userId: DBObjectId, enabled: boolean = true) {\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            'roles.communityManager': enabled\n        });\n    }\n\n    async setRoleGameMaster(userId: DBObjectId, enabled: boolean = true) {\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            'roles.gameMaster': enabled\n        });\n    }\n\n    async ban(userId: DBObjectId) {\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            'banned': true\n        });\n    }\n\n    async unban(userId: DBObjectId) {\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            'banned': false\n        });\n    }\n\n    async resetAchievements(userId: DBObjectId) {\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            'achievements.victories': 0,\n            'achievements.victories1v1': 0,\n            'achievements.level': 0,\n            'achievements.rank': 0,\n            'achievements.eloRating': null,\n            'achievements.renown': 0,\n            'achievements.joined': 0,\n            'achievements.completed': 0,\n            'achievements.quit': 0,\n            'achievements.defeated': 0,\n            'achievements.defeated1v1': 0,\n            'achievements.afk': 0,\n            'achievements.combat.kills.ships': 0,\n            'achievements.combat.kills.carriers': 0,\n            'achievements.combat.kills.specialists': 0,\n            'achievements.combat.losses.ships': 0,\n            'achievements.combat.losses.carriers': 0,\n            'achievements.combat.losses.specialists': 0,\n            'achievements.combat.stars.captured': 0,\n            'achievements.combat.stars.lost': 0,\n            'achievements.combat.homeStars.captured': 0,\n            'achievements.combat.homeStars.lost': 0,\n            'achievements.infrastructure.economy': 0,\n            'achievements.infrastructure.industry': 0,\n            'achievements.infrastructure.science': 0,\n            'achievements.infrastructure.warpGates': 0,\n            'achievements.infrastructure.warpGatesDestroyed': 0,\n            'achievements.infrastructure.carriers': 0,\n            'achievements.infrastructure.specialistsHired': 0,\n            'achievements.research.scanning': 0,\n            'achievements.research.hyperspace': 0,\n            'achievements.research.terraforming': 0,\n            'achievements.research.experimentation': 0,\n            'achievements.research.weapons': 0,\n            'achievements.research.banking': 0,\n            'achievements.research.manufacturing': 0,\n            'achievements.research.specialists': 0,\n            'achievements.trade.creditsSent': 0,\n            'achievements.trade.creditsReceived': 0,\n            'achievements.trade.creditsSpecialistsSent': 0,\n            'achievements.trade.creditsSpecialistsReceived': 0,\n            'achievements.trade.technologySent': 0,\n            'achievements.trade.technologyReceived': 0,\n            'achievements.trade.giftsSent': 0,\n            'achievements.trade.giftsReceived': 0,\n            'achievements.trade.renownSent': 0\n        });\n    }\n\n    async promoteToEstablishedPlayer(userId: DBObjectId) {\n        await this.userRepo.updateOne({\n            _id: userId\n        }, {\n            $set: {\n                isEstablishedPlayer: true\n            }\n        });\n    }\n\n    async setGameFeatured(gameId: DBObjectId, featured: boolean) {\n        await this.gameRepo.updateOne({\n            _id: gameId\n        }, {\n            'settings.general.featured': featured\n        });\n    }\n\n    async setGameTimeMachine(gameId: DBObjectId, enabled: string) {\n        await this.gameRepo.updateOne({\n            _id: gameId\n        }, {\n            'settings.general.timeMachine': enabled\n        });\n    }\n\n    async getInsights() {\n        const oneDayAgo = moment().utc().add(-1, 'days').toDate();\n        const twoDaysAgo = moment().utc().add(-2, 'days').toDate();\n        const oneWeekAgo = moment().utc().add(-7, 'days').toDate();\n        const twoWeeksAgo = moment().utc().add(-14, 'days').toDate();\n\n        const oneDayAgoId = this.userRepo.objectIdFromDate(oneDayAgo);\n        const twoDaysAgoId = this.userRepo.objectIdFromDate(twoDaysAgo);\n        const oneWeekAgoId = this.userRepo.objectIdFromDate(oneWeekAgo);\n        const twoWeeksAgoId = this.userRepo.objectIdFromDate(twoWeeksAgo);\n\n        // Registrations\n        const registrations1d = await this.userRepo.count({\n            _id: { $gt: oneDayAgoId }\n        });\n\n        const registrations2d = await this.userRepo.count({\n            _id: { $gt: twoDaysAgoId }\n        });\n\n        const registrations7d = await this.userRepo.count({\n            _id: { $gt: oneWeekAgoId }\n        });\n\n        const registrations14d = await this.userRepo.count({\n            _id: { $gt: twoWeeksAgoId }\n        });\n\n        // Last seen\n        const lastSeen1d = await this.userRepo.count({\n            lastSeen: { $gt: oneDayAgo }\n        });\n\n        const lastSeen2d = await this.userRepo.count({\n            lastSeen: { $gt: twoDaysAgo }\n        });\n\n        const lastSeen7d = await this.userRepo.count({\n            lastSeen: { $gt: oneWeekAgo }\n        });\n\n        const lastSeen14d = await this.userRepo.count({\n            lastSeen: { $gt: twoWeeksAgo }\n        });\n\n        // TODO: AFKs\n        // TODO: Joins\n        // TODO: Quits\n        // TODO: Games started\n        // TODO: Games ended\n        // TODO: Badges purchased\n        // TODO: Credits purchased\n        // TODO: Tutorials started\n        // TODO: Tutorials finished\n\n        return [\n            {\n                name: 'Registrations',\n                d1: registrations1d,\n                d2: registrations2d,\n                d7: registrations7d,\n                d14: registrations14d\n            },\n            {\n                name: 'Last Seen',\n                d1: lastSeen1d,\n                d2: lastSeen2d,\n                d7: lastSeen7d,\n                d14: lastSeen14d\n            }\n        ];\n    }\n};\n"],
  "mappings": "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",
  "names": []
}
