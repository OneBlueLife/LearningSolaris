{
  "version": 3,
  "sources": ["../../../../server/services/maps/custom.ts"],
  "sourcesContent": ["import { Location } from \"../types/Location\";\n\nconst mongoose = require('mongoose');\nimport ValidationError from \"../../errors/validation\";\n\nexport default class CustomMapService {\n    generateLocations(customJSON: string, playerLimit: number): Location[] {\n        let json;\n\n        try {\n          json = JSON.parse(customJSON)\n        }\n        catch (e) {\n          throw new ValidationError('The custom map JSON is malformed.')\n        }\n\n        const locations: any[] = [];\n        let playerIds: number[] = [];\n        //const nameList = new Set()\n        const homeStars: any[] = [];\n\n        for (const star of json.stars) {\n          // Fill in optional setting values.\n          star.id = star.id == null ? null : +star.id;\n          star.homeStar = star.homeStar == null ? false : star.homeStar;\n          star.playerId = star.playerId == null ? null : +star.playerId;\n          star.warpGate = star.warpGate == null ? false : star.warpGate;\n          star.isNebula = star.isNebula == null ? false : star.isNebula;\n          star.isAsteroidField = star.isAsteroidField == null ? false : star.isAsteroidField;\n          star.isBinaryStar = star.isBinaryStar == null ? false : star.isBinaryStar;\n          star.isBlackHole = star.isBlackHole == null ? false : star.isBlackHole;\n          star.isPulsar = star.isPulsar == null ? false : star.isPulsar;\n          star.wormHoleToStarId = star.wormHoleToStarId == null ? null : +star.wormHoleToStarId;\n          star.specialistId = star.specialistId == null ? null : +star.specialistId;\n\n          // Dont trust the user as far as you can throw him.\n          this._checkStarProperty(star, 'id', 'number', false);\n          this._checkStarProperty(star, 'playerId', 'number', true);\n          this._checkStarProperty(star?.location, 'x', 'number', false);\n          this._checkStarProperty(star?.location, 'y', 'number', false);\n          this._checkStarProperty(star?.naturalResources, 'economy', 'number', false);\n          this._checkStarProperty(star?.naturalResources, 'industry', 'number', false);\n          this._checkStarProperty(star?.naturalResources, 'science', 'number', false);\n          this._checkStarProperty(star, 'warpGate', 'boolean', true);\n          this._checkStarProperty(star, 'isNebula', 'boolean', true);\n          this._checkStarProperty(star, 'isAsteroidField', 'boolean', true);\n          this._checkStarProperty(star, 'isBinaryStar', 'boolean', true);\n          this._checkStarProperty(star, 'isBlackHole', 'boolean', true);\n          this._checkStarProperty(star, 'isPulsar', 'boolean', true);\n          this._checkStarProperty(star, 'wormHoleToStarId', 'number', true);\n          this._checkStarProperty(star, 'homeStar', 'boolean', true);\n          this._checkStarProperty(star, 'specialistId', 'number', true);\n          // this._checkStarProperty(star, 'ships', 'number');\n\n          let mappedStar = {\n            id: star.id,\n            homeStar: star.homeStar,\n            playerId: star.playerId,\n            linkedLocations: [],\n            warpGate: star.warpGate,\n            isNebula: star.isNebula,\n            isAsteroidField: star.isAsteroidField,\n            isBinaryStar: star.isBinaryStar,\n            isBlackHole: star.isBlackHole,\n            isPulsar: star.isPulsar,\n            wormHoleToStarId: star.wormHoleToStarId,\n            specialistId: star.specialistId,\n            location: {\n              x: star.location.x,\n              y: star.location.y\n            },\n            naturalResources: {\n              economy: star.naturalResources.economy,\n              industry: star.naturalResources.industry,\n              science: star.naturalResources.science\n            }\n          };\n\n          if (star?.homeStar) {\n            homeStars.push(mappedStar);\n\n            if (mappedStar.playerId != null) { \n              playerIds.push(mappedStar.playerId);\n            }\n          }\n\n          locations.push(mappedStar);\n        }\n\n        playerIds = [...new Set(playerIds)]; // ignore repeated player indexes\n\n        if (homeStars.length !== playerLimit) {\n          throw new ValidationError(`Must have ${playerLimit} capital stars in the custom map.`);\n        }\n\n        if (homeStars.length === playerIds.length) {\n          this._linkStars(homeStars, locations);\n        } else if (playerIds.length !== 0) {\n          throw new ValidationError('Unequal amount of home stars and players, or repeated player IDs');\n        } // its fine to have all stars without players, in this case the other parts of game generation will asign players and initial stars\n\n        // Populate actual IDs for all stars\n        for (let loc of locations) {\n          loc._id = mongoose.Types.ObjectId();\n        }\n\n        // Populate worm hole IDs of stars\n        for (let loc of locations.filter(l => l.wormHoleToStarId != null)) {\n          loc.wormHoleToStarId = locations.find(l => l.id === loc.wormHoleToStarId)?._id;\n\n          if (!loc.wormHoleToStarId || loc.wormHoleToStarId.toString() === loc._id.toString()) {\n            throw new ValidationError(`Worm hole to star id is invalid for ${JSON.stringify(loc)}`);\n          }\n        }\n\n        return locations;\n    }\n\n    _checkStarProperty(star, property: string, type: string, allowNull: boolean): boolean {\n        if (star === undefined) throw new ValidationError(`Missing property of star ${star}`);\n        if (star?.[property] === undefined) throw new ValidationError(`Missing property ${property} of star ${JSON.stringify(star)}`);\n\n        if (allowNull && star[property] === null) {\n          return true;\n        }\n\n        if (typeof star[property] !== type) throw new ValidationError(`Invalid type property ${property} of star ${JSON.stringify(star)}`);\n\n        return true;\n    }\n\n     /*link owned stars to their home stars so at a latter stage players will claim the correct stars*/\n    _linkStars(homeStars, stars) {\n      let commonStars = stars.filter(star => !star.homeStar);\n\n      for (let homeStar of homeStars) {\n        homeStar.linkedLocations = [];\n\n        for (let commonStar of commonStars) {\n          if (commonStar.playerId === homeStar.playerId) {\n            homeStar.linkedLocations.push(commonStar);\n            commonStar.linked = true;\n          }\n        }\n      }\n    }\n}\n"],
  "mappings": "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",
  "names": ["ValidationError"]
}
