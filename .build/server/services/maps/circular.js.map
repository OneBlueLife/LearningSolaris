{
  "version": 3,
  "sources": ["../../../../server/services/maps/circular.ts"],
  "sourcesContent": ["import { GameResourceDistribution } from \"../types/Game\";\nimport { Location } from \"../types/Location\";\nimport DistanceService from \"../distance\";\nimport GameTypeService from \"../gameType\";\nimport RandomService from \"../random\";\nimport ResourceService from \"../resource\";\nimport StarService from \"../star\";\nimport StarDistanceService from \"../starDistance\";\n\nexport default class CircularMapService {\n\n    randomService: RandomService;\n    starService: StarService;\n    starDistanceService: StarDistanceService;\n    distanceService: DistanceService;\n    resourceService: ResourceService;\n    gameTypeService: GameTypeService;\n\n    constructor(\n        randomService: RandomService,\n        starService: StarService,\n        starDistanceService: StarDistanceService,\n        distanceService: DistanceService,\n        resourceService: ResourceService,\n        gameTypeService: GameTypeService) {\n        this.randomService = randomService;\n        this.starService = starService;\n        this.starDistanceService = starDistanceService;\n        this.distanceService = distanceService;\n        this.resourceService = resourceService;\n        this.gameTypeService = gameTypeService;\n    }\n\n    generateLocations(game, starCount: number, resourceDistribution: GameResourceDistribution): Location[] {\n        // These two values should probably be ingame constants but they can for now just be plugged in here\n        const starDensity = 1.3 * 10**-4\n        const offset = 0.5\n        // There are a few options to tweak the offset:\n        // 0.5- --> now the outerranges will contain more stars than the inner ones || 0.5 --> roughly the entire map has the same star density\n        // 0.5-1 --> now the inner ranges will get more stars than the outer || 1 --> now at each distance from the center there will be roughly the same amount of stars\n        // 1+ --> there will be an extremely increasing amount of stars in the middle with an increasingly low amount of stars in the outerranges \n        const maxRadius = (starCount/(Math.PI*starDensity))**0.5;\n        const locations: Location[] = [];\n\n        if (this.gameTypeService.isKingOfTheHillMode(game)) {\n            locations.push(this.starDistanceService.getGalacticCenter());\n        }\n\n        do {\n            // Try to find the star location X\n            while (true) {\n                let location = this.randomService.getRandomPositionInCircle(maxRadius, offset);\n\n                // Stars must not be too close to eachother.\n                if (!this.isLocationTooCloseToOthers(game, location, locations)) {\n                    locations.push(location)\n                    break;\n                }\n            }\n        } while (locations.length < starCount)\n\n        this.resourceService.distribute(game, locations, resourceDistribution);\n\n        return locations;\n    }\n\n    isLocationTooCloseToOthers(game, location: Location, locations: Location[]): boolean {\n        // Return False if there are no stars in range, True if there is a star in range\n        return locations.find(l => this.starDistanceService.isLocationTooClose(game, location, l)) != null;\n    }\n\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,MAAO,mBAAiC;AAAA,EASpC,YACI,eACA,aACA,qBACA,iBACA,iBACA,iBAAkC;AAClC,SAAK,gBAAgB;AACrB,SAAK,cAAc;AACnB,SAAK,sBAAsB;AAC3B,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EAEA,kBAAkB,MAAM,WAAmB,sBAA4D;AAEnG,UAAM,cAAc,MAAM,MAAI;AAC9B,UAAM,SAAS;AAKf,UAAM,aAAa,aAAW,KAAK,KAAG,iBAAe;AACrD,UAAM,YAAwB,CAAC;AAE/B,QAAI,KAAK,gBAAgB,oBAAoB,IAAI,GAAG;AAChD,gBAAU,KAAK,KAAK,oBAAoB,kBAAkB,CAAC;AAAA,IAC/D;AAEA,OAAG;AAEC,aAAO,MAAM;AACT,YAAI,WAAW,KAAK,cAAc,0BAA0B,WAAW,MAAM;AAG7E,YAAI,CAAC,KAAK,2BAA2B,MAAM,UAAU,SAAS,GAAG;AAC7D,oBAAU,KAAK,QAAQ;AACvB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,SAAS,UAAU,SAAS;AAE5B,SAAK,gBAAgB,WAAW,MAAM,WAAW,oBAAoB;AAErE,WAAO;AAAA,EACX;AAAA,EAEA,2BAA2B,MAAM,UAAoB,WAAgC;AAEjF,WAAO,UAAU,KAAK,OAAK,KAAK,oBAAoB,mBAAmB,MAAM,UAAU,CAAC,CAAC,KAAK;AAAA,EAClG;AAEJ;AAAC;",
  "names": []
}
