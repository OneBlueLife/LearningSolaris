{
  "version": 3,
  "sources": ["../../../server/services/technology.ts"],
  "sourcesContent": ["import { Carrier } from \"./types/Carrier\";\nimport { Game } from \"./types/Game\";\nimport { Player, PlayerTechnologyLevels, ResearchTypeNotRandom } from \"./types/Player\";\nimport { Star } from \"./types/Star\";\nimport SpecialistService from \"./specialist\";\n\nexport default class TechnologyService {\n    specialistService: SpecialistService;\n\n    constructor(\n        specialistService: SpecialistService\n    ) {\n        this.specialistService = specialistService;\n    }\n\n    getEnabledTechnologies(game: Game) {\n        let techs: ResearchTypeNotRandom[] = Object.keys(game.settings.technology.researchCosts).filter(k => {\n            return k.match(/^[^_\\$]/) != null;\n        }) as ResearchTypeNotRandom[];\n\n        return techs.filter(t => this.isTechnologyEnabled(game, t));\n    }\n\n    isTechnologyEnabled(game: Game, techKey: ResearchTypeNotRandom) {\n        return game.settings.technology.startingTechnologyLevel[techKey] > 0;\n    }\n\n    isTechnologyResearchable(game: Game, technologyKey: ResearchTypeNotRandom) {\n      return game.settings.technology.researchCosts[technologyKey] !== 'none'\n    }\n\n    _applyTechModifiers(techs: PlayerTechnologyLevels, modifiers, sanitize: boolean = true) { // TODO: types\n        techs.scanning += modifiers.scanning || 0;\n        techs.hyperspace += modifiers.hyperspace || 0;\n        techs.terraforming += modifiers.terraforming || 0;\n        techs.experimentation += modifiers.experimentation || 0;\n        techs.weapons += modifiers.weapons || 0;\n        techs.banking += modifiers.banking || 0;\n        techs.manufacturing += modifiers.manufacturing || 0;\n        techs.specialists += modifiers.specialists || 0;\n        \n        if (sanitize) {\n            techs.scanning = Math.max(1, techs.scanning);\n            techs.hyperspace = Math.max(1, techs.hyperspace);\n            techs.terraforming = Math.max(1, techs.terraforming);\n            techs.experimentation = Math.max(1, techs.experimentation);\n            techs.weapons = Math.max(1, techs.weapons);\n            techs.banking = Math.max(1, techs.banking);\n            techs.manufacturing = Math.max(1, techs.manufacturing);\n            techs.specialists = Math.max(1, techs.specialists);\n        }\n\n        return techs;\n    }\n\n    getPlayerEffectiveTechnologyLevels(game: Game, player: Player | null, sanitize: boolean = true): PlayerTechnologyLevels {\n        // TODO: This is a plaster over a bug where in the gameGalaxy service\n        // it sets research to null if its in extra dark galaxy but somehow\n        // this function is still being called by getStats. Needs investigating...\n        // TODO: The player in question had 0 stars and 1 carrier, with this\n        // fix the extra dark galaxy loads but there's 1 star that doesn't have a name\n        // that gets returned in the response.\n        // TODO: It probably has something to do with scanning range, maybe it\n        // isn't checking if players have 0 stars? In which case they have no scanning range\n        // and therefore nobody is within scanning range.\n    \n        if (!player || !player.research) {\n            return {\n                scanning: 1,\n                hyperspace: 1,\n                terraforming: 1,\n                experimentation: 1,\n                weapons: 1,\n                banking: 1,\n                manufacturing: 1,\n                specialists: 1\n            };\n        }\n\n        let techs = {\n            scanning: player.research.scanning.level,\n            hyperspace: player.research.hyperspace.level,\n            terraforming: player.research.terraforming.level,\n            experimentation: player.research.experimentation.level,\n            weapons: player.research.weapons.level,\n            banking: player.research.banking.level,\n            manufacturing: player.research.manufacturing.level,\n            specialists: player.research.specialists.level\n        };\n\n        return techs;\n    }\n\n    getStarEffectiveTechnologyLevels(game: Game, star: Star, sanitize: boolean = true): PlayerTechnologyLevels {\n        let player = star.ownedByPlayerId ? game.galaxy.players.find(x => x._id.toString() === star.ownedByPlayerId!.toString()) || null : null;\n        let techs = this.getPlayerEffectiveTechnologyLevels(game, player, false);\n\n        if (star.specialistId) {\n            let specialist = this.specialistService.getByIdStar(star.specialistId);\n\n            if (specialist && specialist.modifiers.local != null) {\n                this._applyTechModifiers(techs, specialist.modifiers.local, sanitize);\n            }\n        }\n\n        if (star.isBlackHole) {\n            techs.scanning += 3;\n        }\n\n        return techs;\n    }\n\n    getCarrierEffectiveTechnologyLevels(game: Game, carrier: Carrier, sanitize: boolean = true) {\n        let player = game.galaxy.players.find(x => x._id.toString() === carrier.ownedByPlayerId!.toString()) || null;\n        let techs = this.getPlayerEffectiveTechnologyLevels(game, player, false);\n\n        // Apply any specialist tech modifiers.\n        if (carrier.specialistId) {\n            let specialist = this.specialistService.getByIdCarrier(carrier.specialistId);\n\n            if (specialist && specialist.modifiers.local != null) {\n                this._applyTechModifiers(techs, specialist.modifiers.local, sanitize);\n            }\n        }\n\n        return techs;\n    }\n\n    getStarWeaponsBuff(star: Star) {\n        if (star.specialistId) {\n            let specialist = this.specialistService.getByIdStar(star.specialistId);\n\n            if (specialist && specialist.modifiers.local != null) {\n                return specialist.modifiers.local.weapons || 0;\n            }\n        }\n\n        return 0;\n    }\n\n    getCarrierWeaponsBuff(carrier: Carrier, isCarrierToStarCombat: boolean, isAttacker: boolean, allyCount: number) {\n        const buffs: number[] = [];\n\n        if (carrier.specialistId) {\n            let specialist = this.specialistService.getByIdCarrier(carrier.specialistId);\n\n            if (!specialist) {\n                return 0;\n            }\n            \n            if (specialist.modifiers.local) {\n                if (isCarrierToStarCombat && specialist.modifiers.local.carrierToStarCombat) {\n                    if (isAttacker && specialist.modifiers.local.carrierToStarCombat.attacker?.weapons) {\n                        buffs.push(specialist.modifiers.local.carrierToStarCombat.attacker.weapons);\n                    }\n\n                    if (!isAttacker && specialist.modifiers.local.carrierToStarCombat.defender?.weapons) {\n                        buffs.push(specialist.modifiers.local.carrierToStarCombat.defender.weapons);\n                    }\n\n                    if (isAttacker && specialist.modifiers.local.carrierToStarCombat.attacker?.weaponsPerAlly) {\n                        buffs.push(specialist.modifiers.local.carrierToStarCombat.attacker.weaponsPerAlly * allyCount);\n                    }\n                }\n\n                if (!isCarrierToStarCombat && specialist.modifiers.local.carrierToCarrierCombat?.weapons) {\n                    buffs.push(specialist.modifiers.local.carrierToCarrierCombat.weapons);\n                }\n                \n                if (specialist.modifiers.local.weapons) {\n                    buffs.push(specialist.modifiers.local.weapons);\n                }\n            }\n        }\n\n        if (!buffs.length) {\n            return 0;\n        }\n\n        return buffs.sort((a, b) => b - a)[0];\n    }\n\n    getCarriersWeaponsDebuff(carriersToCheck: Carrier[]) {\n        let deduction = 0;\n        \n        if (!carriersToCheck.length) {\n            return 0;\n        }\n        \n        // If any of the carriers have a specialist which deducts enemy weapons\n        // then find the one that has the highest deduction.\n        deduction = carriersToCheck\n            .filter(c => c.specialistId != null)\n            .map(c => {\n                let specialist = this.specialistService.getByIdCarrier(c.specialistId!);\n\n                if (specialist && specialist.modifiers.special && specialist.modifiers.special.deductEnemyWeapons) {\n                    return specialist.modifiers.special.deductEnemyWeapons;\n                }\n\n                return 0;\n            })\n            .sort((a, b) => b - a)[0];\n\n        return deduction || 0;\n    }\n\n    getStarEffectiveWeaponsLevel(game: Game, defenders: Player[], star: Star, carriersInOrbit: Carrier[]) {\n        let weapons = defenders.sort((a, b) => b.research.weapons.level - a.research.weapons.level)[0].research.weapons.level;\n        let defenderBonus = this.getDefenderBonus(game, star);\n\n        let buffs: number[] = [];\n\n        if (carriersInOrbit.length) {\n            buffs = carriersInOrbit.map(c => this.getCarrierWeaponsBuff(c, true, false, defenders.length));\n        }\n\n        buffs.push(this.getStarWeaponsBuff(star));\n\n        return this._calculateActualWeaponsBuff(weapons, buffs, defenderBonus);\n    }\n\n    getCarriersEffectiveWeaponsLevel(game: Game, players: Player[], carriers: Carrier[], isCarrierToStarCombat: boolean, isAttacker: boolean) {\n        let weapons = players.sort((a, b) => b.research.weapons.level - a.research.weapons.level)[0].research.weapons.level;\n\n        if (!carriers.length) {\n            return weapons;\n        }\n\n        let buffs = carriers.map(c => this.getCarrierWeaponsBuff(c, isCarrierToStarCombat, isAttacker, players.length));\n\n        return this._calculateActualWeaponsBuff(weapons, buffs, 0);\n    }\n\n    _calculateActualWeaponsBuff(weapons: number, buffs: number[], additionalBuff: number) {\n        let buff = Math.max(0, buffs.sort((a, b) => b - a)[0]);\n        let debuff = buffs.sort((a, b) => a - b)[0];\n\n        let actualBuff = debuff < 0 ? debuff + buff : buff;\n\n        return Math.max(1, weapons + actualBuff + additionalBuff);\n    }   \n\n    getDefenderBonus(game: Game, star: Star) {\n        let bonus = game.settings.specialGalaxy.defenderBonus === 'enabled' ? 1 : 0;\n\n        if (star.isAsteroidField) {\n            bonus++;\n        }\n\n        if (star.specialistId) {\n            let specialist = this.specialistService.getByIdStar(star.specialistId);\n\n            if (specialist && specialist.modifiers.special?.defenderBonus) {\n                bonus += specialist.modifiers.special.defenderBonus;\n            }\n        }\n\n        if (star.homeStar) {\n            bonus *= game.constants.star.homeStarDefenderBonusMultiplier;\n        }\n\n        return bonus;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,MAAO,kBAAgC;AAAA,EAGnC,YACI,mBACF;AACE,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EAEA,uBAAuB,MAAY;AAC/B,QAAI,QAAiC,OAAO,KAAK,KAAK,SAAS,WAAW,aAAa,EAAE,OAAO,OAAK;AACjG,aAAO,EAAE,MAAM,SAAS,KAAK;AAAA,IACjC,CAAC;AAED,WAAO,MAAM,OAAO,OAAK,KAAK,oBAAoB,MAAM,CAAC,CAAC;AAAA,EAC9D;AAAA,EAEA,oBAAoB,MAAY,SAAgC;AAC5D,WAAO,KAAK,SAAS,WAAW,wBAAwB,WAAW;AAAA,EACvE;AAAA,EAEA,yBAAyB,MAAY,eAAsC;AACzE,WAAO,KAAK,SAAS,WAAW,cAAc,mBAAmB;AAAA,EACnE;AAAA,EAEA,oBAAoB,OAA+B,WAAW,WAAoB,MAAM;AACpF,UAAM,YAAY,UAAU,YAAY;AACxC,UAAM,cAAc,UAAU,cAAc;AAC5C,UAAM,gBAAgB,UAAU,gBAAgB;AAChD,UAAM,mBAAmB,UAAU,mBAAmB;AACtD,UAAM,WAAW,UAAU,WAAW;AACtC,UAAM,WAAW,UAAU,WAAW;AACtC,UAAM,iBAAiB,UAAU,iBAAiB;AAClD,UAAM,eAAe,UAAU,eAAe;AAE9C,QAAI,UAAU;AACV,YAAM,WAAW,KAAK,IAAI,GAAG,MAAM,QAAQ;AAC3C,YAAM,aAAa,KAAK,IAAI,GAAG,MAAM,UAAU;AAC/C,YAAM,eAAe,KAAK,IAAI,GAAG,MAAM,YAAY;AACnD,YAAM,kBAAkB,KAAK,IAAI,GAAG,MAAM,eAAe;AACzD,YAAM,UAAU,KAAK,IAAI,GAAG,MAAM,OAAO;AACzC,YAAM,UAAU,KAAK,IAAI,GAAG,MAAM,OAAO;AACzC,YAAM,gBAAgB,KAAK,IAAI,GAAG,MAAM,aAAa;AACrD,YAAM,cAAc,KAAK,IAAI,GAAG,MAAM,WAAW;AAAA,IACrD;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,mCAAmC,MAAY,QAAuB,WAAoB,MAA8B;AAWpH,QAAI,CAAC,UAAU,CAAC,OAAO,UAAU;AAC7B,aAAO;AAAA,QACH,UAAU;AAAA,QACV,YAAY;AAAA,QACZ,cAAc;AAAA,QACd,iBAAiB;AAAA,QACjB,SAAS;AAAA,QACT,SAAS;AAAA,QACT,eAAe;AAAA,QACf,aAAa;AAAA,MACjB;AAAA,IACJ;AAEA,QAAI,QAAQ;AAAA,MACR,UAAU,OAAO,SAAS,SAAS;AAAA,MACnC,YAAY,OAAO,SAAS,WAAW;AAAA,MACvC,cAAc,OAAO,SAAS,aAAa;AAAA,MAC3C,iBAAiB,OAAO,SAAS,gBAAgB;AAAA,MACjD,SAAS,OAAO,SAAS,QAAQ;AAAA,MACjC,SAAS,OAAO,SAAS,QAAQ;AAAA,MACjC,eAAe,OAAO,SAAS,cAAc;AAAA,MAC7C,aAAa,OAAO,SAAS,YAAY;AAAA,IAC7C;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,iCAAiC,MAAY,MAAY,WAAoB,MAA8B;AACvG,QAAI,SAAS,KAAK,kBAAkB,KAAK,OAAO,QAAQ,KAAK,OAAK,EAAE,IAAI,SAAS,MAAM,KAAK,gBAAiB,SAAS,CAAC,KAAK,OAAO;AACnI,QAAI,QAAQ,KAAK,mCAAmC,MAAM,QAAQ,KAAK;AAEvE,QAAI,KAAK,cAAc;AACnB,UAAI,aAAa,KAAK,kBAAkB,YAAY,KAAK,YAAY;AAErE,UAAI,cAAc,WAAW,UAAU,SAAS,MAAM;AAClD,aAAK,oBAAoB,OAAO,WAAW,UAAU,OAAO,QAAQ;AAAA,MACxE;AAAA,IACJ;AAEA,QAAI,KAAK,aAAa;AAClB,YAAM,YAAY;AAAA,IACtB;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,oCAAoC,MAAY,SAAkB,WAAoB,MAAM;AACxF,QAAI,SAAS,KAAK,OAAO,QAAQ,KAAK,OAAK,EAAE,IAAI,SAAS,MAAM,QAAQ,gBAAiB,SAAS,CAAC,KAAK;AACxG,QAAI,QAAQ,KAAK,mCAAmC,MAAM,QAAQ,KAAK;AAGvE,QAAI,QAAQ,cAAc;AACtB,UAAI,aAAa,KAAK,kBAAkB,eAAe,QAAQ,YAAY;AAE3E,UAAI,cAAc,WAAW,UAAU,SAAS,MAAM;AAClD,aAAK,oBAAoB,OAAO,WAAW,UAAU,OAAO,QAAQ;AAAA,MACxE;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,mBAAmB,MAAY;AAC3B,QAAI,KAAK,cAAc;AACnB,UAAI,aAAa,KAAK,kBAAkB,YAAY,KAAK,YAAY;AAErE,UAAI,cAAc,WAAW,UAAU,SAAS,MAAM;AAClD,eAAO,WAAW,UAAU,MAAM,WAAW;AAAA,MACjD;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,sBAAsB,SAAkB,uBAAgC,YAAqB,WAAmB;AA5IpH;AA6IQ,UAAM,QAAkB,CAAC;AAEzB,QAAI,QAAQ,cAAc;AACtB,UAAI,aAAa,KAAK,kBAAkB,eAAe,QAAQ,YAAY;AAE3E,UAAI,CAAC,YAAY;AACb,eAAO;AAAA,MACX;AAEA,UAAI,WAAW,UAAU,OAAO;AAC5B,YAAI,yBAAyB,WAAW,UAAU,MAAM,qBAAqB;AACzE,cAAI,gBAAc,gBAAW,UAAU,MAAM,oBAAoB,aAA/C,mBAAyD,UAAS;AAChF,kBAAM,KAAK,WAAW,UAAU,MAAM,oBAAoB,SAAS,OAAO;AAAA,UAC9E;AAEA,cAAI,CAAC,gBAAc,gBAAW,UAAU,MAAM,oBAAoB,aAA/C,mBAAyD,UAAS;AACjF,kBAAM,KAAK,WAAW,UAAU,MAAM,oBAAoB,SAAS,OAAO;AAAA,UAC9E;AAEA,cAAI,gBAAc,gBAAW,UAAU,MAAM,oBAAoB,aAA/C,mBAAyD,iBAAgB;AACvF,kBAAM,KAAK,WAAW,UAAU,MAAM,oBAAoB,SAAS,iBAAiB,SAAS;AAAA,UACjG;AAAA,QACJ;AAEA,YAAI,CAAC,2BAAyB,gBAAW,UAAU,MAAM,2BAA3B,mBAAmD,UAAS;AACtF,gBAAM,KAAK,WAAW,UAAU,MAAM,uBAAuB,OAAO;AAAA,QACxE;AAEA,YAAI,WAAW,UAAU,MAAM,SAAS;AACpC,gBAAM,KAAK,WAAW,UAAU,MAAM,OAAO;AAAA,QACjD;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,CAAC,MAAM,QAAQ;AACf,aAAO;AAAA,IACX;AAEA,WAAO,MAAM,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC,EAAE;AAAA,EACvC;AAAA,EAEA,yBAAyB,iBAA4B;AACjD,QAAI,YAAY;AAEhB,QAAI,CAAC,gBAAgB,QAAQ;AACzB,aAAO;AAAA,IACX;AAIA,gBAAY,gBACP,OAAO,OAAK,EAAE,gBAAgB,IAAI,EAClC,IAAI,OAAK;AACN,UAAI,aAAa,KAAK,kBAAkB,eAAe,EAAE,YAAa;AAEtE,UAAI,cAAc,WAAW,UAAU,WAAW,WAAW,UAAU,QAAQ,oBAAoB;AAC/F,eAAO,WAAW,UAAU,QAAQ;AAAA,MACxC;AAEA,aAAO;AAAA,IACX,CAAC,EACA,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC,EAAE;AAE3B,WAAO,aAAa;AAAA,EACxB;AAAA,EAEA,6BAA6B,MAAY,WAAqB,MAAY,iBAA4B;AAClG,QAAI,UAAU,UAAU,KAAK,CAAC,GAAG,MAAM,EAAE,SAAS,QAAQ,QAAQ,EAAE,SAAS,QAAQ,KAAK,EAAE,GAAG,SAAS,QAAQ;AAChH,QAAI,gBAAgB,KAAK,iBAAiB,MAAM,IAAI;AAEpD,QAAI,QAAkB,CAAC;AAEvB,QAAI,gBAAgB,QAAQ;AACxB,cAAQ,gBAAgB,IAAI,OAAK,KAAK,sBAAsB,GAAG,MAAM,OAAO,UAAU,MAAM,CAAC;AAAA,IACjG;AAEA,UAAM,KAAK,KAAK,mBAAmB,IAAI,CAAC;AAExC,WAAO,KAAK,4BAA4B,SAAS,OAAO,aAAa;AAAA,EACzE;AAAA,EAEA,iCAAiC,MAAY,SAAmB,UAAqB,uBAAgC,YAAqB;AACtI,QAAI,UAAU,QAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,SAAS,QAAQ,QAAQ,EAAE,SAAS,QAAQ,KAAK,EAAE,GAAG,SAAS,QAAQ;AAE9G,QAAI,CAAC,SAAS,QAAQ;AAClB,aAAO;AAAA,IACX;AAEA,QAAI,QAAQ,SAAS,IAAI,OAAK,KAAK,sBAAsB,GAAG,uBAAuB,YAAY,QAAQ,MAAM,CAAC;AAE9G,WAAO,KAAK,4BAA4B,SAAS,OAAO,CAAC;AAAA,EAC7D;AAAA,EAEA,4BAA4B,SAAiB,OAAiB,gBAAwB;AAClF,QAAI,OAAO,KAAK,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC,EAAE,EAAE;AACrD,QAAI,SAAS,MAAM,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC,EAAE;AAEzC,QAAI,aAAa,SAAS,IAAI,SAAS,OAAO;AAE9C,WAAO,KAAK,IAAI,GAAG,UAAU,aAAa,cAAc;AAAA,EAC5D;AAAA,EAEA,iBAAiB,MAAY,MAAY;AAnP7C;AAoPQ,QAAI,QAAQ,KAAK,SAAS,cAAc,kBAAkB,YAAY,IAAI;AAE1E,QAAI,KAAK,iBAAiB;AACtB;AAAA,IACJ;AAEA,QAAI,KAAK,cAAc;AACnB,UAAI,aAAa,KAAK,kBAAkB,YAAY,KAAK,YAAY;AAErE,UAAI,gBAAc,gBAAW,UAAU,YAArB,mBAA8B,gBAAe;AAC3D,iBAAS,WAAW,UAAU,QAAQ;AAAA,MAC1C;AAAA,IACJ;AAEA,QAAI,KAAK,UAAU;AACf,eAAS,KAAK,UAAU,KAAK;AAAA,IACjC;AAEA,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
