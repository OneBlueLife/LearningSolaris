{
  "version": 3,
  "sources": ["../../../server/services/recaptcha.ts"],
  "sourcesContent": ["import { Config } from \"../config/types/Config\";\n\nconst Recaptcha = require('recaptcha-v2').Recaptcha;\n\nexport default class RecaptchaService {\n\n    config: Config;\n\n    constructor (\n        config: Config\n    ) {\n        this.config = config;\n    }\n\n    isEnabled() {\n        return this.config.google.recaptcha.enabled;\n    }\n\n    verify(ipAddress: string, token: string): Promise<void> {\n        let siteKey = this.config.google.recaptcha.siteKey;\n        let secretKey = this.config.google.recaptcha.secretKey;\n    \n        return new Promise((resolve, reject) => {\n            if (!this.isEnabled()) {\n                resolve();\n            }\n    \n            let data = {\n                remoteip: ipAddress,\n                response: token,\n                secret: secretKey\n            };\n        \n            let recaptcha = new Recaptcha(siteKey, secretKey, data);\n        \n            recaptcha.verify((success: boolean, error_code: string) => {\n                if (success) {\n                    resolve();\n                }\n                else {\n                    reject(error_code);\n                }\n            });\n        });\n    }\n\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,MAAM,YAAY,QAAQ,cAAc,EAAE;AAE1C,MAAO,iBAA+B;AAAA,EAIlC,YACI,QACF;AACE,SAAK,SAAS;AAAA,EAClB;AAAA,EAEA,YAAY;AACR,WAAO,KAAK,OAAO,OAAO,UAAU;AAAA,EACxC;AAAA,EAEA,OAAO,WAAmB,OAA8B;AACpD,QAAI,UAAU,KAAK,OAAO,OAAO,UAAU;AAC3C,QAAI,YAAY,KAAK,OAAO,OAAO,UAAU;AAE7C,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,UAAI,CAAC,KAAK,UAAU,GAAG;AACnB,gBAAQ;AAAA,MACZ;AAEA,UAAI,OAAO;AAAA,QACP,UAAU;AAAA,QACV,UAAU;AAAA,QACV,QAAQ;AAAA,MACZ;AAEA,UAAI,YAAY,IAAI,UAAU,SAAS,WAAW,IAAI;AAEtD,gBAAU,OAAO,CAAC,SAAkB,eAAuB;AACvD,YAAI,SAAS;AACT,kBAAQ;AAAA,QACZ,OACK;AACD,iBAAO,UAAU;AAAA,QACrB;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAEJ;AAAC;",
  "names": []
}
