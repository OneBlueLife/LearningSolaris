{
  "version": 3,
  "sources": ["../../../server/services/diplomacyUpkeep.ts"],
  "sourcesContent": ["import ValidationError from \"../errors/validation\";\nimport { Game } from \"./types/Game\";\nimport { Player } from \"./types/Player\";\nimport PlayerCreditsService from \"./playerCredits\";\nimport PlayerCycleRewardsService from \"./playerCycleRewards\";\n\nexport default class DiplomacyUpkeepService {\n\n    playerCreditsService: PlayerCreditsService;\n    playerCycleRewardsService: PlayerCycleRewardsService;\n\n    constructor(\n        playerCreditsService: PlayerCreditsService,\n        playerCycleRewardsService: PlayerCycleRewardsService\n    ) {\n        this.playerCycleRewardsService = playerCycleRewardsService;\n        this.playerCreditsService = playerCreditsService;\n    }\n\n    isAllianceUpkeepEnabled(game: Game) {\n        return game.settings.diplomacy.upkeepCost !== 'none';\n    }\n\n    async deductUpkeep(game: Game, player: Player, allianceCount: number, saveToDB: boolean = true) {\n        if (!this.isAllianceUpkeepEnabled(game)) {\n            throw new Error(`Alliance upkeep is not enabled in this game`);\n        }\n\n        const cycleRewards = this.playerCycleRewardsService.calculatePlayerCreditsEndOfCycleRewards(game, player);\n\n        let upkeep = this.getUpkeepCost(game, cycleRewards.creditsTotal, allianceCount);\n\n        if (!upkeep) {\n            return null;\n        }\n\n        if (saveToDB) {\n            // Note: The only time we need to validate this is when we are attempting to save to DB\n            // as this is currently the only scenario where the function is called from an API request and not internally.\n            if (player.credits < upkeep.totalCost) {\n                throw new ValidationError(`You cannot afford to declare an alliance with this player. The upfront alliance fee is ${upkeep.totalCost} credits.`);\n            }\n    \n            await this.playerCreditsService.addCredits(game, player, -upkeep.totalCost);\n        } else {\n            player.credits -= upkeep.totalCost;\n        }\n\n        return upkeep;\n    }\n\n    deductTotalUpkeep(game: Game, player: Player, creditsTotal: number, allianceCount: number) {\n        if (!this.isAllianceUpkeepEnabled(game)) {\n            throw new Error(`Alliance upkeep is not enabled in this game`);\n        }\n\n        let upkeep = this.getUpkeepCost(game, creditsTotal, allianceCount);\n\n        if (!upkeep) {\n            return null;\n        }\n\n        player.credits -= upkeep.totalCost;\n\n        return upkeep;\n    }\n    \n    getUpkeepCost(game: Game, creditsTotal: number, allianceCount: number) {\n        let costPerAlly = game.constants.diplomacy.upkeepExpenseMultipliers[game.settings.diplomacy.upkeepCost];\n\n        if (costPerAlly === 0) {\n            return null;\n        }\n\n        let totalCost = Math.round(allianceCount * costPerAlly * creditsTotal);\n        \n        return {\n            allianceCount,\n            totalCost\n        };\n    }\n\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA4B;AAM5B,MAAO,uBAAqC;AAAA,EAKxC,YACI,sBACA,2BACF;AACE,SAAK,4BAA4B;AACjC,SAAK,uBAAuB;AAAA,EAChC;AAAA,EAEA,wBAAwB,MAAY;AAChC,WAAO,KAAK,SAAS,UAAU,eAAe;AAAA,EAClD;AAAA,EAEA,MAAM,aAAa,MAAY,QAAgB,eAAuB,WAAoB,MAAM;AAC5F,QAAI,CAAC,KAAK,wBAAwB,IAAI,GAAG;AACrC,YAAM,IAAI,MAAM,6CAA6C;AAAA,IACjE;AAEA,UAAM,eAAe,KAAK,0BAA0B,wCAAwC,MAAM,MAAM;AAExG,QAAI,SAAS,KAAK,cAAc,MAAM,aAAa,cAAc,aAAa;AAE9E,QAAI,CAAC,QAAQ;AACT,aAAO;AAAA,IACX;AAEA,QAAI,UAAU;AAGV,UAAI,OAAO,UAAU,OAAO,WAAW;AACnC,cAAM,IAAI,kBAAAA,QAAgB,0FAA0F,OAAO,oBAAoB;AAAA,MACnJ;AAEA,YAAM,KAAK,qBAAqB,WAAW,MAAM,QAAQ,CAAC,OAAO,SAAS;AAAA,IAC9E,OAAO;AACH,aAAO,WAAW,OAAO;AAAA,IAC7B;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,kBAAkB,MAAY,QAAgB,cAAsB,eAAuB;AACvF,QAAI,CAAC,KAAK,wBAAwB,IAAI,GAAG;AACrC,YAAM,IAAI,MAAM,6CAA6C;AAAA,IACjE;AAEA,QAAI,SAAS,KAAK,cAAc,MAAM,cAAc,aAAa;AAEjE,QAAI,CAAC,QAAQ;AACT,aAAO;AAAA,IACX;AAEA,WAAO,WAAW,OAAO;AAEzB,WAAO;AAAA,EACX;AAAA,EAEA,cAAc,MAAY,cAAsB,eAAuB;AACnE,QAAI,cAAc,KAAK,UAAU,UAAU,yBAAyB,KAAK,SAAS,UAAU;AAE5F,QAAI,gBAAgB,GAAG;AACnB,aAAO;AAAA,IACX;AAEA,QAAI,YAAY,KAAK,MAAM,gBAAgB,cAAc,YAAY;AAErE,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAEJ;AAAC;",
  "names": ["ValidationError"]
}
