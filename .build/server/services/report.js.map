{
  "version": 3,
  "sources": ["../../../server/services/report.ts"],
  "sourcesContent": ["import { DBObjectId } from './types/DBObjectId';\nimport ValidationError from '../errors/validation';\nimport Repository from './repository';\nimport { Game } from './types/Game';\nimport { Report, ReportReasons } from './types/Report';\nimport PlayerService from './player';\n\nexport default class ReportService {\n    reportModel;\n    reportRepo: Repository<Report>;\n    playerService: PlayerService;\n\n    constructor(\n        reportModel,\n        reportRepo: Repository<Report>,\n        playerService: PlayerService\n    ) {\n        this.reportRepo = reportRepo;\n        this.reportModel = reportModel;\n        this.playerService = playerService;\n    }\n\n    async reportPlayer(game: Game, playerId: DBObjectId, reportedByUserId: DBObjectId, reasons: ReportReasons) {\n        let reportedPlayer = this.playerService.getById(game, playerId)!;\n        let reportedByPlayer = this.playerService.getByUserId(game, reportedByUserId)!;\n\n        if (!reportedPlayer.userId) {\n            throw new ValidationError(`The reported player is not a valid user.`);\n        }\n\n        let report = new this.reportModel({\n            gameId: game._id,\n            reportedPlayerId: reportedPlayer._id,\n            reportedUserId: reportedPlayer.userId,\n            reportedPlayerAlias: reportedPlayer.alias,\n            reportedByPlayerId: reportedByPlayer._id,\n            reportedByUserId: reportedByPlayer.userId,\n            reportedByPlayerAlias: reportedByPlayer.alias,\n            reasons: {\n                abuse: reasons.abuse || false,\n                spamming: reasons.spamming || false,\n                multiboxing: reasons.multiboxing || false,\n                inappropriateAlias: reasons.inappropriateAlias || false\n            },\n            actioned: false\n        });\n\n        await report.save();\n    }\n\n    async listReports() {\n        return await this.reportRepo.find({\n            // All reports\n        }, {\n            // All fields\n        }, {\n            actioned: 1,    // Non-actioned first\n            _id: -1          // Newest first\n        });\n    }\n\n    async actionReport(reportId: DBObjectId) {\n        return await this.reportRepo.updateOne({\n            _id: reportId\n        }, {\n            actioned: true\n        });\n    }\n\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAA4B;AAM5B,MAAO,cAA4B;AAAA,EAK/B,YACI,aACA,YACA,eACF;AACE,SAAK,aAAa;AAClB,SAAK,cAAc;AACnB,SAAK,gBAAgB;AAAA,EACzB;AAAA,EAEA,MAAM,aAAa,MAAY,UAAsB,kBAA8B,SAAwB;AACvG,QAAI,iBAAiB,KAAK,cAAc,QAAQ,MAAM,QAAQ;AAC9D,QAAI,mBAAmB,KAAK,cAAc,YAAY,MAAM,gBAAgB;AAE5E,QAAI,CAAC,eAAe,QAAQ;AACxB,YAAM,IAAI,kBAAAA,QAAgB,0CAA0C;AAAA,IACxE;AAEA,QAAI,SAAS,IAAI,KAAK,YAAY;AAAA,MAC9B,QAAQ,KAAK;AAAA,MACb,kBAAkB,eAAe;AAAA,MACjC,gBAAgB,eAAe;AAAA,MAC/B,qBAAqB,eAAe;AAAA,MACpC,oBAAoB,iBAAiB;AAAA,MACrC,kBAAkB,iBAAiB;AAAA,MACnC,uBAAuB,iBAAiB;AAAA,MACxC,SAAS;AAAA,QACL,OAAO,QAAQ,SAAS;AAAA,QACxB,UAAU,QAAQ,YAAY;AAAA,QAC9B,aAAa,QAAQ,eAAe;AAAA,QACpC,oBAAoB,QAAQ,sBAAsB;AAAA,MACtD;AAAA,MACA,UAAU;AAAA,IACd,CAAC;AAED,UAAM,OAAO,KAAK;AAAA,EACtB;AAAA,EAEA,MAAM,cAAc;AAChB,WAAO,MAAM,KAAK,WAAW,KAAK,CAElC,GAAG,CAEH,GAAG;AAAA,MACC,UAAU;AAAA,MACV,KAAK;AAAA,IACT,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,aAAa,UAAsB;AACrC,WAAO,MAAM,KAAK,WAAW,UAAU;AAAA,MACnC,KAAK;AAAA,IACT,GAAG;AAAA,MACC,UAAU;AAAA,IACd,CAAC;AAAA,EACL;AAEJ;AAAC;",
  "names": ["ValidationError"]
}
