{
  "version": 3,
  "sources": ["../../../server/services/reputation.ts"],
  "sourcesContent": ["import Repository from \"./repository\";\nimport { Game } from \"./types/Game\";\nimport { Player, PlayerReputation } from \"./types/Player\";\nimport DiplomacyService from \"./diplomacy\";\nimport PlayerStatisticsService from \"./playerStatistics\";\nimport PlayerAfkService from \"./playerAfk\";\n\nconst EventEmitter = require('events');\n\nconst MAX_REPUTATION = 8;\nconst MIN_REPUTATION = -8;\nconst REPUTATION_INCREMENT = 1;\nconst ALLY_REPUTATION_THRESHOLD = 5;\nconst ENEMY_REPUTATION_THRESHOLD = -1;\n\nexport default class ReputationService extends EventEmitter {\n\n    gameRepo: Repository<Game>;\n    playerStatisticsService: PlayerStatisticsService;\n    diplomacyService: DiplomacyService;\n    playerAfkService: PlayerAfkService;\n\n    constructor(\n        gameRepo: Repository<Game>,\n        playerStatisticsService: PlayerStatisticsService,\n        diplomacyService: DiplomacyService,\n        playerAfkService: PlayerAfkService\n    ) {\n        super();\n        \n        this.gameRepo = gameRepo;\n        this.playerStatisticsService = playerStatisticsService;\n        this.diplomacyService = diplomacyService;\n        this.playerAfkService = playerAfkService;\n    }\n\n    getReputation(fromPlayer: Player, toPlayer: Player) {\n        let rep: PlayerReputation | null = null;\n\n        if (fromPlayer.reputations) {\n            rep = fromPlayer.reputations.find(r => r.playerId.toString() === toPlayer._id.toString())!;\n        }\n\n        let isNew: boolean = false;\n\n        if (!rep) {\n            rep = {\n                playerId: toPlayer._id,\n                score: 0\n            };\n\n            if (!fromPlayer.reputations) {\n                fromPlayer.reputations = [];\n            }\n            \n            fromPlayer.reputations.push(rep);\n            isNew = true;\n        }\n\n        rep = fromPlayer.reputations.find(r => r.playerId.toString() === toPlayer._id.toString())!;\n\n        return {\n            reputation: rep,\n            isNew\n        };\n    }\n\n    async increaseReputation(game: Game, fromPlayer: Player, toPlayer: Player, amount: number = 1, updateDatabase: boolean) {\n        let rep = this.getReputation(fromPlayer, toPlayer);\n\n        if (rep.reputation.score < MAX_REPUTATION) {\n            rep.reputation.score += amount;\n            rep.reputation.score = Math.min(MAX_REPUTATION, rep.reputation.score);\n        }\n\n        if (updateDatabase) {\n            await this._updateReputation(game, fromPlayer, toPlayer, rep.reputation, rep.isNew);\n        }\n\n        if (this.playerAfkService.isAIControlled(game, fromPlayer, true)) {\n            await this.recalculateDiplomaticStatus(game, fromPlayer, toPlayer, rep.reputation, updateDatabase);\n        }\n\n        return rep;\n    }\n\n    async decreaseReputation(game: Game, fromPlayer: Player, toPlayer: Player, updateDatabase: boolean) {\n        let rep = this.getReputation(fromPlayer, toPlayer);\n\n        if (rep.reputation.score > MIN_REPUTATION) {\n            if (rep.reputation.score > 0) {\n                rep.reputation.score = 0;\n            } else {\n                rep.reputation.score -= REPUTATION_INCREMENT;\n                rep.reputation.score = Math.max(MIN_REPUTATION, rep.reputation.score);\n            }\n        }\n\n        if (updateDatabase) {\n            await this._updateReputation(game, fromPlayer, toPlayer, rep.reputation, rep.isNew);\n        }\n\n        if (this.playerAfkService.isAIControlled(game, fromPlayer, true)) {\n            await this.recalculateDiplomaticStatus(game, fromPlayer, toPlayer, rep.reputation, updateDatabase);\n        }\n\n        // For ACTIVE players, any decrease in reputation is considered an act of war.\n        // Note: Players who are allied can fight eachother in certain scenarios\n        // so it is imperitive that declarations of war do not affect alliances.\n        else if (this.diplomacyService.isFormalAlliancesEnabled(game) && \n            this.diplomacyService.getDiplomaticStatusToPlayer(game, fromPlayer._id, toPlayer._id).actualStatus === 'neutral') {\n            this.diplomacyService.declareEnemy(game, fromPlayer._id, toPlayer._id, false);\n        }\n\n        return rep;\n    }\n\n    async _updateReputation(game: Game, fromPlayer: Player, toPlayer: Player, reputation: PlayerReputation, isNew: boolean) {\n        if (isNew) {\n            return await this.gameRepo.updateOne({\n                _id: game._id,\n                'galaxy.players._id': fromPlayer._id\n            }, {\n                $addToSet: {\n                    'galaxy.players.$.reputations': reputation\n                }\n            });\n        } else {\n            return await this.gameRepo.updateOne({\n                _id: game._id,\n            }, {\n                $set: {\n                    'galaxy.players.$[p].reputations.$[r].score': reputation.score\n                }\n            }, {\n                arrayFilters: [\n                    {\n                        'p._id': fromPlayer._id\n                    },\n                    {\n                        'r.playerId': reputation.playerId\n                    }\n                ]\n            });\n        }\n    }\n\n    async tryIncreaseReputationCredits(game: Game, fromPlayer: Player, toPlayer: Player, amount: number) {\n        let playerStats = this.playerStatisticsService.getStats(game, toPlayer);\n        let creditsRequired = playerStats.totalEconomy * 10 / 2;\n        let increased = amount >= creditsRequired;\n\n        if (increased) {\n            await this.increaseReputation(game, fromPlayer, toPlayer, REPUTATION_INCREMENT, true);\n        }\n\n        return {\n            increased,\n            rep: this.getReputation(fromPlayer, toPlayer)\n        };\n    }\n\n    async tryIncreaseReputationCreditsSpecialists(game: Game, fromPlayer: Player, toPlayer: Player, amount: number) {\n        let creditsRequired = Math.round(toPlayer.research.specialists.level / 2);\n        let increased = amount >= creditsRequired;\n\n        if (increased) {\n            await this.increaseReputation(game, fromPlayer, toPlayer, REPUTATION_INCREMENT, true);\n        }\n\n        return {\n            increased,\n            rep: this.getReputation(fromPlayer, toPlayer)\n        };\n    }\n\n    async tryIncreaseReputationTechnology(game: Game, fromPlayer: Player, toPlayer: Player, technology) { // TODO: Technology type\n        await this.increaseReputation(game, fromPlayer, toPlayer, technology.difference, true);\n\n        return {\n            increased: true,\n            rep: this.getReputation(fromPlayer, toPlayer)\n        };\n    }\n\n    async recalculateDiplomaticStatus(game: Game, fromPlayer: Player, toPlayer: Player, reputation: PlayerReputation, updateDatabase: boolean) {\n        if (!this.playerAfkService.isAIControlled(game, fromPlayer, true)) {\n            throw new Error(`Automatic diplomatic statuses are reserved for AI players only.`);\n        }\n\n        const isFormalAlliancesEnabled = this.diplomacyService.isFormalAlliancesEnabled(game);\n\n        if (!isFormalAlliancesEnabled) {\n            return;\n        }\n\n        const status = this.diplomacyService.getDiplomaticStatusToPlayer(game, fromPlayer._id, toPlayer._id);\n\n        if (reputation.score >= ALLY_REPUTATION_THRESHOLD && status.statusTo !== \"allies\") {\n            this.diplomacyService.declareAlly(game, fromPlayer._id, toPlayer._id, updateDatabase);\n        }\n        else if (reputation.score <= ENEMY_REPUTATION_THRESHOLD && status.statusTo !== \"enemies\") {\n            this.diplomacyService.declareEnemy(game, fromPlayer._id, toPlayer._id, updateDatabase);\n        }\n        else if (reputation.score > ENEMY_REPUTATION_THRESHOLD && reputation.score < ALLY_REPUTATION_THRESHOLD && status.statusTo !== \"neutral\") {\n            this.diplomacyService.declareNeutral(game, fromPlayer._id, toPlayer._id, updateDatabase);\n        }\n    }\n\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,MAAM,eAAe,QAAQ,QAAQ;AAErC,MAAM,iBAAiB;AACvB,MAAM,iBAAiB;AACvB,MAAM,uBAAuB;AAC7B,MAAM,4BAA4B;AAClC,MAAM,6BAA6B;AAEnC,MAAO,0BAAwC,aAAa;AAAA,EAOxD,YACI,UACA,yBACA,kBACA,kBACF;AACE,UAAM;AAEN,SAAK,WAAW;AAChB,SAAK,0BAA0B;AAC/B,SAAK,mBAAmB;AACxB,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EAEA,cAAc,YAAoB,UAAkB;AAChD,QAAI,MAA+B;AAEnC,QAAI,WAAW,aAAa;AACxB,YAAM,WAAW,YAAY,KAAK,OAAK,EAAE,SAAS,SAAS,MAAM,SAAS,IAAI,SAAS,CAAC;AAAA,IAC5F;AAEA,QAAI,QAAiB;AAErB,QAAI,CAAC,KAAK;AACN,YAAM;AAAA,QACF,UAAU,SAAS;AAAA,QACnB,OAAO;AAAA,MACX;AAEA,UAAI,CAAC,WAAW,aAAa;AACzB,mBAAW,cAAc,CAAC;AAAA,MAC9B;AAEA,iBAAW,YAAY,KAAK,GAAG;AAC/B,cAAQ;AAAA,IACZ;AAEA,UAAM,WAAW,YAAY,KAAK,OAAK,EAAE,SAAS,SAAS,MAAM,SAAS,IAAI,SAAS,CAAC;AAExF,WAAO;AAAA,MACH,YAAY;AAAA,MACZ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,mBAAmB,MAAY,YAAoB,UAAkB,SAAiB,GAAG,gBAAyB;AACpH,QAAI,MAAM,KAAK,cAAc,YAAY,QAAQ;AAEjD,QAAI,IAAI,WAAW,QAAQ,gBAAgB;AACvC,UAAI,WAAW,SAAS;AACxB,UAAI,WAAW,QAAQ,KAAK,IAAI,gBAAgB,IAAI,WAAW,KAAK;AAAA,IACxE;AAEA,QAAI,gBAAgB;AAChB,YAAM,KAAK,kBAAkB,MAAM,YAAY,UAAU,IAAI,YAAY,IAAI,KAAK;AAAA,IACtF;AAEA,QAAI,KAAK,iBAAiB,eAAe,MAAM,YAAY,IAAI,GAAG;AAC9D,YAAM,KAAK,4BAA4B,MAAM,YAAY,UAAU,IAAI,YAAY,cAAc;AAAA,IACrG;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,mBAAmB,MAAY,YAAoB,UAAkB,gBAAyB;AAChG,QAAI,MAAM,KAAK,cAAc,YAAY,QAAQ;AAEjD,QAAI,IAAI,WAAW,QAAQ,gBAAgB;AACvC,UAAI,IAAI,WAAW,QAAQ,GAAG;AAC1B,YAAI,WAAW,QAAQ;AAAA,MAC3B,OAAO;AACH,YAAI,WAAW,SAAS;AACxB,YAAI,WAAW,QAAQ,KAAK,IAAI,gBAAgB,IAAI,WAAW,KAAK;AAAA,MACxE;AAAA,IACJ;AAEA,QAAI,gBAAgB;AAChB,YAAM,KAAK,kBAAkB,MAAM,YAAY,UAAU,IAAI,YAAY,IAAI,KAAK;AAAA,IACtF;AAEA,QAAI,KAAK,iBAAiB,eAAe,MAAM,YAAY,IAAI,GAAG;AAC9D,YAAM,KAAK,4BAA4B,MAAM,YAAY,UAAU,IAAI,YAAY,cAAc;AAAA,IACrG,WAKS,KAAK,iBAAiB,yBAAyB,IAAI,KACxD,KAAK,iBAAiB,4BAA4B,MAAM,WAAW,KAAK,SAAS,GAAG,EAAE,iBAAiB,WAAW;AAClH,WAAK,iBAAiB,aAAa,MAAM,WAAW,KAAK,SAAS,KAAK,KAAK;AAAA,IAChF;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,kBAAkB,MAAY,YAAoB,UAAkB,YAA8B,OAAgB;AACpH,QAAI,OAAO;AACP,aAAO,MAAM,KAAK,SAAS,UAAU;AAAA,QACjC,KAAK,KAAK;AAAA,QACV,sBAAsB,WAAW;AAAA,MACrC,GAAG;AAAA,QACC,WAAW;AAAA,UACP,gCAAgC;AAAA,QACpC;AAAA,MACJ,CAAC;AAAA,IACL,OAAO;AACH,aAAO,MAAM,KAAK,SAAS,UAAU;AAAA,QACjC,KAAK,KAAK;AAAA,MACd,GAAG;AAAA,QACC,MAAM;AAAA,UACF,8CAA8C,WAAW;AAAA,QAC7D;AAAA,MACJ,GAAG;AAAA,QACC,cAAc;AAAA,UACV;AAAA,YACI,SAAS,WAAW;AAAA,UACxB;AAAA,UACA;AAAA,YACI,cAAc,WAAW;AAAA,UAC7B;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEA,MAAM,6BAA6B,MAAY,YAAoB,UAAkB,QAAgB;AACjG,QAAI,cAAc,KAAK,wBAAwB,SAAS,MAAM,QAAQ;AACtE,QAAI,kBAAkB,YAAY,eAAe,KAAK;AACtD,QAAI,YAAY,UAAU;AAE1B,QAAI,WAAW;AACX,YAAM,KAAK,mBAAmB,MAAM,YAAY,UAAU,sBAAsB,IAAI;AAAA,IACxF;AAEA,WAAO;AAAA,MACH;AAAA,MACA,KAAK,KAAK,cAAc,YAAY,QAAQ;AAAA,IAChD;AAAA,EACJ;AAAA,EAEA,MAAM,wCAAwC,MAAY,YAAoB,UAAkB,QAAgB;AAC5G,QAAI,kBAAkB,KAAK,MAAM,SAAS,SAAS,YAAY,QAAQ,CAAC;AACxE,QAAI,YAAY,UAAU;AAE1B,QAAI,WAAW;AACX,YAAM,KAAK,mBAAmB,MAAM,YAAY,UAAU,sBAAsB,IAAI;AAAA,IACxF;AAEA,WAAO;AAAA,MACH;AAAA,MACA,KAAK,KAAK,cAAc,YAAY,QAAQ;AAAA,IAChD;AAAA,EACJ;AAAA,EAEA,MAAM,gCAAgC,MAAY,YAAoB,UAAkB,YAAY;AAChG,UAAM,KAAK,mBAAmB,MAAM,YAAY,UAAU,WAAW,YAAY,IAAI;AAErF,WAAO;AAAA,MACH,WAAW;AAAA,MACX,KAAK,KAAK,cAAc,YAAY,QAAQ;AAAA,IAChD;AAAA,EACJ;AAAA,EAEA,MAAM,4BAA4B,MAAY,YAAoB,UAAkB,YAA8B,gBAAyB;AACvI,QAAI,CAAC,KAAK,iBAAiB,eAAe,MAAM,YAAY,IAAI,GAAG;AAC/D,YAAM,IAAI,MAAM,iEAAiE;AAAA,IACrF;AAEA,UAAM,2BAA2B,KAAK,iBAAiB,yBAAyB,IAAI;AAEpF,QAAI,CAAC,0BAA0B;AAC3B;AAAA,IACJ;AAEA,UAAM,SAAS,KAAK,iBAAiB,4BAA4B,MAAM,WAAW,KAAK,SAAS,GAAG;AAEnG,QAAI,WAAW,SAAS,6BAA6B,OAAO,aAAa,UAAU;AAC/E,WAAK,iBAAiB,YAAY,MAAM,WAAW,KAAK,SAAS,KAAK,cAAc;AAAA,IACxF,WACS,WAAW,SAAS,8BAA8B,OAAO,aAAa,WAAW;AACtF,WAAK,iBAAiB,aAAa,MAAM,WAAW,KAAK,SAAS,KAAK,cAAc;AAAA,IACzF,WACS,WAAW,QAAQ,8BAA8B,WAAW,QAAQ,6BAA6B,OAAO,aAAa,WAAW;AACrI,WAAK,iBAAiB,eAAe,MAAM,WAAW,KAAK,SAAS,KAAK,cAAc;AAAA,IAC3F;AAAA,EACJ;AAEJ;AAAC;",
  "names": []
}
