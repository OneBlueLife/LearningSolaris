{
  "version": 3,
  "sources": ["../../../server/services/gameCreate.ts"],
  "sourcesContent": ["import ValidationError from '../errors/validation';\nimport { Game, GameSettings } from './types/Game';\nimport AchievementService from './achievement';\nimport ConversationService from './conversation';\nimport GameCreateValidationService from './gameCreateValidation';\nimport GameFluxService from './gameFlux';\nimport GameListService from './gameList';\nimport GameTypeService from './gameType';\nimport HistoryService from './history';\nimport MapService from './map';\nimport NameService from './name';\nimport PasswordService from './password';\nimport PlayerService from './player';\nimport SpecialistBanService from './specialistBan';\nimport UserService from './user';\nimport GameJoinService from './gameJoin';\nimport SpecialStarBanService from './specialStarBan';\nimport StarService from './star';\n\nconst RANDOM_NAME_STRING = '[[[RANDOM]]]';\n\nexport default class GameCreateService {\n    gameModel;\n    gameJoinService: GameJoinService;\n    gameListService: GameListService;\n    nameService: NameService;\n    mapService: MapService;\n    playerService: PlayerService;\n    passwordService: PasswordService;\n    conversationService: ConversationService;\n    historyService: HistoryService;\n    achievementService: AchievementService;\n    userService: UserService;\n    gameCreateValidationService: GameCreateValidationService;\n    gameFluxService: GameFluxService;\n    specialistBanService: SpecialistBanService;\n    specialStarBanService: SpecialStarBanService;\n    gameTypeService: GameTypeService;\n    starService: StarService;\n\n    constructor(\n        gameModel,\n        gameJoinService: GameJoinService,\n        gameListService: GameListService,\n        nameService: NameService, \n        mapService: MapService,\n        playerService: PlayerService,\n        passwordService: PasswordService,\n        conversationService: ConversationService, \n        historyService: HistoryService,\n        achievementService: AchievementService,\n        userService: UserService,\n        gameCreateValidationService: GameCreateValidationService,\n        gameFluxService: GameFluxService,\n        specialistBanService: SpecialistBanService,\n        specialStarBanService: SpecialStarBanService,\n        gameTypeService: GameTypeService,\n        starService: StarService\n    ) {\n        this.gameModel = gameModel;\n        this.gameJoinService = gameJoinService;\n        this.gameListService = gameListService;\n        this.nameService = nameService;\n        this.mapService = mapService;\n        this.playerService = playerService;\n        this.passwordService = passwordService;\n        this.conversationService = conversationService;\n        this.historyService = historyService;\n        this.achievementService = achievementService;\n        this.userService = userService;\n        this.gameCreateValidationService = gameCreateValidationService;\n        this.gameFluxService = gameFluxService;\n        this.specialistBanService = specialistBanService;\n        this.specialStarBanService = specialStarBanService;\n        this.gameTypeService = gameTypeService;\n        this.starService = starService;\n    }\n\n    async create(settings: GameSettings) {\n        const isTutorial = settings.general.type === 'tutorial';\n        const isNewPlayerGame = settings.general.type === 'new_player_rt' || settings.general.type === 'new_player_tb';\n        const isOfficialGame = settings.general.createdByUserId == null;\n\n        // If a legit user (not the system) created the game and it isn't a tutorial\n        // then that game must be set as a custom game.\n        if (settings.general.createdByUserId && !isTutorial) {\n            settings.general.type = 'custom'; // All user games MUST be custom type.\n            settings.general.timeMachine = 'disabled'; // Time machine is disabled for user created games.\n            settings.general.featured = false // Stop any tricksters.\n\n            // Prevent players from being able to create more than 1 game.\n            let openGames = await this.gameListService.listOpenGamesCreatedByUser(settings.general.createdByUserId);\n            let userIsGameMaster = await this.userService.getUserIsGameMaster(settings.general.createdByUserId);\n\n            if (openGames.length && !userIsGameMaster) {\n                throw new ValidationError('Cannot create game, you already have another game waiting for players.');\n            }\n\n            if (userIsGameMaster && openGames.length > 5) {\n                throw new ValidationError('Game Masters are limited to 5 games waiting for players.');\n            }\n\n            // Validate that the player cannot create large games.\n            if (settings.general.playerLimit > 16 && !userIsGameMaster) {\n                throw new ValidationError(`Games larger than 16 players are reserved for official games or can be created by GMs.`);\n            }\n\n            let isEstablishedPlayer = await this.userService.isEstablishedPlayer(settings.general.createdByUserId);\n\n            // Disallow new players from creating games if they haven't completed a game yet.\n            if (!isEstablishedPlayer) {\n                throw new ValidationError(`You must complete at least one game in order to create a custom game.`);\n            }\n        }\n        \n        if (settings.general.name.trim().length < 3 || settings.general.name.trim().length > 24) {\n            throw new ValidationError('Game name must be between 3 and 24 characters.');\n        }\n\n        if (settings.general.password) {\n            settings.general.password = await this.passwordService.hash(settings.general.password);\n            settings.general.passwordRequired = true;\n        }\n\n        let game = new this.gameModel({\n            settings\n        }) as Game;\n\n        // For non-custom galaxies we need to check that the player has actually provided\n        // enough stars for each player.\n        let desiredStarCount = game.settings.galaxy.starsPerPlayer * game.settings.general.playerLimit;\n        let desiredPlayerStarCount = game.settings.player.startingStars * game.settings.general.playerLimit;\n\n        if (desiredPlayerStarCount > desiredStarCount) {\n            throw new ValidationError(`Cannot create a galaxy of ${desiredStarCount} stars with ${game.settings.player.startingStars} stars per player.`);\n        }\n\n        // Ensure that c2c combat is disabled for orbital games.\n        if (game.settings.orbitalMechanics.enabled === 'enabled' && game.settings.specialGalaxy.carrierToCarrierCombat === 'enabled') {\n            game.settings.specialGalaxy.carrierToCarrierCombat = 'disabled';\n        }\n\n        // Ensure that specialist credits setting defaults token specific settings\n        if (game.settings.specialGalaxy.specialistsCurrency === 'credits') {\n            game.settings.player.startingCreditsSpecialists = 0;\n            game.settings.player.tradeCreditsSpecialists = false;\n            game.settings.technology.startingTechnologyLevel.specialists = 0;\n            game.settings.technology.researchCosts.specialists = 'none';\n        }\n\n        // Ensure that specialist bans are cleared if specialists are disabled.\n        if (game.settings.specialGalaxy.specialistCost === 'none') {\n            game.settings.specialGalaxy.specialistBans = {\n                star: [],\n                carrier: []\n            };\n        }\n\n        // Ensure that tick limited games have their ticks to end state preset\n        if (game.settings.gameTime.isTickLimited === 'enabled') {\n            game.state.ticksToEnd = game.settings.gameTime.tickLimit;\n        } else {\n            game.settings.gameTime.tickLimit = null;\n            game.state.ticksToEnd = null;\n        }\n\n        if (game.settings.galaxy.galaxyType === 'custom') {\n            game.settings.specialGalaxy.randomWarpGates = 0;\n            game.settings.specialGalaxy.randomWormHoles = 0;\n            game.settings.specialGalaxy.randomNebulas = 0;\n            game.settings.specialGalaxy.randomAsteroidFields = 0;\n            game.settings.specialGalaxy.randomBinaryStars = 0;\n            game.settings.specialGalaxy.randomBlackHoles = 0;\n            game.settings.specialGalaxy.randomPulsars = 0;\n        }\n\n        // Clamp max alliances if its invalid (minimum of 1)\n        game.settings.diplomacy.maxAlliances = Math.max(1, Math.min(game.settings.diplomacy.maxAlliances, game.settings.general.playerLimit - 1));\n        \n        // If the game name contains a special string, then replace it with a random name.\n        if (game.settings.general.name.indexOf(RANDOM_NAME_STRING) > -1) {\n            let randomGameName = this.nameService.getRandomGameName();\n\n            game.settings.general.name = game.settings.general.name.replace(RANDOM_NAME_STRING, randomGameName);\n        }\n\n        if (this.gameTypeService.isFluxGame(game)) {\n            this.gameFluxService.applyCurrentFlux(game);\n        }\n\n        const canApplyBans = isOfficialGame && !isNewPlayerGame && !isTutorial;\n\n        if (canApplyBans) {\n            // Apply spec bans if applicable.\n            if (game.settings.specialGalaxy.specialistCost !== 'none') {\n                const banAmount = game.constants.specialists.monthlyBanAmount; // Random X specs of each type.\n\n                const starBans = this.specialistBanService.getCurrentMonthStarBans(banAmount).map(s => s.id);\n                const carrierBans = this.specialistBanService.getCurrentMonthCarrierBans(banAmount).map(s => s.id);\n\n                // Append bans to any existing ones configured.\n                game.settings.specialGalaxy.specialistBans = {\n                    star: [...new Set(game.settings.specialGalaxy.specialistBans.star.concat(starBans))],\n                    carrier: [...new Set(game.settings.specialGalaxy.specialistBans.carrier.concat(carrierBans))]\n                };\n            }\n\n            // Apply special star bans\n            const specialStarBans = this.specialStarBanService.getCurrentMonthBans().specialStar;\n\n            for (let specialStarBan of specialStarBans) {\n                if (game.settings.specialGalaxy[specialStarBan.id] != null) {\n                    game.settings.specialGalaxy[specialStarBan.id] = 0;\n                }\n            }\n        }\n\n        // Create all of the stars required.\n        game.galaxy.homeStars = [];\n        game.galaxy.linkedStars = [];\n\n        let starGeneration = this.mapService.generateStars(\n            game, \n            desiredStarCount,\n            game.settings.general.playerLimit,\n            settings.galaxy.customJSON\n        );\n\n        game.galaxy.stars = starGeneration.stars;\n        game.galaxy.homeStars = starGeneration.homeStars;\n        game.galaxy.linkedStars = starGeneration.linkedStars;\n\n        this.starService.setupStarsForGameStart(game);\n        \n        // Setup players and assign to their starting positions.\n        game.galaxy.players = this.playerService.createEmptyPlayers(game);\n        game.galaxy.carriers = this.playerService.createHomeStarCarriers(game);\n\n        this.mapService.generateTerrain(game);\n\n        // Calculate how many stars we have and how many are required for victory.\n        game.state.stars = game.galaxy.stars.length;\n        game.state.starsForVictory = this._calculateStarsForVictory(game);\n\n        this._setGalaxyCenter(game);\n\n        if (isTutorial) {\n            this._setupTutorialPlayers(game);\n        } else {\n            this.conversationService.createConversationAllPlayers(game);\n        }\n\n        this.gameCreateValidationService.validate(game);\n\n        let gameObject = await game.save();\n\n        // TODO: This is a bit more complicated as we need to update the history\n        // for the very first tick when players join the game. The galaxy masking\n        // should only be applied for stars and carriers if its the very first tick.\n        // await this.historyService.log(gameObject);\n        // ^ Maybe fire an event for the historyService to capture?\n        \n        return gameObject;\n    }\n\n    _setGalaxyCenter(game: Game) {\n        const starLocations = game.galaxy.stars.map(s => s.location);\n\n        game.constants.distances.galaxyCenterLocation = this.mapService.getGalaxyCenter(starLocations);\n    }\n\n    _calculateStarsForVictory(game: Game) {\n        if (game.settings.general.mode === 'conquest') {\n            // TODO: Find a better place for this as its shared in the star service.\n            switch (game.settings.conquest.victoryCondition) {\n                case 'starPercentage':\n                    return Math.ceil((game.state.stars / 100) * game.settings.conquest.victoryPercentage);\n                case 'homeStarPercentage':\n                    return Math.max(2, Math.ceil((game.settings.general.playerLimit / 100) * game.settings.conquest.victoryPercentage)); // At least 2 home stars needed to win.\n                default:\n                    throw new Error(`Unsupported conquest victory condition: ${game.settings.conquest.victoryCondition}`);\n            }\n        }\n\n        // game.settings.conquest.victoryCondition = 'starPercentage'; // TODO: Default to starPercentage if not in conquest mode?\n\n        return game.galaxy.stars.length;\n    }\n\n    _setupTutorialPlayers(game: Game) {\n        // Dump the player who created the game straight into the first slot and set the other slots to AI.\n        this.gameJoinService.assignPlayerToUser(game, game.galaxy.players[0], game.settings.general.createdByUserId!, `Player`, 0);\n        this.gameJoinService.assignNonUserPlayersToAI(game);\n    }\n}\n"],
  "mappings": "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",
  "names": ["ValidationError"]
}
