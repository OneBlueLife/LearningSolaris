{
  "version": 3,
  "sources": ["../../../server/services/map.ts"],
  "sourcesContent": ["import { Game } from \"./types/Game\";\nimport { Location } from \"./types/Location\";\nimport { Star } from \"./types/Star\";\nimport GameTypeService from \"./gameType\";\nimport CircularMapService from \"./maps/circular\";\nimport CircularBalancedMapService from \"./maps/circularBalanced\";\nimport CustomMapService from \"./maps/custom\";\nimport DoughnutMapService from \"./maps/doughnut\";\nimport IrregularMapService from \"./maps/irregular\";\nimport SpiralMapService from \"./maps/spiral\";\nimport NameService from \"./name\";\nimport RandomService from \"./random\";\nimport StarService from \"./star\";\nimport StarDistanceService from \"./starDistance\";\nimport ValidationError from \"../errors/validation\";\n\nexport default class MapService {\n    randomService: RandomService;\n    starService: StarService;\n    starDistanceService: StarDistanceService;\n    nameService: NameService;\n    circularMapService: CircularMapService;\n    spiralMapService: SpiralMapService;\n    doughnutMapService: DoughnutMapService;\n    circularBalancedMapService: CircularBalancedMapService;\n    irregularMapService: IrregularMapService;\n    gameTypeService: GameTypeService;\n    customMapService: CustomMapService;\n\n    constructor(\n        randomService: RandomService, \n        starService: StarService,\n        starDistanceService: StarDistanceService,\n        nameService: NameService,\n        circularMapService: CircularMapService,\n        spiralMapService: SpiralMapService,\n        doughnutMapService: DoughnutMapService,\n        circularBalancedMapService: CircularBalancedMapService,\n        irregularMapService: IrregularMapService,\n        gameTypeService: GameTypeService,\n        customMapService: CustomMapService\n    ) {\n        this.randomService = randomService;\n        this.starService = starService;\n        this.starDistanceService = starDistanceService;\n        this.nameService = nameService;\n        this.circularMapService = circularMapService;\n        this.spiralMapService = spiralMapService;\n        this.doughnutMapService = doughnutMapService;\n        this.circularBalancedMapService = circularBalancedMapService;\n        this.irregularMapService = irregularMapService;\n        this.gameTypeService = gameTypeService;\n        this.customMapService = customMapService;\n    }\n\n    generateStars(game: Game, starCount: number, playerLimit: number, customJSON?: string | null) {\n        let stars: Star[] = [];\n        let homeStars: any[] = [];\n        let linkedStars: any[] = [];\n\n        // Get an array of random star names for however many stars we want.\n        const starNames = this.nameService.getRandomStarNames(starCount);\n\n        // Generate all of the locations for stars.\n        let starLocations: any[] = [];\n\n        switch (game.settings.galaxy.galaxyType) {\n            case 'circular':\n                starLocations = this.circularMapService.generateLocations(game, starCount, game.settings.specialGalaxy.resourceDistribution);\n                break;\n            case 'spiral':\n                starLocations = this.spiralMapService.generateLocations(game, starCount, game.settings.specialGalaxy.resourceDistribution);\n                break;\n            case 'doughnut':\n                starLocations = this.doughnutMapService.generateLocations(game, starCount, game.settings.specialGalaxy.resourceDistribution);\n                break;\n            case 'circular-balanced':\n                starLocations = this.circularBalancedMapService.generateLocations(game, starCount, game.settings.specialGalaxy.resourceDistribution, playerLimit);\n                break;\n            case 'irregular':\n                starLocations = this.irregularMapService.generateLocations(game, starCount, game.settings.specialGalaxy.resourceDistribution, playerLimit);\n                break;\n            case 'custom':\n                starLocations = this.customMapService.generateLocations(customJSON!, playerLimit);\n                break;\n            default:\n                throw new ValidationError(`Galaxy type ${game.settings.galaxy.galaxyType} is not supported or has been disabled.`);\n        }\n\n        let isCustomGalaxy = game.settings.galaxy.galaxyType === 'custom';\n        let starNamesIndex = 0;\n\n        let unlinkedStars = starLocations.filter(l => !l.linked);\n\n        // Create a star for all locations returned by the map generator\n        for (let i = 0; i < unlinkedStars.length; i++) {\n            let starLocation: any = unlinkedStars[i];\n            \n            let star;\n            let starName = starNames[starNamesIndex++];\n\n            if (isCustomGalaxy) {\n                star = this.starService.generateCustomGalaxyStar(starName, starLocation);\n            }\n            else {\n                star = this.starService.generateUnownedStar(starName, starLocation, starLocation.resources);\n            }\n            \n            stars.push(star);\n\n            if (starLocation.homeStar) {\n                let locLinkedStars: any[] = [];\n\n                for (let linkedLocation of starLocation.linkedLocations) {\n                  let linkedStar;\n                  let linkedStarName = starNames[starNamesIndex++];\n\n                  if (isCustomGalaxy) {\n                    linkedStar = this.starService.generateCustomGalaxyStar(linkedStarName, linkedLocation)\n                  }\n                  else {\n                    linkedStar = this.starService.generateUnownedStar(linkedStarName, linkedLocation, linkedLocation.resources);\n                  }\n\n                  stars.push(linkedStar);\n                  locLinkedStars.push(linkedStar._id);\n                }\n\n                homeStars.push(star._id)\n                linkedStars.push(locLinkedStars);\n            }\n        }\n\n        return {\n            stars,\n            homeStars,\n            linkedStars\n        };\n    }\n\n    generateTerrain(game: Game) {\n        const playerCount = game.settings.general.playerLimit;\n\n        // If warp gates are enabled, assign random stars to start as warp gates.\n        if (game.settings.specialGalaxy.randomWarpGates) {\n            this.generateGates(game.galaxy.stars, playerCount, game.settings.specialGalaxy.randomWarpGates);\n        }\n\n        // If worm holes are enabled, assign random warp gates to start as worm hole pairs\n        if (game.settings.specialGalaxy.randomWormHoles) {\n            this.generateWormHoles(game, game.galaxy.stars, playerCount, game.settings.specialGalaxy.randomWormHoles);\n        }\n\n        // If nebulas are enabled, assign random nebulas to start\n        if (game.settings.specialGalaxy.randomNebulas) {\n            this.generateNebulas(game, game.galaxy.stars, playerCount, game.settings.specialGalaxy.randomNebulas);\n        }\n\n        // If asteroid fields are enabled, assign random asteroid fields to start\n        if (game.settings.specialGalaxy.randomAsteroidFields) {\n            this.generateAsteroidFields(game, game.galaxy.stars, playerCount, game.settings.specialGalaxy.randomAsteroidFields);\n        }\n\n        // If binary stars are enabled, assign random binary stars to start\n        if (game.settings.specialGalaxy.randomBinaryStars) {\n            this.generateBinaryStars(game, game.galaxy.stars, playerCount, game.settings.specialGalaxy.randomBinaryStars);\n        }\n\n        // If black holes are enabled, assign random black holes to start\n        if (game.settings.specialGalaxy.randomBlackHoles) {\n            this.generateBlackHoles(game, game.galaxy.stars, playerCount, game.settings.specialGalaxy.randomBlackHoles);\n        }\n\n        // If pulsars are enabled, assign random pulsars to start\n        if (game.settings.specialGalaxy.randomPulsars) {\n            this.generatePulsars(game, game.galaxy.stars, playerCount, game.settings.specialGalaxy.randomPulsars);\n        }\n    }\n\n    generateGates(stars: Star[], playerCount: number, percentage: number) {\n        let gateCount = Math.floor((stars.length - playerCount) / 100 * percentage);\n\n        // Pick stars at random and set them to be warp gates.\n        do {\n            let star = stars[this.randomService.getRandomNumberBetween(0, stars.length - 1)];\n\n            if (star.homeStar || star.warpGate) {\n                gateCount++; // Increment because the while loop will decrement.\n            } else {\n                star.warpGate = true;\n            }\n        } while (gateCount--);\n    }\n\n    generateWormHoles(game: Game, stars: Star[], playerCount: number, percentage: number) {\n        let wormHoleCount = Math.floor((stars.length - playerCount) / 2 / 100 * percentage); // Wormholes come in pairs so its half of stars\n\n        // Pick stars at random and pair them up with another star to create a worm hole.\n        while (wormHoleCount--) {\n            const remaining = stars.filter(s => !s.wormHoleToStarId);\n\n            let starA = remaining[this.randomService.getRandomNumberBetween(0, remaining.length - 1)];\n            let starB = remaining[this.randomService.getRandomNumberBetween(0, remaining.length - 1)];\n\n            // Check validity of the random selection.\n            if (starA.homeStar || starB.homeStar || starA._id.toString() === starB._id.toString() || starA.wormHoleToStarId || starB.wormHoleToStarId) {\n                wormHoleCount++; // Increment because the while loop will decrement.\n            } else {\n                starA.wormHoleToStarId = starB._id;\n                starB.wormHoleToStarId = starA._id;\n\n                // Overwrite natural resources if splitResources\n                if (this.gameTypeService.isSplitResources(game)) {\n                    let minResources = game.constants.star.resources.maxNaturalResources * 1.5;\n                    let maxResources = game.constants.star.resources.maxNaturalResources * 3;\n\n                    starA.naturalResources.economy = this.randomService.getRandomNumberBetween(minResources, maxResources);\n                    starB.naturalResources.economy = this.randomService.getRandomNumberBetween(minResources, maxResources);\n                }\n            }\n        }\n    }\n\n    generateNebulas(game: Game, stars: Star[], playerCount: number, percentage: number) {\n        let count = Math.floor((stars.length - playerCount) / 100 * percentage);\n\n        // Pick stars at random and set them to be nebulas\n        do {\n            let star = stars[this.randomService.getRandomNumberBetween(0, stars.length - 1)];\n\n            if (star.homeStar || star.isNebula) {\n                count++; // Increment because the while loop will decrement.\n            } else {\n                star.isNebula = true;\n\n                // Overwrite natural resources if splitResources\n                if (this.gameTypeService.isSplitResources(game)) {\n                    let minResources = game.constants.star.resources.maxNaturalResources * 1.5;\n                    let maxResources = game.constants.star.resources.maxNaturalResources * 3;\n\n                    star.naturalResources.science = this.randomService.getRandomNumberBetween(minResources, maxResources);\n                }\n            }\n        } while (count--);\n    }\n\n    generateAsteroidFields(game: Game, stars: Star[], playerCount: number, percentage: number) {\n        let count = Math.floor((stars.length - playerCount) / 100 * percentage);\n\n        // Pick stars at random and set them to be asteroid fields\n        do {\n            let star = stars[this.randomService.getRandomNumberBetween(0, stars.length - 1)];\n\n            if (star.homeStar || star.isAsteroidField) {\n                count++; // Increment because the while loop will decrement.\n            } else {\n                star.isAsteroidField = true;\n            }\n        } while (count--);\n    }\n\n    generateBinaryStars(game: Game, stars: Star[], playerCount: number, percentage: number) {\n        let count = Math.floor((stars.length - playerCount) / 100 * percentage);\n\n        // Pick stars at random and set them to be binary stars\n        do {\n            let star = stars[this.randomService.getRandomNumberBetween(0, stars.length - 1)];\n\n            if (star.homeStar || star.isBinaryStar) {\n                count++; // Increment because the while loop will decrement.\n            } else {\n                star.isBinaryStar = true;\n\n                // Overwrite the natural resources\n                let minResources = game.constants.star.resources.maxNaturalResources * 1.5;\n                let maxResources = game.constants.star.resources.maxNaturalResources * 3;\n\n                // Overwrite natural resources\n                if (this.gameTypeService.isSplitResources(game)) {\n                    star.naturalResources.industry = this.randomService.getRandomNumberBetween(minResources, maxResources);\n                } else {\n                    let resources = this.randomService.getRandomNumberBetween(minResources, maxResources);\n\n                    star.naturalResources = {\n                        economy: resources,\n                        industry: resources,\n                        science: resources\n                    };\n                }\n            }\n        } while (count--);\n    }\n\n    generateBlackHoles(game: Game, stars: Star[], playerCount: number, percentage: number) {\n        let count = Math.floor((stars.length - playerCount) / 100 * percentage);\n\n        // Pick stars at random and set them to be asteroid fields\n        do {\n            let star = stars[this.randomService.getRandomNumberBetween(0, stars.length - 1)];\n\n            if (star.homeStar || star.isBlackHole) {\n                count++; // Increment because the while loop will decrement.\n            } else {\n                star.isBlackHole = true;\n\n                // Overwrite the natural resources\n                star.naturalResources.economy = Math.ceil(star.naturalResources.economy * 0.2);\n                star.naturalResources.industry = Math.ceil(star.naturalResources.industry * 0.2);\n                star.naturalResources.science = Math.ceil(star.naturalResources.science * 0.2);\n            }\n        } while (count--);\n    }\n\n    generatePulsars(game: Game, stars: Star[], playerCount: number, percentage: number) {\n        let count = Math.floor((stars.length - playerCount) / 100 * percentage);\n\n        // Pick stars at random and set them to be pulsars\n        do {\n            let star = stars[this.randomService.getRandomNumberBetween(0, stars.length - 1)];\n\n            if (star.homeStar || star.isPulsar) {\n                count++; // Increment because the while loop will decrement.\n            } else {\n                star.isPulsar = true;\n            }\n        } while (count--);\n    }\n\n    getGalaxyCenter(starLocations: Location[]) {\n        if (!starLocations.length) {\n            return {\n                x: 0,\n                y: 0\n            };\n        }\n\n        let maxX = starLocations.sort((a, b) => b.x - a.x)[0].x;\n        let maxY = starLocations.sort((a, b) => b.y - a.y)[0].y;\n        let minX = starLocations.sort((a, b) => a.x - b.x)[0].x;\n        let minY = starLocations.sort((a, b) => a.y - b.y)[0].y;\n\n        return {\n            x: (minX + maxX) / 2,\n            y: (minY + maxY) / 2\n        };\n    }\n\n    getGalaxyCenterOfMass(starLocations: Location[]) {\n        if (!starLocations.length) {\n            return {\n                x: 0,\n                y: 0\n            };\n        }\n\n        let totalX = starLocations.reduce((total, s) => total += s.x, 0);\n        let totalY = starLocations.reduce((total, s) => total += s.y, 0);\n\n        return {\n            x: totalX / starLocations.length,\n            y: totalY / starLocations.length,\n        };\n    }\n\n};\n"],
  "mappings": "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",
  "names": ["ValidationError"]
}
