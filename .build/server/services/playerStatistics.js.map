{
  "version": 3,
  "sources": ["../../../server/services/playerStatistics.ts"],
  "sourcesContent": ["import { Carrier } from './types/Carrier';\nimport { Game } from './types/Game';\nimport { Player } from './types/Player';\nimport { Star } from './types/Star';\nimport CarrierService from './carrier';\nimport SpecialistService from './specialist';\nimport StarService from './star';\nimport TechnologyService from './technology';\nimport { PlayerStatistics } from './types/Leaderboard';\nimport ShipService from './ship';\n\nexport default class PlayerStatisticsService {\n    starService: StarService;\n    carrierService: CarrierService;\n    technologyService: TechnologyService;\n    specialistService: SpecialistService;\n    shipService: ShipService;\n\n    constructor(\n        starService: StarService,\n        carrierService: CarrierService,\n        technologyService: TechnologyService,\n        specialistService: SpecialistService,\n        shipService: ShipService\n    ) {\n        this.starService = starService;\n        this.carrierService = carrierService;\n        this.technologyService = technologyService;\n        this.specialistService = specialistService;\n        this.shipService = shipService;\n    }\n\n    getStats(game: Game, player: Player): PlayerStatistics {\n        let playerStars = this.starService.listStarsOwnedByPlayer(game.galaxy.stars, player._id);\n        let playerCarriers = this.carrierService.listCarriersOwnedByPlayer(game.galaxy.carriers, player._id);\n\n        let totalStarSpecialists = this.calculateTotalStarSpecialists(playerStars);\n        let totalCarrierSpecialists = this.calculateTotalCarrierSpecialists(playerCarriers);\n\n        let totalStars = playerStars.length;\n        let totalHomeStars = this.calculateTotalHomeStars(playerStars);\n\n        // In BR mode, the player star count is based on living stars only. - TODO: Why?\n        if (game.settings.general.mode === 'battleRoyale') {\n            totalStars = playerStars.filter(s => !this.starService.isDeadStar(s)).length;\n        }\n\n        return {\n            totalStars: totalStars,\n            totalHomeStars: totalHomeStars,\n            totalCarriers: playerCarriers.length,\n            totalShips: this.shipService.calculateTotalShips(playerStars, playerCarriers),\n            totalShipsMax: this.shipService.calculatePopulationCap(game, player._id)?.shipsMaximum || null,\n            totalEconomy: this.calculateTotalEconomy(playerStars),\n            totalIndustry: this.calculateTotalIndustry(playerStars),\n            totalScience: this.calculateTotalScience(playerStars),\n            newShips: this.calculateTotalManufacturing(game, playerStars),\n            warpgates: this.calculateWarpgates(playerStars),\n            totalStarSpecialists,\n            totalCarrierSpecialists,\n            totalSpecialists: totalStarSpecialists + totalCarrierSpecialists,\n        };\n    }\n\n    calculateTotalStars(player: Player, stars: Star[]) {\n        let playerStars = this.starService.listStarsOwnedByPlayer(stars, player._id);\n\n        return playerStars.length;\n    }\n\n    calculateTotalHomeStars(playerStars: Star[]) {\n        return playerStars.filter(s => s.homeStar).length;\n    }\n\n    calculateTotalEconomy(playerStars: Star[]) {\n        let totalEconomy = playerStars.reduce((sum, s) => {\n            let multiplier = this.specialistService.getEconomyInfrastructureMultiplier(s);\n            let eco = s.infrastructure?.economy ?? 0;\n\n            return sum + (eco * multiplier)\n        }, 0);\n\n        return totalEconomy;\n    }\n\n    calculateTotalIndustry(playerStars: Star[]) {\n        let totalIndustry = playerStars.reduce((sum, s) => {\n            let ind = s.infrastructure?.industry ?? 0;\n\n            return sum + ind;\n        }, 0);\n\n        return totalIndustry;\n    }\n\n    calculateTotalScience(playerStars: Star[]) {\n        let totalScience = playerStars.reduce((sum, s) => {\n            let multiplier = this.specialistService.getScienceInfrastructureMultiplier(s);\n            let sci = s.infrastructure?.science ?? 0;\n\n            return sum + (sci * multiplier)\n        }, 0);\n\n        return totalScience;\n    }\n\n    calculateTotalManufacturing(game: Game, playerStars: Star[]) {\n        // Calculate the manufacturing level for all of the stars the player owns.\n        const totalManufacturing = playerStars.reduce((sum, s) => {\n            return sum + this.shipService.calculateStarManufacturing(game, s);\n        }, 0);\n        \n        return Math.round((totalManufacturing + Number.EPSILON) * 100) / 100\n    }\n\n    calculateWarpgates(playerStars: Star[]) {\n        return playerStars.reduce((sum, s) => s.warpGate ? sum + 1 : sum, 0);\n    }\n\n    calculateTotalCarriers(player: Player, carriers: Carrier[]) {\n        let playerCarriers = this.carrierService.listCarriersOwnedByPlayer(carriers, player._id);\n\n        return playerCarriers.length;\n    }\n\n    calculateTotalStarSpecialists(playerStars: Star[]) {\n        return playerStars.filter(s => s.specialistId).length;\n    }\n\n    calculateTotalCarrierSpecialists(playerCarriers: Carrier[]) {\n        return playerCarriers.filter(c => c.specialistId).length;\n    }\n\n}\n"],
  "mappings": "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",
  "names": []
}
