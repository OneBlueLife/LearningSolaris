{
  "version": 3,
  "sources": ["../../../server/services/spectator.ts"],
  "sourcesContent": ["import user from \"../api/controllers/user\";\nimport ValidationError from \"../errors/validation\";\nimport PlayerService from \"./player\";\nimport Repository from \"./repository\";\nimport { DBObjectId } from \"./types/DBObjectId\";\nimport { Game, GameSpectator } from \"./types/Game\";\nimport { Player } from \"./types/Player\";\nimport UserService from \"./user\";\n\nexport default class SpectatorService {\n    gameRepo: Repository<Game>;\n    playerService: PlayerService;\n    userService: UserService;\n\n    constructor(\n        gameRepo: Repository<Game>,\n        playerService: PlayerService,\n        userService: UserService\n    ) {\n        this.gameRepo = gameRepo;\n        this.playerService = playerService;\n        this.userService = userService;\n    }\n\n    isSpectatingEnabled(game: Game) {\n        return game.settings.general.spectators === 'enabled';\n    }\n\n    async invite(game: Game, player: Player, username: string) {\n        if (!this.isSpectatingEnabled(game)) {\n            throw new ValidationError(`Spectating is not enabled in this game.`);\n        }\n\n        let user = await this.userService.getByUsername(username, {\n            _id: 1\n        });\n        \n        if (!user) {\n            throw new ValidationError(`A player with the username ${username} does not exist.`);\n        }\n\n        // Make sure the user isn't already playing in the game.\n        const existingPlayer = this.playerService.getByUserId(game, user._id);\n\n        if (existingPlayer) {\n            throw new ValidationError(`The user ${username} is already playing in this game, they cannot be invited to spectate.`);\n        }\n\n        await this.gameRepo.updateOne({\n            _id: game._id,\n            'galaxy.players._id': player._id\n        }, {\n            $addToSet: {\n                'galaxy.players.$.spectators': user._id\n            }\n        });\n    }\n\n    async uninvite(game: Game, player: Player, userId: DBObjectId) {\n        if (!this.isSpectatingEnabled(game)) {\n            throw new ValidationError(`Spectating is not enabled in this game.`);\n        }\n        \n        await this.gameRepo.updateOne({\n            _id: game._id,\n            'galaxy.players._id': player._id\n        }, {\n            $pull: {\n                'galaxy.players.$.spectators': userId\n            }\n        });\n    }\n\n    async clearSpectators(game: Game, player: Player) {\n        if (!this.isSpectatingEnabled(game)) {\n            throw new ValidationError(`Spectating is not enabled in this game.`);\n        }\n        \n        await this.gameRepo.updateOne({\n            _id: game._id,\n            'galaxy.players._id': player._id\n        }, {\n            $set: {\n                'galaxy.players.$.spectators': []\n            }\n        });\n    }\n\n    async listSpectators(game: Game): Promise<GameSpectator[] | null> {\n        if (!this.isSpectatingEnabled(game)) {\n            return null;\n        }\n\n        let userIds: string[] = [];\n\n        for (const player of game.galaxy.players.filter(p => p.spectators)) {\n            userIds = userIds.concat(player.spectators.map(s => s.toString()))\n        }\n\n        userIds = [...new Set(userIds)];\n\n        if (!userIds.length) {\n            return [];\n        }\n\n        const users = await this.userService.listUsers(userIds as any, {\n            _id: 1,\n            username: 1\n        });\n\n        return users.map(u => {\n            // Get all players the user is spectating.\n            const playerIds = game.galaxy.players\n                .filter(p => p.spectators)\n                .filter(p => p.spectators.map(s => s.toString()).includes(u._id.toString()))\n                .map(p => p._id);\n\n            return {\n                ...u,\n                playerIds\n            };\n        });\n    }\n\n    clearSpectating(game: Game, userId: DBObjectId) {\n        const spectating = this.listSpectatingPlayers(game, userId);\n\n        for (let player of spectating) {\n            player.spectators.splice(player.spectators.indexOf(userId), 1);\n        }\n    }\n\n    isSpectating(game: Game, userId: DBObjectId) {        \n        return this.listSpectatingPlayers(game, userId).length > 0;\n    }\n\n    listSpectatingPlayers(game: Game, userId: DBObjectId) {        \n        return game.galaxy.players.filter(p => p.spectators.find(s => s.toString() === userId.toString()));\n    }\n};\n"],
  "mappings": "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",
  "names": ["ValidationError", "user"]
}
