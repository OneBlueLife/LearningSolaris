{
  "version": 3,
  "sources": ["../../../server/services/playerCycleRewards.ts"],
  "sourcesContent": ["import { Game } from './types/Game';\nimport { Player } from './types/Player';\nimport { Star } from './types/Star';\nimport PlayerStatisticsService from './playerStatistics';\nimport StarService from './star';\nimport TechnologyService from './technology';\nimport SpecialistService from './specialist';\n\nexport default class PlayerCycleRewardsService {\n    starService: StarService;\n    technologyService: TechnologyService;\n    playerStatisticsService: PlayerStatisticsService;\n    specialistService: SpecialistService;\n\n    constructor(\n        starService: StarService,\n        technologyService: TechnologyService,\n        playerStatisticsService: PlayerStatisticsService,\n        specialistService: SpecialistService\n    ) {\n        this.starService = starService;\n        this.technologyService = technologyService;\n        this.playerStatisticsService = playerStatisticsService;\n        this.specialistService = specialistService\n    }\n\n    calculatePlayerCreditsEndOfCycleRewards(game: Game, player: Player) {\n        let playerStars = this.starService.listStarsOwnedByPlayer(game.galaxy.stars, player._id);\n\n        let totalEco = this.playerStatisticsService.calculateTotalEconomy(playerStars);\n\n        let creditsFromEconomy = totalEco * 10;\n        let creditsFromBanking = this._getBankingReward(game, player, playerStars, totalEco);\n        let creditsTotal = creditsFromEconomy + creditsFromBanking;\n        let creditsFromSpecialistsTechnology = this._getCreditsSpecialistsReward(game, player, playerStars);\n\n        return {\n            creditsFromEconomy,\n            creditsFromBanking,\n            creditsTotal,\n            creditsFromSpecialistsTechnology\n        };\n    }\n\n    givePlayerCreditsEndOfCycleRewards(game: Game, player: Player) {\n        let rewards = this.calculatePlayerCreditsEndOfCycleRewards(game, player);\n\n        player.credits += rewards.creditsTotal;\n        player.creditsSpecialists += rewards.creditsFromSpecialistsTechnology;\n\n        return rewards;\n    }\n\n    _getBankingReward(game: Game, player: Player, playerStars: Star[], totalEco: number) {\n        let isBankingEnabled = this.technologyService.isTechnologyEnabled(game, 'banking');\n\n        if (!isBankingEnabled || !playerStars.length) { // Players must have stars in order to get credits from banking.\n            return 0;\n        }\n\n        let banking = player.research.banking.level;\n        let multiplier = game.constants.player.bankingCycleRewardMultiplier;\n\n        switch (game.settings.technology.bankingReward) {\n            case 'standard':\n                return Math.round((banking * multiplier) + (0.15 * banking * totalEco));\n            case 'legacy':\n                return banking * multiplier;\n        }\n\n        throw new Error(`Unsupported banking reward type: ${game.settings.technology.bankingReward}.`);\n    }\n\n    _getCreditsSpecialistsReward(game: Game, player: Player, playerStars: Star[]) {\n        if (!playerStars.length) {\n            return 0;\n        }\n\n        let isSpecialistsCreditsEnabled = this.technologyService.isTechnologyEnabled(game, 'specialists');\n        let isCreditsSpecialistsCurrency = game.settings.specialGalaxy.specialistsCurrency === 'creditsSpecialists';\n\n        if (!isSpecialistsCreditsEnabled || !isCreditsSpecialistsCurrency) {\n            return 0;\n        }\n\n        let starCount = playerStars.length;\n        let specialists = player.research.specialists.level;\n\n        switch (game.settings.technology.specialistTokenReward) {\n            case 'standard':\n                return specialists;\n            case 'experimental':\n                return Math.ceil(Math.min(starCount * specialists * 0.1, specialists));\n        }\n\n        throw new Error(`Unsupported specialist reward type: ${game.settings.technology.specialistTokenReward}.`);\n    }\n\n    giveFinancialAnalystCredits(game: Game) {\n        for (let player of game.galaxy.players) {\n            let playerStars = this.starService.listStarsOwnedByPlayer(game.galaxy.stars, player._id)\n                                .filter(s => !this.starService.isDeadStar(s));\n\n            for (let star of playerStars) {\n                let creditsByScience = this.specialistService.getCreditsPerTickByScience(star);\n\n                player.credits += creditsByScience * star.infrastructure.science!;\n            }\n        }\n    }\n\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,MAAO,0BAAwC;AAAA,EAM3C,YACI,aACA,mBACA,yBACA,mBACF;AACE,SAAK,cAAc;AACnB,SAAK,oBAAoB;AACzB,SAAK,0BAA0B;AAC/B,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EAEA,wCAAwC,MAAY,QAAgB;AAChE,QAAI,cAAc,KAAK,YAAY,uBAAuB,KAAK,OAAO,OAAO,OAAO,GAAG;AAEvF,QAAI,WAAW,KAAK,wBAAwB,sBAAsB,WAAW;AAE7E,QAAI,qBAAqB,WAAW;AACpC,QAAI,qBAAqB,KAAK,kBAAkB,MAAM,QAAQ,aAAa,QAAQ;AACnF,QAAI,eAAe,qBAAqB;AACxC,QAAI,mCAAmC,KAAK,6BAA6B,MAAM,QAAQ,WAAW;AAElG,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,mCAAmC,MAAY,QAAgB;AAC3D,QAAI,UAAU,KAAK,wCAAwC,MAAM,MAAM;AAEvE,WAAO,WAAW,QAAQ;AAC1B,WAAO,sBAAsB,QAAQ;AAErC,WAAO;AAAA,EACX;AAAA,EAEA,kBAAkB,MAAY,QAAgB,aAAqB,UAAkB;AACjF,QAAI,mBAAmB,KAAK,kBAAkB,oBAAoB,MAAM,SAAS;AAEjF,QAAI,CAAC,oBAAoB,CAAC,YAAY,QAAQ;AAC1C,aAAO;AAAA,IACX;AAEA,QAAI,UAAU,OAAO,SAAS,QAAQ;AACtC,QAAI,aAAa,KAAK,UAAU,OAAO;AAEvC,YAAQ,KAAK,SAAS,WAAW,eAAe;AAAA,MAC5C,KAAK;AACD,eAAO,KAAK,MAAO,UAAU,aAAe,OAAO,UAAU,QAAS;AAAA,MAC1E,KAAK;AACD,eAAO,UAAU;AAAA,IACzB;AAEA,UAAM,IAAI,MAAM,oCAAoC,KAAK,SAAS,WAAW,gBAAgB;AAAA,EACjG;AAAA,EAEA,6BAA6B,MAAY,QAAgB,aAAqB;AAC1E,QAAI,CAAC,YAAY,QAAQ;AACrB,aAAO;AAAA,IACX;AAEA,QAAI,8BAA8B,KAAK,kBAAkB,oBAAoB,MAAM,aAAa;AAChG,QAAI,+BAA+B,KAAK,SAAS,cAAc,wBAAwB;AAEvF,QAAI,CAAC,+BAA+B,CAAC,8BAA8B;AAC/D,aAAO;AAAA,IACX;AAEA,QAAI,YAAY,YAAY;AAC5B,QAAI,cAAc,OAAO,SAAS,YAAY;AAE9C,YAAQ,KAAK,SAAS,WAAW,uBAAuB;AAAA,MACpD,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO,KAAK,KAAK,KAAK,IAAI,YAAY,cAAc,KAAK,WAAW,CAAC;AAAA,IAC7E;AAEA,UAAM,IAAI,MAAM,uCAAuC,KAAK,SAAS,WAAW,wBAAwB;AAAA,EAC5G;AAAA,EAEA,4BAA4B,MAAY;AACpC,aAAS,UAAU,KAAK,OAAO,SAAS;AACpC,UAAI,cAAc,KAAK,YAAY,uBAAuB,KAAK,OAAO,OAAO,OAAO,GAAG,EAClE,OAAO,OAAK,CAAC,KAAK,YAAY,WAAW,CAAC,CAAC;AAEhE,eAAS,QAAQ,aAAa;AAC1B,YAAI,mBAAmB,KAAK,kBAAkB,2BAA2B,IAAI;AAE7E,eAAO,WAAW,mBAAmB,KAAK,eAAe;AAAA,MAC7D;AAAA,IACJ;AAAA,EACJ;AAEJ;",
  "names": []
}
