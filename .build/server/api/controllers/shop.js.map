{
  "version": 3,
  "sources": ["../../../../server/api/controllers/shop.ts"],
  "sourcesContent": ["import ValidationError from '../../errors/validation';\nimport { DependencyContainer } from '../../services/types/DependencyContainer';\n\nconst COST_PER_TOKEN = 1;\n\nexport default (container: DependencyContainer) => {\n    return {\n        purchase: async (req, res, next) => {\n            try {\n                let errors: string[] = [];\n    \n                if (!req.query.amount) {\n                    errors.push('Amount is a required field');\n                }\n    \n                if (errors.length) {\n                    throw new ValidationError(errors);\n                }\n    \n                const totalQuantity = parseInt(req.query.amount);\n                let unitCost = COST_PER_TOKEN;\n    \n                // Crude, but it works.\n                if (totalQuantity === 10) {\n                    unitCost *= 0.9;\n                } else if (totalQuantity === 25) {\n                    unitCost *= 0.8;\n                } else if (totalQuantity === 50) {\n                    unitCost *= 0.7;\n                } else if (totalQuantity === 100) {\n                    unitCost *= 0.5;\n                }\n    \n                const totalCost = totalQuantity * unitCost;\n                const returnUrl = `${container.config.serverUrl}/api/shop/galacticcredits/purchase/process`;\n                const cancelUrl =`${container.config.clientUrl}/#/shop`;\n    \n                let approvalUrl = await container.paypalService.authorizePayment(req.session.userId, totalQuantity, totalCost, unitCost, returnUrl, cancelUrl);\n                \n                // Note: Can't do a redirect here due to CORS\n                return res.status(200).json({\n                    approvalUrl\n                });\n            } catch (err) {\n                return next(err);\n            }\n        },\n        process: async (req, res, next) => {\n            try {\n                const result = await container.paypalService.processPayment(req.query.paymentId, req.query.PayerID);\n    \n                return res.redirect(`${container.config.clientUrl}/#/shop/paymentcomplete?credits=${result.galacticTokens}`);\n            } catch (err) {\n                console.error(err);\n    \n                return res.redirect(`${container.config.clientUrl}/#/shop/paymentfailed`);\n            }\n        }\n    }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA4B;AAG5B,MAAM,iBAAiB;AAEvB,IAAO,eAAQ,CAAC,cAAmC;AAC/C,SAAO;AAAA,IACH,UAAU,OAAO,KAAK,KAAK,SAAS;AAChC,UAAI;AACA,YAAI,SAAmB,CAAC;AAExB,YAAI,CAAC,IAAI,MAAM,QAAQ;AACnB,iBAAO,KAAK,4BAA4B;AAAA,QAC5C;AAEA,YAAI,OAAO,QAAQ;AACf,gBAAM,IAAI,kBAAAA,QAAgB,MAAM;AAAA,QACpC;AAEA,cAAM,gBAAgB,SAAS,IAAI,MAAM,MAAM;AAC/C,YAAI,WAAW;AAGf,YAAI,kBAAkB,IAAI;AACtB,sBAAY;AAAA,QAChB,WAAW,kBAAkB,IAAI;AAC7B,sBAAY;AAAA,QAChB,WAAW,kBAAkB,IAAI;AAC7B,sBAAY;AAAA,QAChB,WAAW,kBAAkB,KAAK;AAC9B,sBAAY;AAAA,QAChB;AAEA,cAAM,YAAY,gBAAgB;AAClC,cAAM,YAAY,GAAG,UAAU,OAAO;AACtC,cAAM,YAAW,GAAG,UAAU,OAAO;AAErC,YAAI,cAAc,MAAM,UAAU,cAAc,iBAAiB,IAAI,QAAQ,QAAQ,eAAe,WAAW,UAAU,WAAW,SAAS;AAG7I,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,UACxB;AAAA,QACJ,CAAC;AAAA,MACL,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,SAAS,OAAO,KAAK,KAAK,SAAS;AAC/B,UAAI;AACA,cAAM,SAAS,MAAM,UAAU,cAAc,eAAe,IAAI,MAAM,WAAW,IAAI,MAAM,OAAO;AAElG,eAAO,IAAI,SAAS,GAAG,UAAU,OAAO,4CAA4C,OAAO,gBAAgB;AAAA,MAC/G,SAAS,KAAP;AACE,gBAAQ,MAAM,GAAG;AAEjB,eAAO,IAAI,SAAS,GAAG,UAAU,OAAO,gCAAgC;AAAA,MAC5E;AAAA,IACJ;AAAA,EACJ;AACJ;",
  "names": ["ValidationError"]
}
