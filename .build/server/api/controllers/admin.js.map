{
  "version": 3,
  "sources": ["../../../../server/api/controllers/admin.ts"],
  "sourcesContent": ["import ValidationError from '../../errors/validation';\nimport { DependencyContainer } from '../../services/types/DependencyContainer';\n\nexport default (container: DependencyContainer) => {\n    return {\n        getInsights: async (req, res, next) => {\n            try {\n                let result = await container.adminService.getInsights();\n                \n                return res.status(200).json(result);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listUsers: async (req, res, next) => {\n            try {\n                let result = await container.adminService.listUsers(req.session.roles.administrator, 300);\n                \n                return res.status(200).json(result);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listPasswordResets: async (req, res, next) => {\n            try {\n                let result = await container.adminService.listPasswordResets();\n                \n                return res.status(200).json(result);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listReports: async (req, res, next) => {\n            try {\n                let result = await container.reportService.listReports();\n                \n                return res.status(200).json(result);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        actionReport: async (req, res, next) => {\n            try {\n                await container.reportService.actionReport(req.params.reportId);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n\n        setRoleContributor: async (req, res, next) => {\n            try {\n                await container.adminService.setRoleContributor(req.params.userId, req.body.enabled);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        setRoleDeveloper: async (req, res, next) => {\n            try {\n                await container.adminService.setRoleDeveloper(req.params.userId, req.body.enabled);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        setRoleGameMaster: async (req, res, next) => {\n            try {\n                await container.adminService.setRoleGameMaster(req.params.userId, req.body.enabled);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        setRoleCommunityManager: async (req, res, next) => {\n            try {\n                await container.adminService.setRoleCommunityManager(req.params.userId, req.body.enabled);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        setCredits: async (req, res, next) => {\n            try {\n                await container.userService.setCredits(req.params.userId, req.body.credits);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        banUser: async (req, res, next) => {\n            try {\n                await container.adminService.ban(req.params.userId);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        unbanUser: async (req, res, next) => {\n            try {\n                await container.adminService.unban(req.params.userId);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        resetAchievements: async (req, res, next) => {\n            try {\n                await container.adminService.resetAchievements(req.params.userId);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        promoteToEstablishedPlayer: async (req, res, next) => {\n            try {\n                await container.adminService.promoteToEstablishedPlayer(req.params.userId);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        impersonate: async (req, res, next) => {\n            try {\n                const user = await container.userService.getById(req.params.userId);\n    \n                if (!user) {\n                    throw new ValidationError(`User does not exist.`);\n                }\n    \n                req.session.userId = user._id;\n                req.session.username = user.username;\n                req.session.roles = user.roles;\n                req.session.userCredits = user.credits;\n                req.session.isImpersonating = true;\n    \n                return res.status(200).json({\n                    _id: user._id,\n                    username: user.username,\n                    roles: user.roles,\n                    credits: user.credits\n                });\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listGames: async (req, res, next) => {\n            try {\n                let result = await container.adminService.listGames(100);\n                \n                return res.status(200).json(result);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        setGameFeatured: async (req, res, next) => {\n            try {\n                await container.adminService.setGameFeatured(req.params.gameId, req.body.featured);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        setGameTimeMachine: async (req, res, next) => {\n            try {\n                await container.adminService.setGameTimeMachine(req.params.gameId, req.body.timeMachine);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        forceEndGame: async (req, res, next) => {\n            try {\n                await container.gameService.forceEndGame(req.game);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        }\n    }\n};\n"],
  "mappings": "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",
  "names": ["ValidationError"]
}
