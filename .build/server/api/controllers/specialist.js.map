{
  "version": 3,
  "sources": ["../../../../server/api/controllers/specialist.ts"],
  "sourcesContent": ["import ValidationError from '../../errors/validation';\nimport { DependencyContainer } from '../../services/types/DependencyContainer';\n\nexport default (container: DependencyContainer) => {\n    return {\n        listBans: async (req, res, next) => {\n            try {\n                const amount = container.gameFluxService.getThisMonthSpecialistBanAmount();\n                const specialistBans = container.specialistBanService.getCurrentMonthBans(amount);\n                const specialStarBans = container.specialStarBanService.getCurrentMonthBans();\n\n                const bans = {\n                    ...specialistBans,\n                    ...specialStarBans\n                }\n    \n                return res.status(200).json(bans);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listCarrier: async (req, res, next) => {\n            try {\n                let specialists = await container.specialistService.listCarrier(null);\n    \n                return res.status(200).json(specialists);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listStar: async (req, res, next) => {\n            try {\n                let specialists = await container.specialistService.listStar(null);\n    \n                return res.status(200).json(specialists);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listCarrierForGame: async (req, res, next) => {\n            try {\n                let specialists = await container.specialistService.listCarrier(req.game);\n    \n                return res.status(200).json(specialists);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listStarForGame: async (req, res, next) => {\n            try {\n                let specialists = await container.specialistService.listStar(req.game);\n    \n                return res.status(200).json(specialists);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        hireCarrier: async (req, res, next) => {\n            try {\n                let result = await container.specialistHireService.hireCarrierSpecialist(\n                    req.game,\n                    req.player,\n                    req.params.carrierId,\n                    +req.params.specialistId);\n    \n                await container.eventService.createPlayerCarrierSpecialistHired(\n                    req.game._id,\n                    req.game.state.tick,\n                    req.player,\n                    result.carrier,\n                    result.specialist\n                );\n    \n                return res.status(200).json({\n                    waypoints: result.waypoints,\n                    effectiveTechs: result.carrier.effectiveTechs\n                });\n            } catch (err) {\n                return next(err);\n            }\n        },\n        hireStar: async (req, res, next) => {\n            try {\n                let result = await container.specialistHireService.hireStarSpecialist(\n                    req.game,\n                    req.player,\n                    req.params.starId,\n                    +req.params.specialistId);\n    \n                await container.eventService.createPlayerStarSpecialistHired(\n                    req.game._id,\n                    req.game.state.tick,\n                    req.player,\n                    result.star,\n                    result.specialist\n                );\n    \n                return res.status(200).json({\n                    effectiveTechs: result.star.effectiveTechs\n                });\n            } catch (err) {\n                return next(err);\n            }\n        }\n    }\n};\n"],
  "mappings": "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",
  "names": []
}
