{
  "version": 3,
  "sources": ["../../../../server/api/controllers/trade.ts"],
  "sourcesContent": ["import { DependencyContainer } from '../../services/types/DependencyContainer';\nimport { mapToTradeSendTechnologyToPlayerRequest, mapToTradeSendToPlayerRequest } from '../requests/trade';\n\nconst mongoose = require('mongoose');\n\nexport default (container: DependencyContainer) => {\n    return {\n        sendCredits: async (req, res, next) => {\n            try {\n                const reqObj = mapToTradeSendToPlayerRequest(req.body, req.session.userId);\n    \n                let trade = await container.tradeService.sendCredits(\n                    req.game,\n                    req.player,\n                    reqObj.toPlayerId,\n                    reqObj.amount);\n                \n                res.status(200).json({\n                    reputation: trade.reputation\n                });\n    \n                container.broadcastService.gamePlayerCreditsReceived(req.game, trade.fromPlayer._id, trade.toPlayer._id, trade.amount, trade.date);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        sendCreditsSpecialists: async (req, res, next) => {\n            try {\n                const reqObj = mapToTradeSendToPlayerRequest(req.body, req.session.userId);\n    \n                let trade = await container.tradeService.sendCreditsSpecialists(\n                    req.game,\n                    req.player,\n                    reqObj.toPlayerId,\n                    reqObj.amount);\n                \n                res.status(200).json({\n                    reputation: trade.reputation\n                });\n    \n                container.broadcastService.gamePlayerCreditsSpecialistsReceived(req.game, trade.fromPlayer._id, trade.toPlayer._id, trade.amount, trade.date);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        sendRenown: async (req, res, next) => {    \n            try {\n                const reqObj = mapToTradeSendToPlayerRequest(req.body, req.session.userId);\n    \n                let trade = await container.tradeService.sendRenown(\n                    req.game,\n                    req.player,\n                    reqObj.toPlayerId,\n                    reqObj.amount);\n    \n                // TODO: Implement receiving renown on the UI, should use a user socket.\n                //container.broadcastService.userRenownReceived(req.game, // to user id, reqObj.amount);\n    \n                res.sendStatus(200);\n    \n                container.broadcastService.gamePlayerRenownReceived(req.game, trade.fromPlayer._id, trade.toPlayer._id, trade.amount, trade.date);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        sendTechnology: async (req, res, next) => {\n            try {\n                const reqObj = mapToTradeSendTechnologyToPlayerRequest(req.body);\n                \n                let trade = await container.tradeService.sendTechnology(\n                    req.game,\n                    req.player,\n                    reqObj.toPlayerId,\n                    reqObj.technology,\n                    reqObj.level);\n    \n                res.status(200).json({\n                    reputation: trade.reputation\n                });\n                \n                container.broadcastService.gamePlayerTechnologyReceived(req.game, trade.fromPlayer._id, trade.toPlayer._id, trade.technology, trade.date);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listTradeableTechnologies: async (req, res, next) => {\n            try {\n                let techs = await container.tradeService.listTradeableTechnologies(\n                    req.game,\n                    req.player,\n                    req.params.toPlayerId);\n    \n                return res.status(200).json(techs);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listTradeEvents: async (req, res, next) => {\n            try {\n                let events = await container.tradeService.listTradeEventsBetweenPlayers(\n                    req.game, \n                    req.player._id, \n                    [\n                        req.player._id, \n                        mongoose.Types.ObjectId(req.params.toPlayerId)\n                    ]);\n    \n                return res.status(200).json(events);\n            } catch (err) {\n                return next(err);\n            }\n        }\n    }\n};\n"],
  "mappings": "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",
  "names": []
}
