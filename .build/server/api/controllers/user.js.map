{
  "version": 3,
  "sources": ["../../../../server/api/controllers/user.ts"],
  "sourcesContent": ["import ValidationError from '../../errors/validation';\nimport { DependencyContainer } from '../../services/types/DependencyContainer';\nimport { mapToUserCreateUserRequest, mapToUserRequestPasswordResetRequest, mapToUserRequestUsernameRequest, mapToUserResetPasswordResetRequest, mapToUserUpdateEmailPreferenceRequest, mapToUserUpdateEmailRequest, mapToUserUpdatePasswordRequest, mapToUserUpdateUsernameRequest } from '../requests/user';\n\nexport default (container: DependencyContainer) => {\n    return {\n        listLeaderboard: async (req, res, next) => {\n            try {\n                const limit = +req.query.limit || null;\n                const result = await container.leaderboardService.getUserLeaderboard(limit, req.query.sortingKey);\n    \n                return res.status(200).json(result);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        create: async (req, res, next) => {\n            let ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n            let recaptchaEnabled = container.recaptchaService.isEnabled();\n    \n            try {\n                const reqObj = mapToUserCreateUserRequest(req.body, recaptchaEnabled);\n\n                const email = reqObj.email.toLowerCase();\n    \n                const emailExists = await container.userService.userExists(email);\n    \n                if (emailExists) {\n                    throw new ValidationError('An account with this email already exists');\n                }\n    \n                const username = reqObj.username;\n    \n                const usernameExists = await container.userService.usernameExists(username);\n    \n                if (usernameExists) {\n                    throw new ValidationError('An account with this username already exists');\n                }\n    \n                // Before we create a new account, verify that the user is not a robot.\n                if (recaptchaEnabled) {\n                    try {\n                        let ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n    \n                        await container.recaptchaService.verify(ip, reqObj.recaptchaToken!);\n                    } catch (err) {\n                        throw new ValidationError(['Recaptcha is invalid']);\n                    }\n                }\n    \n                let userId = await container.userService.create(email, username, reqObj.password, ip);\n    \n                return res.status(201).json({ id: userId });\n            } catch (err) {\n                return next(err);\n            }\n        },\n        getSettings: async (req, res, next) => {\n            try {\n                let settings = await container.userService.getGameSettings(req.session.userId);\n    \n                return res.status(200).json(settings);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        saveSettings: async (req, res, next) => {\n            try {\n                await container.userService.saveGameSettings(req.session.userId, req.body);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        getSubscriptions: async (req, res, next) => {\n            try {\n                let subscriptions = await container.userService.getSubscriptions(req.session.userId);\n    \n                return res.status(200).json(subscriptions);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        saveSubscriptions: async (req, res, next) => {\n            try {\n                await container.userService.saveSubscriptions(req.session.userId, req.body);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        getCredits: async (req, res, next) => {\n            try {\n                let credits = await container.userService.getCredits(req.session.userId);\n    \n                return res.status(200).json({\n                    credits\n                });\n            } catch (err) {\n                return next(err);\n            }\n        },\n        detailMe: async (req, res, next) => {\n            try {\n                let user = await container.userService.getMe(req.session.userId);\n    \n                return res.status(200).json(user);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listMyAvatars: async (req, res, next) => {\n            try {\n                let avatars = await container.avatarService.listUserAvatars(req.session.userId);\n    \n                return res.status(200).json(avatars);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        purchaseAvatar: async (req, res, next) => {\n            try {\n                await container.avatarService.purchaseAvatar(req.session.userId, parseInt(req.params.avatarId));\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        detail: async (req, res, next) => {\n            try {\n                let user = await container.userService.getInfoByIdLean(req.params.id);\n    \n                return res.status(200).json(user);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        getAchievements: async (req, res, next) => {\n            try {\n                let achievements = await container.achievementService.getAchievements(req.params.id);\n    \n                return res.status(200).json(achievements);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        updateEmailPreference: async (req, res, next) => {\n            try {\n                const reqObj = mapToUserUpdateEmailPreferenceRequest(req.body);\n    \n                await container.userService.updateEmailPreference(req.session.userId, reqObj.enabled);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        updateEmailOtherPreference: async (req, res, next) => {\n            try {\n                const reqObj = mapToUserUpdateEmailPreferenceRequest(req.body);\n    \n                await container.userService.updateEmailOtherPreference(req.session.userId, reqObj.enabled);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        updateUsername: async (req, res, next) => {\n            try {\n                const reqObj = mapToUserUpdateUsernameRequest(req.body);\n                \n                await container.userService.updateUsername(req.session.userId, reqObj.username);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        updateEmailAddress: async (req, res, next) => {\n            try {\n                const reqObj = mapToUserUpdateEmailRequest(req.body);\n                \n                await container.userService.updateEmailAddress(req.session.userId, reqObj.email);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        updatePassword: async (req, res, next) => {\n            try {\n                const reqObj = mapToUserUpdatePasswordRequest(req.body);\n                \n                await container.userService.updatePassword(\n                    req.session.userId,\n                    reqObj.currentPassword,\n                    reqObj.newPassword);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        requestPasswordReset: async (req, res, next) => {\n            try {\n                const reqObj = mapToUserRequestPasswordResetRequest(req.body);\n                \n                let token = await container.userService.requestResetPassword(reqObj.email);\n    \n                try {\n                    await container.emailService.sendTemplate(reqObj.email, container.emailService.TEMPLATES.RESET_PASSWORD, [token]);\n                } catch (emailError) {\n                    console.error(emailError);\n    \n                    return res.sendStatus(500);\n                }\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        resetPassword: async (req, res, next) => {\n            try {\n                const reqObj = mapToUserResetPasswordResetRequest(req.body);\n                \n                await container.userService.resetPassword(reqObj.token, reqObj.newPassword);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        requestUsername: async (req, res, next) => {\n            try {\n                const reqObj = mapToUserRequestUsernameRequest(req.body);\n                \n                let username = await container.userService.getUsernameByEmail(reqObj.email);\n    \n                try {\n                    await container.emailService.sendTemplate(reqObj.email, container.emailService.TEMPLATES.FORGOT_USERNAME, [username]);\n                } catch (emailError) {\n                    console.error(emailError);\n    \n                    return res.sendStatus(500);\n                }\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        delete: async (req, res, next) => {\n            try {\n                await container.gameService.quitAllActiveGames(req.session.userId);\n                await container.guildService.tryLeave(req.session.userId);\n                await container.guildService.declineAllInvitations(req.session.userId);\n                await container.userService.closeAccount(req.session.userId);\n    \n                // Delete the session object.\n                req.session.destroy((err) => {\n                    if (err) {\n                        return next(err);\n                    }\n    \n                    return res.sendStatus(200);\n                });\n            } catch (err) {\n                return next(err);\n            }\n        }\n    }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA4B;AAE5B,kBAA0R;AAE1R,IAAO,eAAQ,CAAC,cAAmC;AAC/C,SAAO;AAAA,IACH,iBAAiB,OAAO,KAAK,KAAK,SAAS;AACvC,UAAI;AACA,cAAM,QAAQ,CAAC,IAAI,MAAM,SAAS;AAClC,cAAM,SAAS,MAAM,UAAU,mBAAmB,mBAAmB,OAAO,IAAI,MAAM,UAAU;AAEhG,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,MAAM;AAAA,MACtC,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,QAAQ,OAAO,KAAK,KAAK,SAAS;AAC9B,UAAI,KAAK,IAAI,QAAQ,sBAAsB,IAAI,WAAW;AAC1D,UAAI,mBAAmB,UAAU,iBAAiB,UAAU;AAE5D,UAAI;AACA,cAAM,aAAS,wCAA2B,IAAI,MAAM,gBAAgB;AAEpE,cAAM,QAAQ,OAAO,MAAM,YAAY;AAEvC,cAAM,cAAc,MAAM,UAAU,YAAY,WAAW,KAAK;AAEhE,YAAI,aAAa;AACb,gBAAM,IAAI,kBAAAA,QAAgB,2CAA2C;AAAA,QACzE;AAEA,cAAM,WAAW,OAAO;AAExB,cAAM,iBAAiB,MAAM,UAAU,YAAY,eAAe,QAAQ;AAE1E,YAAI,gBAAgB;AAChB,gBAAM,IAAI,kBAAAA,QAAgB,8CAA8C;AAAA,QAC5E;AAGA,YAAI,kBAAkB;AAClB,cAAI;AACA,gBAAIC,MAAK,IAAI,QAAQ,sBAAsB,IAAI,WAAW;AAE1D,kBAAM,UAAU,iBAAiB,OAAOA,KAAI,OAAO,cAAe;AAAA,UACtE,SAAS,KAAP;AACE,kBAAM,IAAI,kBAAAD,QAAgB,CAAC,sBAAsB,CAAC;AAAA,UACtD;AAAA,QACJ;AAEA,YAAI,SAAS,MAAM,UAAU,YAAY,OAAO,OAAO,UAAU,OAAO,UAAU,EAAE;AAEpF,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,IAAI,OAAO,CAAC;AAAA,MAC9C,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,aAAa,OAAO,KAAK,KAAK,SAAS;AACnC,UAAI;AACA,YAAI,WAAW,MAAM,UAAU,YAAY,gBAAgB,IAAI,QAAQ,MAAM;AAE7E,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,MACxC,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,cAAc,OAAO,KAAK,KAAK,SAAS;AACpC,UAAI;AACA,cAAM,UAAU,YAAY,iBAAiB,IAAI,QAAQ,QAAQ,IAAI,IAAI;AAEzE,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,kBAAkB,OAAO,KAAK,KAAK,SAAS;AACxC,UAAI;AACA,YAAI,gBAAgB,MAAM,UAAU,YAAY,iBAAiB,IAAI,QAAQ,MAAM;AAEnF,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,aAAa;AAAA,MAC7C,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,mBAAmB,OAAO,KAAK,KAAK,SAAS;AACzC,UAAI;AACA,cAAM,UAAU,YAAY,kBAAkB,IAAI,QAAQ,QAAQ,IAAI,IAAI;AAE1E,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,YAAY,OAAO,KAAK,KAAK,SAAS;AAClC,UAAI;AACA,YAAI,UAAU,MAAM,UAAU,YAAY,WAAW,IAAI,QAAQ,MAAM;AAEvE,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,UACxB;AAAA,QACJ,CAAC;AAAA,MACL,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,UAAU,OAAO,KAAK,KAAK,SAAS;AAChC,UAAI;AACA,YAAI,OAAO,MAAM,UAAU,YAAY,MAAM,IAAI,QAAQ,MAAM;AAE/D,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,IAAI;AAAA,MACpC,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,eAAe,OAAO,KAAK,KAAK,SAAS;AACrC,UAAI;AACA,YAAI,UAAU,MAAM,UAAU,cAAc,gBAAgB,IAAI,QAAQ,MAAM;AAE9E,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,OAAO;AAAA,MACvC,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,gBAAgB,OAAO,KAAK,KAAK,SAAS;AACtC,UAAI;AACA,cAAM,UAAU,cAAc,eAAe,IAAI,QAAQ,QAAQ,SAAS,IAAI,OAAO,QAAQ,CAAC;AAE9F,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,QAAQ,OAAO,KAAK,KAAK,SAAS;AAC9B,UAAI;AACA,YAAI,OAAO,MAAM,UAAU,YAAY,gBAAgB,IAAI,OAAO,EAAE;AAEpE,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,IAAI;AAAA,MACpC,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,iBAAiB,OAAO,KAAK,KAAK,SAAS;AACvC,UAAI;AACA,YAAI,eAAe,MAAM,UAAU,mBAAmB,gBAAgB,IAAI,OAAO,EAAE;AAEnF,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,YAAY;AAAA,MAC5C,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,uBAAuB,OAAO,KAAK,KAAK,SAAS;AAC7C,UAAI;AACA,cAAM,aAAS,mDAAsC,IAAI,IAAI;AAE7D,cAAM,UAAU,YAAY,sBAAsB,IAAI,QAAQ,QAAQ,OAAO,OAAO;AAEpF,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,4BAA4B,OAAO,KAAK,KAAK,SAAS;AAClD,UAAI;AACA,cAAM,aAAS,mDAAsC,IAAI,IAAI;AAE7D,cAAM,UAAU,YAAY,2BAA2B,IAAI,QAAQ,QAAQ,OAAO,OAAO;AAEzF,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,gBAAgB,OAAO,KAAK,KAAK,SAAS;AACtC,UAAI;AACA,cAAM,aAAS,4CAA+B,IAAI,IAAI;AAEtD,cAAM,UAAU,YAAY,eAAe,IAAI,QAAQ,QAAQ,OAAO,QAAQ;AAE9E,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,oBAAoB,OAAO,KAAK,KAAK,SAAS;AAC1C,UAAI;AACA,cAAM,aAAS,yCAA4B,IAAI,IAAI;AAEnD,cAAM,UAAU,YAAY,mBAAmB,IAAI,QAAQ,QAAQ,OAAO,KAAK;AAE/E,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,gBAAgB,OAAO,KAAK,KAAK,SAAS;AACtC,UAAI;AACA,cAAM,aAAS,4CAA+B,IAAI,IAAI;AAEtD,cAAM,UAAU,YAAY;AAAA,UACxB,IAAI,QAAQ;AAAA,UACZ,OAAO;AAAA,UACP,OAAO;AAAA,QAAW;AAEtB,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,sBAAsB,OAAO,KAAK,KAAK,SAAS;AAC5C,UAAI;AACA,cAAM,aAAS,kDAAqC,IAAI,IAAI;AAE5D,YAAI,QAAQ,MAAM,UAAU,YAAY,qBAAqB,OAAO,KAAK;AAEzE,YAAI;AACA,gBAAM,UAAU,aAAa,aAAa,OAAO,OAAO,UAAU,aAAa,UAAU,gBAAgB,CAAC,KAAK,CAAC;AAAA,QACpH,SAAS,YAAP;AACE,kBAAQ,MAAM,UAAU;AAExB,iBAAO,IAAI,WAAW,GAAG;AAAA,QAC7B;AAEA,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,eAAe,OAAO,KAAK,KAAK,SAAS;AACrC,UAAI;AACA,cAAM,aAAS,gDAAmC,IAAI,IAAI;AAE1D,cAAM,UAAU,YAAY,cAAc,OAAO,OAAO,OAAO,WAAW;AAE1E,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,iBAAiB,OAAO,KAAK,KAAK,SAAS;AACvC,UAAI;AACA,cAAM,aAAS,6CAAgC,IAAI,IAAI;AAEvD,YAAI,WAAW,MAAM,UAAU,YAAY,mBAAmB,OAAO,KAAK;AAE1E,YAAI;AACA,gBAAM,UAAU,aAAa,aAAa,OAAO,OAAO,UAAU,aAAa,UAAU,iBAAiB,CAAC,QAAQ,CAAC;AAAA,QACxH,SAAS,YAAP;AACE,kBAAQ,MAAM,UAAU;AAExB,iBAAO,IAAI,WAAW,GAAG;AAAA,QAC7B;AAEA,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,QAAQ,OAAO,KAAK,KAAK,SAAS;AAC9B,UAAI;AACA,cAAM,UAAU,YAAY,mBAAmB,IAAI,QAAQ,MAAM;AACjE,cAAM,UAAU,aAAa,SAAS,IAAI,QAAQ,MAAM;AACxD,cAAM,UAAU,aAAa,sBAAsB,IAAI,QAAQ,MAAM;AACrE,cAAM,UAAU,YAAY,aAAa,IAAI,QAAQ,MAAM;AAG3D,YAAI,QAAQ,QAAQ,CAAC,QAAQ;AACzB,cAAI,KAAK;AACL,mBAAO,KAAK,GAAG;AAAA,UACnB;AAEA,iBAAO,IAAI,WAAW,GAAG;AAAA,QAC7B,CAAC;AAAA,MACL,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,EACJ;AACJ;",
  "names": ["ValidationError", "ip"]
}
