{
  "version": 3,
  "sources": ["../../../../server/api/controllers/auth.ts"],
  "sourcesContent": ["import { DependencyContainer } from '../../services/types/DependencyContainer';\nconst axios = require('axios');\n\nexport default (container: DependencyContainer) => {\n    return {\n        login: async (req, res, next) => {        \n            try {\n                let user = await container.authService.login(req.body.email, req.body.password);\n        \n                // Store the user id in the session.\n                req.session.userId = user._id;\n                req.session.username = user.username;\n                req.session.roles = user.roles;\n                req.session.userCredits = user.credits;\n                req.session.isImpersonating = false;\n    \n                return res.status(200).json({\n                    _id: user._id,\n                    username: user.username,\n                    roles: user.roles,\n                    credits: user.credits\n                });\n            } catch (err) {\n                next(err);\n            }\n        },\n        logout: (req, res, next) => {\n            if (req.session) {\n                // Delete the session object.\n                req.session.destroy((err) => {\n                    if (err) {\n                        return next(err);\n                    }\n        \n                    return res.sendStatus(200);\n                });\n            } else {\n                return res.sendStatus(200);\n            }\n        },\n        verify: (req, res, next) => {\n            const session = (req as any).session;\n    \n            return res.status(200).json({\n                _id: session.userId,\n                username: session.username,\n                roles: session.roles,\n                credits: session.userCredits\n            });\n        },\n        authoriseDiscord: async (req: any, res, next) => {\n            const code = req.query.code;\n    \n            if (code) {\n                try {\n                    await container.discordService.clearOAuth(req.session.userId);\n    \n                    // Documentation: https://discordjs.guide/oauth2/#a-quick-example\n                    const params = new URLSearchParams({\n                        client_id: process.env.DISCORD_CLIENTID,\n                        client_secret: process.env.DISCORD_CLIENT_SECRET,\n                        code,\n                        grant_type: 'authorization_code',\n                        redirect_uri: process.env.DISCORD_OAUTH_REDIRECT_URI,\n                        scope: 'identify',\n                    } as any);\n    \n                    const oauthResult = await axios.post('https://discord.com/api/oauth2/token', params, {\n                        headers: {\n                            'Content-Type': 'application/x-www-form-urlencoded',\n                        }\n                    });\n    \n                    if (oauthResult.status === 200) {\n                        const userResult = await axios.get('https://discord.com/api/users/@me', {\n                            headers: {\n                                authorization: `${oauthResult.data.token_type} ${oauthResult.data.access_token}`,\n                            },\n                        });\n    \n                        if (userResult.status === 200) {\n                            await container.discordService.updateOAuth(req.session.userId, userResult.data.id, oauthResult.data);\n            \n                            return res.redirect(`${process.env.CLIENT_URL_ACCOUNT_SETTINGS}?discordSuccess=true`);\n                        }\n                    }\n                } catch (error) {\n                    // NOTE: An unauthorized token will not throw an error;\n                    // it will return a 401 Unauthorized response in the try block above\n                    console.error(error);\n                }\n            }\n    \n            return res.redirect(`${process.env.CLIENT_URL_ACCOUNT_SETTINGS}?discordSuccess=false`);\n        },\n        unauthoriseDiscord: async (req, res, next) => {\n            try {\n                await container.discordService.clearOAuth(req.session.userId);\n        \n                return res.sendStatus(200);\n            } catch (err) {\n                next(err);\n            }\n        }\n    }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,MAAM,QAAQ,QAAQ,OAAO;AAE7B,IAAO,eAAQ,CAAC,cAAmC;AAC/C,SAAO;AAAA,IACH,OAAO,OAAO,KAAK,KAAK,SAAS;AAC7B,UAAI;AACA,YAAI,OAAO,MAAM,UAAU,YAAY,MAAM,IAAI,KAAK,OAAO,IAAI,KAAK,QAAQ;AAG9E,YAAI,QAAQ,SAAS,KAAK;AAC1B,YAAI,QAAQ,WAAW,KAAK;AAC5B,YAAI,QAAQ,QAAQ,KAAK;AACzB,YAAI,QAAQ,cAAc,KAAK;AAC/B,YAAI,QAAQ,kBAAkB;AAE9B,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,UACxB,KAAK,KAAK;AAAA,UACV,UAAU,KAAK;AAAA,UACf,OAAO,KAAK;AAAA,UACZ,SAAS,KAAK;AAAA,QAClB,CAAC;AAAA,MACL,SAAS,KAAP;AACE,aAAK,GAAG;AAAA,MACZ;AAAA,IACJ;AAAA,IACA,QAAQ,CAAC,KAAK,KAAK,SAAS;AACxB,UAAI,IAAI,SAAS;AAEb,YAAI,QAAQ,QAAQ,CAAC,QAAQ;AACzB,cAAI,KAAK;AACL,mBAAO,KAAK,GAAG;AAAA,UACnB;AAEA,iBAAO,IAAI,WAAW,GAAG;AAAA,QAC7B,CAAC;AAAA,MACL,OAAO;AACH,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B;AAAA,IACJ;AAAA,IACA,QAAQ,CAAC,KAAK,KAAK,SAAS;AACxB,YAAM,UAAW,IAAY;AAE7B,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QACxB,KAAK,QAAQ;AAAA,QACb,UAAU,QAAQ;AAAA,QAClB,OAAO,QAAQ;AAAA,QACf,SAAS,QAAQ;AAAA,MACrB,CAAC;AAAA,IACL;AAAA,IACA,kBAAkB,OAAO,KAAU,KAAK,SAAS;AAC7C,YAAM,OAAO,IAAI,MAAM;AAEvB,UAAI,MAAM;AACN,YAAI;AACA,gBAAM,UAAU,eAAe,WAAW,IAAI,QAAQ,MAAM;AAG5D,gBAAM,SAAS,IAAI,gBAAgB;AAAA,YAC/B,WAAW,QAAQ,IAAI;AAAA,YACvB,eAAe,QAAQ,IAAI;AAAA,YAC3B;AAAA,YACA,YAAY;AAAA,YACZ,cAAc,QAAQ,IAAI;AAAA,YAC1B,OAAO;AAAA,UACX,CAAQ;AAER,gBAAM,cAAc,MAAM,MAAM,KAAK,wCAAwC,QAAQ;AAAA,YACjF,SAAS;AAAA,cACL,gBAAgB;AAAA,YACpB;AAAA,UACJ,CAAC;AAED,cAAI,YAAY,WAAW,KAAK;AAC5B,kBAAM,aAAa,MAAM,MAAM,IAAI,qCAAqC;AAAA,cACpE,SAAS;AAAA,gBACL,eAAe,GAAG,YAAY,KAAK,cAAc,YAAY,KAAK;AAAA,cACtE;AAAA,YACJ,CAAC;AAED,gBAAI,WAAW,WAAW,KAAK;AAC3B,oBAAM,UAAU,eAAe,YAAY,IAAI,QAAQ,QAAQ,WAAW,KAAK,IAAI,YAAY,IAAI;AAEnG,qBAAO,IAAI,SAAS,GAAG,QAAQ,IAAI,iDAAiD;AAAA,YACxF;AAAA,UACJ;AAAA,QACJ,SAAS,OAAP;AAGE,kBAAQ,MAAM,KAAK;AAAA,QACvB;AAAA,MACJ;AAEA,aAAO,IAAI,SAAS,GAAG,QAAQ,IAAI,kDAAkD;AAAA,IACzF;AAAA,IACA,oBAAoB,OAAO,KAAK,KAAK,SAAS;AAC1C,UAAI;AACA,cAAM,UAAU,eAAe,WAAW,IAAI,QAAQ,MAAM;AAE5D,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B,SAAS,KAAP;AACE,aAAK,GAAG;AAAA,MACZ;AAAA,IACJ;AAAA,EACJ;AACJ;",
  "names": []
}
