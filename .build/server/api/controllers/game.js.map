{
  "version": 3,
  "sources": ["../../../../server/api/controllers/game.ts"],
  "sourcesContent": ["import ValidationError from '../../errors/validation';\nimport { DependencyContainer } from '../../services/types/DependencyContainer';\nimport { mapToGameConcedeDefeatRequest, mapToGameJoinGameRequest, mapToGameSaveNotesRequest } from '../requests/game';\n\nexport default (container: DependencyContainer) => {\n    return {\n        getDefaultSettings: (req, res, next) => {\n            return res.status(200).json({\n                settings: require('../../config/game/settings/user/standard.json'),\n                options: require('../../config/game/settings/options.json')\n            });\n        },\n        getFlux: async (req, res, next) => {\n            try {\n                const flux = container.gameFluxService.getCurrentFlux();\n    \n                return res.status(200).json(flux);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        create: async (req, res, next) => {\n            // TODO: This needs a request interface.\n            req.body.general.createdByUserId = req.session.userId;\n    \n            try {\n                let game = await container.gameCreateService.create(req.body);\n    \n                return res.status(201).json(game._id);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        createTutorial: async (req, res, next) => {\n            try {\n                let tutorial = await container.gameListService.getUserTutorial(req.session.userId);\n    \n                if (!tutorial) {\n                    const settings = require('../../config/game/settings/user/tutorial.json');\n                    \n                    settings.general.createdByUserId = req.session.userId\n    \n                    tutorial = await container.gameCreateService.create(settings);\n                }\n    \n                return res.status(201).json(tutorial._id);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        detailInfo: async (req, res, next) => {\n            try {\n                return res.status(200).json(req.game);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        detailState: async (req, res, next) => {\n            try {\n                return res.status(200).json(req.game);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        detailGalaxy: async (req, res, next) => {\n            try {\n                let tick = +req.query.tick || null;\n        \n                if (tick != null && tick < 0) {\n                    throw new ValidationError(`Tick must be greater or equal to 0.`);\n                }\n        \n                let game = await container.gameGalaxyService.getGalaxy(req.params.gameId, req.session.userId, tick);\n    \n                return res.status(200).json(game);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listSummary: async (req, res, next) => {\n            try {\n                const games = await Promise.all([\n                    container.gameListService.listJoinableGames(),\n                    container.gameListService.listInProgressGames(),\n                    container.gameListService.listRecentlyCompletedGames()\n                ])\n                \n                let result = {\n                    official: games[0].official,\n                    user: games[0].custom,\n                    inProgress: games[1],\n                    completed: games[2]\n                };\n    \n                return res.status(200).json(result);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listOfficial: async (req, res, next) => {\n            try {\n                let games = await container.gameListService.listOfficialGames();\n    \n                return res.status(200).json(games);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listCustom: async (req, res, next) => {\n            try {\n                let games = await container.gameListService.listCustomGames();\n    \n                return res.status(200).json(games);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listInProgress: async (req, res, next) => {\n            try {\n                let games = await container.gameListService.listInProgressGames();\n    \n                return res.status(200).json(games);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listRecentlyCompleted: async (req, res, next) => {\n            try {\n                let games = await container.gameListService.listRecentlyCompletedGames();\n    \n                return res.status(200).json(games);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listMyCompleted: async (req, res, next) => {\n            try {\n                let games = await container.gameListService.listUserCompletedGames(req.session.userId);\n    \n                return res.status(200).json(games);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listMyActiveGames: async (req, res, next) => {\n            try {\n                let games = await container.gameListService.listActiveGames(req.session.userId);\n    \n                return res.status(200).json(games);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listSpectating: async (req, res, next) => {\n            try {\n                let games = await container.gameListService.listSpectating(req.session.userId);\n    \n                return res.status(200).json(games);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        getIntel: async (req, res, next) => {\n            try {\n                let startTick = +req.query.startTick || 0;\n                let endTick = +req.query.endTick || Number.MAX_VALUE;\n                \n                let result = await container.historyService.listIntel(req.params.gameId, startTick, endTick);\n    \n                return res.status(200).json(result);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        join: async (req, res, next) => {\n            try {\n                const reqObj = mapToGameJoinGameRequest(req.body);\n                \n                let gameIsFull = await container.gameJoinService.join(\n                    req.game,\n                    req.session.userId,\n                    reqObj.playerId,\n                    reqObj.alias,\n                    reqObj.avatar,\n                    reqObj.password);\n    \n                res.sendStatus(200);\n    \n                container.broadcastService.gamePlayerJoined(req.game, reqObj.playerId, reqObj.alias, reqObj.avatar);\n    \n                if (gameIsFull) {\n                    container.broadcastService.gameStarted(req.game);\n                }\n            } catch (err) {\n                return next(err);\n            }\n        },\n        quit: async (req, res, next) => {\n            try {\n                let player = await container.gameService.quit(\n                    req.game,\n                    req.player);\n    \n                res.sendStatus(200);\n                    \n                if (player) {\n                    container.broadcastService.gamePlayerQuit(req.game, player);\n                }\n            } catch (err) {\n                return next(err);\n            }\n        },\n        concede: async (req, res, next) => {\n            try {\n                const reqObj = mapToGameConcedeDefeatRequest(req.body);\n\n                await container.gameService.concedeDefeat(\n                    req.game,\n                    req.player,\n                    reqObj.openSlot);\n                    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        ready: async (req, res, next) => {\n            try {\n                await container.playerReadyService.declareReady(\n                    req.game,\n                    req.player);\n                \n                res.sendStatus(200);\n    \n                container.broadcastService.gamePlayerReady(req.game, req.player);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        readyToCycle: async (req, res, next) => {\n            try {\n                await container.playerReadyService.declareReadyToCycle(\n                    req.game,\n                    req.player);\n                \n                res.sendStatus(200);\n    \n                container.broadcastService.gamePlayerReady(req.game, req.player);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        unready: async (req, res, next) => {\n            try {\n                await container.playerReadyService.undeclareReady(\n                    req.game,\n                    req.player);\n    \n                res.sendStatus(200);\n                    \n                container.broadcastService.gamePlayerNotReady(req.game, req.player);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        readyToQuit: async (req, res, next) => {\n            try {\n                await container.playerReadyService.declareReadyToQuit(\n                    req.game,\n                    req.player);\n                \n                res.sendStatus(200);\n    \n                container.broadcastService.gamePlayerReadyToQuit(req.game, req.player);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        unreadyToQuit: async (req, res, next) => {\n            try {\n                await container.playerReadyService.undeclareReadyToQuit(\n                    req.game,\n                    req.player);\n    \n                res.sendStatus(200);\n                    \n                container.broadcastService.gamePlayerNotReadyToQuit(req.game, req.player);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        getNotes: async (req, res, next) => {\n            try {\n                let notes = await container.playerService.getGameNotes(\n                    req.game,\n                    req.player);\n                \n                res.status(200).json({ notes });\n            } catch (err) {\n                return next(err);\n            }\n        },\n        saveNotes: async (req, res, next) => {\n            try {\n                const reqObj = mapToGameSaveNotesRequest(req.body);\n\n                await container.playerService.updateGameNotes(\n                    req.game,\n                    req.player,\n                    reqObj.notes);\n                \n                res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        delete: async (req, res, next) => {\n            try {\n                await container.gameService.delete(\n                    req.game,\n                    req.session.userId);\n                    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        getPlayerUser: async (req, res, next) => {\n            try {\n                let user = await container.gameService.getPlayerUser(\n                    req.game,\n                    req.params.playerId\n                );\n    \n                return res.status(200).json(user);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        touch: async (req, res, next) => {\n            try {\n                let ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n    \n                if (!req.session.isImpersonating) {\n                    await container.playerService.updateLastSeenLean(req.params.gameId, req.session.userId, ip);\n                }\n                \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        }\n    }\n};\n"],
  "mappings": "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",
  "names": ["ValidationError"]
}
