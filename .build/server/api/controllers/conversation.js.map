{
  "version": 3,
  "sources": ["../../../../server/api/controllers/conversation.ts"],
  "sourcesContent": ["import { DependencyContainer } from '../../services/types/DependencyContainer';\nimport { mapToConversationCreateConversationRequest, mapToConversationSendMessageRequest } from '../requests/conversation';\n\nexport default (container: DependencyContainer) => {\n    return {\n        list: async (req, res, next) => {\n            try {\n                let result = await container.conversationService.list(\n                    req.game,\n                    req.player._id);\n    \n                return res.status(200).json(result);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listPrivate: async (req, res, next) => {\n            try {\n                let result = await container.conversationService.privateChatSummary(\n                    req.game,\n                    req.player._id,\n                    req.params.withPlayerId);\n    \n                return res.status(200).json(result);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        getUnreadCount: async (req, res, next) => {\n            try {\n                let result = container.conversationService.getUnreadCount(\n                    req.game,\n                    req.player._id);\n    \n                return res.status(200).json({\n                    unread: result\n                });\n            } catch (err) {\n                return next(err);\n            }\n        },\n        detail: async (req, res, next) => {\n            try {\n                let result = await container.conversationService.detail(\n                    req.game,\n                    req.player._id,\n                    req.params.conversationId);\n    \n                return res.status(200).json(result);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        create: async (req, res, next) => {\n            try {\n                const reqObj = mapToConversationCreateConversationRequest(req.body);\n\n                let convo = await container.conversationService.create(\n                    req.game,\n                    req.player._id,\n                    reqObj.name,\n                    reqObj.participants);\n    \n                // TODO: Broadcast convo created.\n    \n                return res.status(200).json(convo);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        sendMessage: async (req, res, next) => {\n            try {    \n                const reqObj = mapToConversationSendMessageRequest(req.body);\n    \n                let message = await container.conversationService.send(\n                    req.game,\n                    req.player,\n                    req.params.conversationId,\n                    reqObj.message);\n    \n                container.broadcastService.gameMessageSent(req.game, message);\n    \n                return res.status(200).send(message);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        markAsRead: async (req, res, next) => {\n            if (req.session.isImpersonating) {\n                return res.sendStatus(200);\n            }\n    \n            try {\n                let convo = await container.conversationService.markConversationAsRead(\n                    req.game,\n                    req.player._id,\n                    req.params.conversationId);\n    \n                container.broadcastService.gameConversationRead(req.game, convo, req.player._id);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        mute: async (req, res, next) => {\n            try {\n                await container.conversationService.mute(\n                    req.game,\n                    req.player._id,\n                    req.params.conversationId);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        unmute: async (req, res, next) => {\n            try {\n                await container.conversationService.unmute(\n                    req.game,\n                    req.player._id,\n                    req.params.conversationId);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        leave: async (req, res, next) => {\n            try {\n                let convo = await container.conversationService.leave(\n                    req.game,\n                    req.player._id,\n                    req.params.conversationId);\n    \n                container.broadcastService.gameConversationLeft(req.game, convo, req.player._id);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        pinMessage: async (req, res, next) => {\n            try {\n                await container.conversationService.pinMessage(\n                    req.game,\n                    req.params.conversationId,\n                    req.params.messageId);\n    \n                let convo = await container.conversationService.detail(\n                    req.game,\n                    req.player._id,\n                    req.params.conversationId);\n        \n                container.broadcastService.gameConversationMessagePinned(req.game, convo, req.params.messageId);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        unpinMessage: async (req, res, next) => {\n            try {\n                await container.conversationService.unpinMessage(\n                    req.game,\n                    req.params.conversationId,\n                    req.params.messageId);\n    \n                let convo = await container.conversationService.detail(\n                    req.game,\n                    req.player._id,\n                    req.params.conversationId);\n    \n                container.broadcastService.gameConversationMessageUnpinned(req.game, convo, req.params.messageId);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        }\n    }\n};\n"],
  "mappings": "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",
  "names": []
}
