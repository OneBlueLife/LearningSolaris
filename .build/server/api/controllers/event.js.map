{
  "version": 3,
  "sources": ["../../../../server/api/controllers/event.ts"],
  "sourcesContent": ["import ValidationError from '../../errors/validation';\nimport { DependencyContainer } from '../../services/types/DependencyContainer';\n\nexport default (container: DependencyContainer) => {\n    return {\n        list: async (req, res, next) => {\n            let page = +req.query.page || 0;\n            let pageSize = +req.query.pageSize ?? 10;\n            let category = req.query.category || 'all';\n            \n            try {\n                let events = await container.eventService.getPlayerEvents(\n                    req.game._id,\n                    req.player,\n                    page,\n                    pageSize,\n                    category\n                );\n    \n                return res.status(200).json(events);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        markAllAsRead: async (req, res, next) => {\n            if (req.session.isImpersonating) {\n                return res.sendStatus(200);\n            }\n    \n            try {\n                await container.eventService.markAllEventsAsRead(\n                    req.game,\n                    req.player._id);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        markAsRead: async (req, res, next) => {\n            if (req.session.isImpersonating) {\n                return res.sendStatus(200);\n            }\n            \n            try {\n                await container.eventService.markEventAsRead(\n                    req.game,\n                    req.player._id,\n                    req.params.eventId);\n    \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        getUnreadCount: async (req, res, next) => {\n            try {\n                let result = await container.eventService.getUnreadCount(\n                    req.game,\n                    req.player._id);\n    \n                return res.status(200).json({\n                    unread: result\n                });\n            } catch (err) {\n                return next(err);\n            }\n        }\n    }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,IAAO,gBAAQ,CAAC,cAAmC;AAC/C,SAAO;AAAA,IACH,MAAM,OAAO,KAAK,KAAK,SAAS;AAC5B,UAAI,OAAO,CAAC,IAAI,MAAM,QAAQ;AAC9B,UAAI,WAAW,CAAC,IAAI,MAAM;AAC1B,UAAI,WAAW,IAAI,MAAM,YAAY;AAErC,UAAI;AACA,YAAI,SAAS,MAAM,UAAU,aAAa;AAAA,UACtC,IAAI,KAAK;AAAA,UACT,IAAI;AAAA,UACJ;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AAEA,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,MAAM;AAAA,MACtC,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,eAAe,OAAO,KAAK,KAAK,SAAS;AACrC,UAAI,IAAI,QAAQ,iBAAiB;AAC7B,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B;AAEA,UAAI;AACA,cAAM,UAAU,aAAa;AAAA,UACzB,IAAI;AAAA,UACJ,IAAI,OAAO;AAAA,QAAG;AAElB,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,YAAY,OAAO,KAAK,KAAK,SAAS;AAClC,UAAI,IAAI,QAAQ,iBAAiB;AAC7B,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B;AAEA,UAAI;AACA,cAAM,UAAU,aAAa;AAAA,UACzB,IAAI;AAAA,UACJ,IAAI,OAAO;AAAA,UACX,IAAI,OAAO;AAAA,QAAO;AAEtB,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,gBAAgB,OAAO,KAAK,KAAK,SAAS;AACtC,UAAI;AACA,YAAI,SAAS,MAAM,UAAU,aAAa;AAAA,UACtC,IAAI;AAAA,UACJ,IAAI,OAAO;AAAA,QAAG;AAElB,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,UACxB,QAAQ;AAAA,QACZ,CAAC;AAAA,MACL,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,EACJ;AACJ;",
  "names": []
}
