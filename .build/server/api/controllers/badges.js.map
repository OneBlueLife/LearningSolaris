{
  "version": 3,
  "sources": ["../../../../server/api/controllers/badges.ts"],
  "sourcesContent": ["import { DependencyContainer } from '../../services/types/DependencyContainer';\n\nexport default (container: DependencyContainer) => {\n    return {\n        listAll: async (req, res, next) => {\n            try {\n                const result = container.badgeService.listPurchasableBadges();\n                \n                return res.status(200).json(result);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listForUser: async (req, res, next) => {\n            try {\n                const result = await container.badgeService.listBadgesByUser(req.params.userId);\n                \n                return res.status(200).json(result);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        listForPlayer: async (req, res, next) => {\n            try {\n                const result = await container.badgeService.listBadgesByPlayer(req.game, req.params.playerId);\n                \n                return res.status(200).json(result);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        purchaseForUser: async (req, res, next) => {\n            try {\n                await container.badgeService.purchaseBadgeForUser(req.session.userId, req.params.userId, req.body.badgeKey);\n                \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        },\n        purchaseForPlayer: async (req, res, next) => {\n            try {\n                await container.badgeService.purchaseBadgeForPlayer(req.game, req.session.userId, req.params.playerId, req.body.badgeKey);\n                \n                return res.sendStatus(200);\n            } catch (err) {\n                return next(err);\n            }\n        }\n    }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,IAAO,iBAAQ,CAAC,cAAmC;AAC/C,SAAO;AAAA,IACH,SAAS,OAAO,KAAK,KAAK,SAAS;AAC/B,UAAI;AACA,cAAM,SAAS,UAAU,aAAa,sBAAsB;AAE5D,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,MAAM;AAAA,MACtC,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,aAAa,OAAO,KAAK,KAAK,SAAS;AACnC,UAAI;AACA,cAAM,SAAS,MAAM,UAAU,aAAa,iBAAiB,IAAI,OAAO,MAAM;AAE9E,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,MAAM;AAAA,MACtC,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,eAAe,OAAO,KAAK,KAAK,SAAS;AACrC,UAAI;AACA,cAAM,SAAS,MAAM,UAAU,aAAa,mBAAmB,IAAI,MAAM,IAAI,OAAO,QAAQ;AAE5F,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,MAAM;AAAA,MACtC,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,iBAAiB,OAAO,KAAK,KAAK,SAAS;AACvC,UAAI;AACA,cAAM,UAAU,aAAa,qBAAqB,IAAI,QAAQ,QAAQ,IAAI,OAAO,QAAQ,IAAI,KAAK,QAAQ;AAE1G,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,mBAAmB,OAAO,KAAK,KAAK,SAAS;AACzC,UAAI;AACA,cAAM,UAAU,aAAa,uBAAuB,IAAI,MAAM,IAAI,QAAQ,QAAQ,IAAI,OAAO,UAAU,IAAI,KAAK,QAAQ;AAExH,eAAO,IAAI,WAAW,GAAG;AAAA,MAC7B,SAAS,KAAP;AACE,eAAO,KAAK,GAAG;AAAA,MACnB;AAAA,IACJ;AAAA,EACJ;AACJ;",
  "names": []
}
