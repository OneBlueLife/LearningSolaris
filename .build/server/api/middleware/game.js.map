{
  "version": 3,
  "sources": ["../../../../server/api/middleware/game.ts"],
  "sourcesContent": ["import ValidationError from \"../../errors/validation\";\nimport { DependencyContainer } from \"../../services/types/DependencyContainer\";\n\nexport interface GameMiddleware {\n    loadGame: (options: GameLoadOptions) => (req: any, res: any, next: any) => Promise<any>;\n    validateGameState: (options: GameStateValidationOptions) => (req: any, res: any, next: any) => void;\n}\n\nexport interface GameLoadOptions {\n    lean: boolean;\n    settings?: boolean;\n    galaxy?: boolean;\n    conversations?: boolean;\n    state?: boolean;\n    constants?: boolean;\n    quitters?: boolean;\n    afkers?: boolean;\n    'galaxy.players'?: boolean;\n};\n\nexport interface GameStateValidationOptions {\n    isUnlocked?: boolean;\n    isInProgress?: boolean;\n    isStarted?: boolean;\n    isNotFinished?: boolean;\n};\n\nexport const middleware = (container: DependencyContainer): GameMiddleware => {\n    return {\n        loadGame: (options: GameLoadOptions) => {\n            return async (req, res, next) => {\n                try {\n                    if (req.params.gameId == null) {\n                        throw new ValidationError(`Game ID is required.`);\n                    }\n    \n                    let select = { };\n    \n                    for (const [key, value] of Object.entries(options)) {\n                        if (value || value == null) { // If undefined/null, assume it is wanted.\n                            select[key] = 1;\n                        }\n                    }\n    \n                    if (options.lean) {\n                        req.game = await container.gameService.getByIdLean(req.params.gameId, select);\n                    } else {\n                        req.game = await container.gameService.getById(req.params.gameId, select);\n                    }\n    \n                    if (!req.game) {\n                        throw new ValidationError('Game not found.', 404);\n                    }\n    \n                    next();\n                } catch (err) {\n                    next(err);\n                }\n            }\n        },\n        validateGameState: (options: GameStateValidationOptions) => {\n            return (req, res, next) => {\n                try {\n                    if (options.isUnlocked && container.gameStateService.isLocked(req.game)) {\n                        throw new ValidationError('You cannot perform this action, the game is locked by the system. Please try again.');\n                    }\n    \n                    if (options.isInProgress && !container.gameStateService.isInProgress(req.game)) {\n                        throw new ValidationError('You cannot perform this action, the game is not in progress.');\n                    }\n    \n                    if (options.isStarted && !container.gameStateService.isStarted(req.game)) {\n                        throw new ValidationError('You cannot perform this action, the game is not in progress.');\n                    }\n    \n                    if (options.isNotFinished && container.gameStateService.isFinished(req.game)) {\n                        throw new ValidationError('You cannot perform this action, the game is not in progress.');\n                    }\n    \n                    next();\n                } catch (err) {\n                    next(err);\n                }\n            };\n        }\n    }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA4B;AAkB3B;AAOA;AAEM,MAAM,aAAa,CAAC,cAAmD;AAC1E,SAAO;AAAA,IACH,UAAU,CAAC,YAA6B;AACpC,aAAO,OAAO,KAAK,KAAK,SAAS;AAC7B,YAAI;AACA,cAAI,IAAI,OAAO,UAAU,MAAM;AAC3B,kBAAM,IAAI,kBAAAA,QAAgB,sBAAsB;AAAA,UACpD;AAEA,cAAI,SAAS,CAAE;AAEf,qBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,OAAO,GAAG;AAChD,gBAAI,SAAS,SAAS,MAAM;AACxB,qBAAO,OAAO;AAAA,YAClB;AAAA,UACJ;AAEA,cAAI,QAAQ,MAAM;AACd,gBAAI,OAAO,MAAM,UAAU,YAAY,YAAY,IAAI,OAAO,QAAQ,MAAM;AAAA,UAChF,OAAO;AACH,gBAAI,OAAO,MAAM,UAAU,YAAY,QAAQ,IAAI,OAAO,QAAQ,MAAM;AAAA,UAC5E;AAEA,cAAI,CAAC,IAAI,MAAM;AACX,kBAAM,IAAI,kBAAAA,QAAgB,mBAAmB,GAAG;AAAA,UACpD;AAEA,eAAK;AAAA,QACT,SAAS,KAAP;AACE,eAAK,GAAG;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,mBAAmB,CAAC,YAAwC;AACxD,aAAO,CAAC,KAAK,KAAK,SAAS;AACvB,YAAI;AACA,cAAI,QAAQ,cAAc,UAAU,iBAAiB,SAAS,IAAI,IAAI,GAAG;AACrE,kBAAM,IAAI,kBAAAA,QAAgB,qFAAqF;AAAA,UACnH;AAEA,cAAI,QAAQ,gBAAgB,CAAC,UAAU,iBAAiB,aAAa,IAAI,IAAI,GAAG;AAC5E,kBAAM,IAAI,kBAAAA,QAAgB,8DAA8D;AAAA,UAC5F;AAEA,cAAI,QAAQ,aAAa,CAAC,UAAU,iBAAiB,UAAU,IAAI,IAAI,GAAG;AACtE,kBAAM,IAAI,kBAAAA,QAAgB,8DAA8D;AAAA,UAC5F;AAEA,cAAI,QAAQ,iBAAiB,UAAU,iBAAiB,WAAW,IAAI,IAAI,GAAG;AAC1E,kBAAM,IAAI,kBAAAA,QAAgB,8DAA8D;AAAA,UAC5F;AAEA,eAAK;AAAA,QACT,SAAS,KAAP;AACE,eAAK,GAAG;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;",
  "names": ["ValidationError"]
}
