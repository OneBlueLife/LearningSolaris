{
  "version": 3,
  "sources": ["../../../../server/api/middleware/auth.ts"],
  "sourcesContent": ["import ValidationError from '../../errors/validation';\nimport { DependencyContainer } from '../../services/types/DependencyContainer';\n\nexport interface AuthMiddleware {\n    authenticate: (options?: AuthenticationOptions | undefined) => (req: any, res: any, next: any) => Promise<any>;\n}\n\nexport interface AuthenticationOptions {\n    admin?: boolean;\n    subAdmin?: boolean;\n    communityManager?: boolean;\n};\n\nexport const middleware = (container: DependencyContainer): AuthMiddleware => {\n    return {\n        authenticate: (options?: AuthenticationOptions) => {\n            return async (req, res, next) => {\n                try {\n                    if (!req.session.userId) {\n                        return res.sendStatus(401);\n                    }\n    \n                    // General Auth\n                    let isBanned = await container.userService.getUserIsBanned(req.session.userId);\n    \n                    if (isBanned && !req.session.isImpersonating) {\n                        throw new ValidationError(`The account is banned.`, 401);\n                    }\n    \n                    if (!req.session.isImpersonating) {\n                        await container.userService.updateLastSeen(req.session.userId, req.headers['x-forwarded-for'] || req.connection.remoteAddress);\n                    }\n    \n                    // Role based authorisation\n                    if (options) {\n                        if (options.admin) {\n                            let isAdmin = await container.userService.getUserIsAdmin(req.session.userId);\n            \n                            if (!isAdmin) {\n                                throw new ValidationError(`The account is not an administrator.`, 401);\n                            }\n                        }\n    \n                        if (options.subAdmin) {\n                            let isSubAdmin = await container.userService.getUserIsSubAdmin(req.session.userId);\n    \n                            if (!isSubAdmin) {\n                                throw new ValidationError(`The account is not a sub administrator.`, 401);\n                            }\n                        }\n    \n                        if (options.communityManager) {\n                            let isCommunityManager = await container.userService.getUserIsCommunityManager(req.session.userId);\n    \n                            if (!isCommunityManager) {\n                                throw new ValidationError(`The account is not a community manager.`, 401);\n                            }\n                        }\n                    }\n    \n                    next();\n                } catch(err) {\n                    next(err);\n                }\n            };\n        }\n    };\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA4B;AAW3B;AAEM,MAAM,aAAa,CAAC,cAAmD;AAC1E,SAAO;AAAA,IACH,cAAc,CAAC,YAAoC;AAC/C,aAAO,OAAO,KAAK,KAAK,SAAS;AAC7B,YAAI;AACA,cAAI,CAAC,IAAI,QAAQ,QAAQ;AACrB,mBAAO,IAAI,WAAW,GAAG;AAAA,UAC7B;AAGA,cAAI,WAAW,MAAM,UAAU,YAAY,gBAAgB,IAAI,QAAQ,MAAM;AAE7E,cAAI,YAAY,CAAC,IAAI,QAAQ,iBAAiB;AAC1C,kBAAM,IAAI,kBAAAA,QAAgB,0BAA0B,GAAG;AAAA,UAC3D;AAEA,cAAI,CAAC,IAAI,QAAQ,iBAAiB;AAC9B,kBAAM,UAAU,YAAY,eAAe,IAAI,QAAQ,QAAQ,IAAI,QAAQ,sBAAsB,IAAI,WAAW,aAAa;AAAA,UACjI;AAGA,cAAI,SAAS;AACT,gBAAI,QAAQ,OAAO;AACf,kBAAI,UAAU,MAAM,UAAU,YAAY,eAAe,IAAI,QAAQ,MAAM;AAE3E,kBAAI,CAAC,SAAS;AACV,sBAAM,IAAI,kBAAAA,QAAgB,wCAAwC,GAAG;AAAA,cACzE;AAAA,YACJ;AAEA,gBAAI,QAAQ,UAAU;AAClB,kBAAI,aAAa,MAAM,UAAU,YAAY,kBAAkB,IAAI,QAAQ,MAAM;AAEjF,kBAAI,CAAC,YAAY;AACb,sBAAM,IAAI,kBAAAA,QAAgB,2CAA2C,GAAG;AAAA,cAC5E;AAAA,YACJ;AAEA,gBAAI,QAAQ,kBAAkB;AAC1B,kBAAI,qBAAqB,MAAM,UAAU,YAAY,0BAA0B,IAAI,QAAQ,MAAM;AAEjG,kBAAI,CAAC,oBAAoB;AACrB,sBAAM,IAAI,kBAAAA,QAAgB,2CAA2C,GAAG;AAAA,cAC5E;AAAA,YACJ;AAAA,UACJ;AAEA,eAAK;AAAA,QACT,SAAQ,KAAN;AACE,eAAK,GAAG;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;",
  "names": ["ValidationError"]
}
