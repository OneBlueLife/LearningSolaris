{
  "version": 3,
  "sources": ["../../../server/api/express.ts"],
  "sourcesContent": ["const express = require('express');\nconst router = express.Router();\nconst session = require('express-session');\nconst compression = require('compression');\nconst rateLimit = require(\"express-rate-limit\");\nconst MongoDBStore = require('connect-mongodb-session')(session);\n\nimport registerRoutes from './routes';\nimport { DependencyContainer } from '../services/types/DependencyContainer';\nimport { Config } from '../config/types/Config';\n\nexport default async (config: Config, app, container: DependencyContainer) => {\n\n    app.use(require('body-parser').json({\n        limit: '1000kb' // Note: This allows large custom galaxies to be uploaded.\n    }));\n\n    // ---------------\n    // Set up MongoDB session store\n    let store = new MongoDBStore({\n        uri: config.connectionString,\n        collection: 'sessions'\n    });\n\n    // Catch session store errors\n    store.on('error', function(err) {\n        console.error(err);\n    });\n\n    // ---------------\n    // Use sessions for tracking logins\n    app.use(session({\n        secret: config.sessionSecret,\n        resave: false,\n        saveUninitialized: false,\n        cookie: { \n            secure: config.sessionSecureCookies, // Requires HTTPS\n            maxAge: 1000 * 60 * 60 * 24 * 365 // 1 Year\n        },\n        store\n    }));\n\n    // ---------------\n    // Enable CORS\n    app.use((req, res, next) => {\n        res.header(\"Access-Control-Allow-Origin\", config.clientUrl);\n        res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n        res.header('Access-Control-Allow-Headers', 'Content-Type');\n        res.header('Access-Control-Allow-Credentials', 'true');\n        res.header('Access-Control-Allow-Methods', 'POST, PUT, PATCH, GET, DELETE, OPTIONS');\n        next();\n    });\n\n    // ---------------\n    // Rate limiting\n    app.set('trust proxy', 1); // NOTE: App is behind a proxy in production so this is required.\n    \n    const limiter = rateLimit({\n        windowMs: 1000, // 1 second\n        max: 10 // limit each IP to X requests per windowMs\n    });\n    \n    //  apply to all requests\n    app.use(limiter);\n\n    // compress all responses\n    app.use(compression({\n        threshold: 0,\n        filter: (req, res) => {\n            if (req.headers['x-no-compression']) {\n                // don't compress responses if this request header is present\n                return false;\n            }\n        \n            // fallback to standard compression\n            return compression.filter(req, res);\n        }\n    }));\n\n    // ---------------\n    // Register routes\n\n    registerRoutes(router, container);\n\n    app.use(router);\n\n    console.log('Express intialized.');\n    \n    return app;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,oBAA2B;AAP3B,MAAM,UAAU,QAAQ,SAAS;AACjC,MAAM,SAAS,QAAQ,OAAO;AAC9B,MAAM,UAAU,QAAQ,iBAAiB;AACzC,MAAM,cAAc,QAAQ,aAAa;AACzC,MAAM,YAAY,QAAQ,oBAAoB;AAC9C,MAAM,eAAe,QAAQ,yBAAyB,EAAE,OAAO;AAM/D,IAAO,kBAAQ,OAAO,QAAgB,KAAK,cAAmC;AAE1E,MAAI,IAAI,QAAQ,aAAa,EAAE,KAAK;AAAA,IAChC,OAAO;AAAA,EACX,CAAC,CAAC;AAIF,MAAI,QAAQ,IAAI,aAAa;AAAA,IACzB,KAAK,OAAO;AAAA,IACZ,YAAY;AAAA,EAChB,CAAC;AAGD,QAAM,GAAG,SAAS,SAAS,KAAK;AAC5B,YAAQ,MAAM,GAAG;AAAA,EACrB,CAAC;AAID,MAAI,IAAI,QAAQ;AAAA,IACZ,QAAQ,OAAO;AAAA,IACf,QAAQ;AAAA,IACR,mBAAmB;AAAA,IACnB,QAAQ;AAAA,MACJ,QAAQ,OAAO;AAAA,MACf,QAAQ,MAAO,KAAK,KAAK,KAAK;AAAA,IAClC;AAAA,IACA;AAAA,EACJ,CAAC,CAAC;AAIF,MAAI,IAAI,CAAC,KAAK,KAAK,SAAS;AACxB,QAAI,OAAO,+BAA+B,OAAO,SAAS;AAC1D,QAAI,OAAO,gCAAgC,gDAAgD;AAC3F,QAAI,OAAO,gCAAgC,cAAc;AACzD,QAAI,OAAO,oCAAoC,MAAM;AACrD,QAAI,OAAO,gCAAgC,wCAAwC;AACnF,SAAK;AAAA,EACT,CAAC;AAID,MAAI,IAAI,eAAe,CAAC;AAExB,QAAM,UAAU,UAAU;AAAA,IACtB,UAAU;AAAA,IACV,KAAK;AAAA,EACT,CAAC;AAGD,MAAI,IAAI,OAAO;AAGf,MAAI,IAAI,YAAY;AAAA,IAChB,WAAW;AAAA,IACX,QAAQ,CAAC,KAAK,QAAQ;AAClB,UAAI,IAAI,QAAQ,qBAAqB;AAEjC,eAAO;AAAA,MACX;AAGA,aAAO,YAAY,OAAO,KAAK,GAAG;AAAA,IACtC;AAAA,EACJ,CAAC,CAAC;AAKF,oBAAAA,SAAe,QAAQ,SAAS;AAEhC,MAAI,IAAI,MAAM;AAEd,UAAQ,IAAI,qBAAqB;AAEjC,SAAO;AACX;",
  "names": ["registerRoutes"]
}
