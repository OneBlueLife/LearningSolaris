{
  "version": 3,
  "sources": ["../../../../server/api/routes/index.ts"],
  "sourcesContent": ["import { Router } from \"express\";\nimport { createValidator } from \"express-joi-validation\";\nimport { DependencyContainer } from \"../../services/types/DependencyContainer\";\nimport Middleware from '../middleware';\n\nimport registerAdminRoutes from './admin';\nimport registerAuthRoutes from './auth';\nimport registerBadgeRoutes from './badges';\nimport registerCarrierRoutes from './carrier';\nimport registerConversationRoutes from './conversations';\nimport registerDiplomacyRoutes from './diplomacy';\nimport registerEventRoutes from './events';\nimport registerGameRoutes from './games';\nimport registerGuildRoutes from './guilds';\nimport registerLedgerRoutes from './ledger';\nimport registerReportRoutes from './report';\nimport registerResearchRoutes from './research';\nimport registerShopRoutes from './shop';\nimport registerSpecialistRoutes from './specialist';\nimport registerStarRoutes from './star';\nimport registerTradeRoutes from './trade';\nimport registerUserRoutes from './user';\nimport registerSpectatorRoutes from './spectator';\n\nexport default (router: Router, container: DependencyContainer) => {\n    const middleware = Middleware(container);\n    const validator = createValidator({ passError: true });\n\n    registerAdminRoutes(router, middleware, validator, container);\n    registerAuthRoutes(router, middleware, validator, container);\n    registerBadgeRoutes(router, middleware, validator, container);\n    registerCarrierRoutes(router, middleware, validator, container);\n    registerConversationRoutes(router, middleware, validator, container);\n    registerDiplomacyRoutes(router, middleware, validator, container);\n    registerEventRoutes(router, middleware, validator, container);\n    registerGameRoutes(router, middleware, validator, container);\n    registerGuildRoutes(router, middleware, validator, container);\n    registerLedgerRoutes(router, middleware, validator, container);\n    registerReportRoutes(router, middleware, validator, container);\n    registerResearchRoutes(router, middleware, validator, container);\n    registerShopRoutes(router, middleware, validator, container);\n    registerSpecialistRoutes(router, middleware, validator, container);\n    registerStarRoutes(router, middleware, validator, container);\n    registerTradeRoutes(router, middleware, validator, container);\n    registerUserRoutes(router, middleware, validator, container);\n    registerSpectatorRoutes(router, middleware, validator, container);\n\n    return router;\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oCAAgC;AAEhC,wBAAuB;AAEvB,mBAAgC;AAChC,kBAA+B;AAC/B,oBAAgC;AAChC,qBAAkC;AAClC,2BAAuC;AACvC,uBAAoC;AACpC,oBAAgC;AAChC,mBAA+B;AAC/B,oBAAgC;AAChC,oBAAiC;AACjC,oBAAiC;AACjC,sBAAmC;AACnC,kBAA+B;AAC/B,wBAAqC;AACrC,kBAA+B;AAC/B,mBAAgC;AAChC,kBAA+B;AAC/B,uBAAoC;AAEpC,IAAO,iBAAQ,CAAC,QAAgB,cAAmC;AAC/D,QAAM,iBAAa,kBAAAA,SAAW,SAAS;AACvC,QAAM,gBAAY,+CAAgB,EAAE,WAAW,KAAK,CAAC;AAErD,mBAAAC,SAAoB,QAAQ,YAAY,WAAW,SAAS;AAC5D,kBAAAC,SAAmB,QAAQ,YAAY,WAAW,SAAS;AAC3D,oBAAAC,SAAoB,QAAQ,YAAY,WAAW,SAAS;AAC5D,qBAAAC,SAAsB,QAAQ,YAAY,WAAW,SAAS;AAC9D,2BAAAC,SAA2B,QAAQ,YAAY,WAAW,SAAS;AACnE,uBAAAC,SAAwB,QAAQ,YAAY,WAAW,SAAS;AAChE,oBAAAC,SAAoB,QAAQ,YAAY,WAAW,SAAS;AAC5D,mBAAAC,SAAmB,QAAQ,YAAY,WAAW,SAAS;AAC3D,oBAAAC,SAAoB,QAAQ,YAAY,WAAW,SAAS;AAC5D,oBAAAC,SAAqB,QAAQ,YAAY,WAAW,SAAS;AAC7D,oBAAAC,SAAqB,QAAQ,YAAY,WAAW,SAAS;AAC7D,sBAAAC,SAAuB,QAAQ,YAAY,WAAW,SAAS;AAC/D,kBAAAC,SAAmB,QAAQ,YAAY,WAAW,SAAS;AAC3D,wBAAAC,SAAyB,QAAQ,YAAY,WAAW,SAAS;AACjE,kBAAAC,SAAmB,QAAQ,YAAY,WAAW,SAAS;AAC3D,mBAAAC,SAAoB,QAAQ,YAAY,WAAW,SAAS;AAC5D,kBAAAC,SAAmB,QAAQ,YAAY,WAAW,SAAS;AAC3D,uBAAAC,SAAwB,QAAQ,YAAY,WAAW,SAAS;AAEhE,SAAO;AACX;",
  "names": ["Middleware", "registerAdminRoutes", "registerAuthRoutes", "registerBadgeRoutes", "registerCarrierRoutes", "registerConversationRoutes", "registerDiplomacyRoutes", "registerEventRoutes", "registerGameRoutes", "registerGuildRoutes", "registerLedgerRoutes", "registerReportRoutes", "registerResearchRoutes", "registerShopRoutes", "registerSpecialistRoutes", "registerStarRoutes", "registerTradeRoutes", "registerUserRoutes", "registerSpectatorRoutes"]
}
