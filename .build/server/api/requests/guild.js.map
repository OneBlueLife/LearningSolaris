{
  "version": 3,
  "sources": ["../../../../server/api/requests/guild.ts"],
  "sourcesContent": ["import ValidationError from \"../../errors/validation\";\nimport { keyHasStringValue } from \"./helpers\";\n\nexport interface GuildCreateGuildRequest {\n    name: string;\n    tag: string;\n};\n\nexport const mapToGuildCreateGuildRequest = (body: any): GuildCreateGuildRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'name')) {\n        errors.push('Name is required.');\n    }\n\n    if (!keyHasStringValue(body, 'tag')) {\n        errors.push('Tag is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        name: body.name,\n        tag: body.tag\n    }\n};\n\nexport interface GuildRenameGuildRequest {\n    name: string;\n    tag: string;\n};\n\nexport const mapToGuildRenameGuildRequest = (body: any): GuildRenameGuildRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'name')) {\n        errors.push('Name is required.');\n    }\n\n    if (!keyHasStringValue(body, 'tag')) {\n        errors.push('Tag is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        name: body.name,\n        tag: body.tag\n    }\n};\n\nexport interface GuildInviteUserRequest {\n    username: string;\n};\n\nexport const mapToGuildInviteUserRequest = (body: any): GuildInviteUserRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'username')) {\n        errors.push('Username is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n    \n    return {\n        username: body.username\n    }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA4B;AAC5B,qBAAkC;AAKjC;AAEM,MAAM,+BAA+B,CAAC,SAAuC;AAChF,MAAI,SAAmB,CAAC;AAExB,MAAI,KAAC,kCAAkB,MAAM,MAAM,GAAG;AAClC,WAAO,KAAK,mBAAmB;AAAA,EACnC;AAEA,MAAI,KAAC,kCAAkB,MAAM,KAAK,GAAG;AACjC,WAAO,KAAK,kBAAkB;AAAA,EAClC;AAEA,MAAI,OAAO,QAAQ;AACf,UAAM,IAAI,kBAAAA,QAAgB,MAAM;AAAA,EACpC;AAEA,SAAO;AAAA,IACH,MAAM,KAAK;AAAA,IACX,KAAK,KAAK;AAAA,EACd;AACJ;AAKC;AAEM,MAAM,+BAA+B,CAAC,SAAuC;AAChF,MAAI,SAAmB,CAAC;AAExB,MAAI,KAAC,kCAAkB,MAAM,MAAM,GAAG;AAClC,WAAO,KAAK,mBAAmB;AAAA,EACnC;AAEA,MAAI,KAAC,kCAAkB,MAAM,KAAK,GAAG;AACjC,WAAO,KAAK,kBAAkB;AAAA,EAClC;AAEA,MAAI,OAAO,QAAQ;AACf,UAAM,IAAI,kBAAAA,QAAgB,MAAM;AAAA,EACpC;AAEA,SAAO;AAAA,IACH,MAAM,KAAK;AAAA,IACX,KAAK,KAAK;AAAA,EACd;AACJ;AAIC;AAEM,MAAM,8BAA8B,CAAC,SAAsC;AAC9E,MAAI,SAAmB,CAAC;AAExB,MAAI,KAAC,kCAAkB,MAAM,UAAU,GAAG;AACtC,WAAO,KAAK,uBAAuB;AAAA,EACvC;AAEA,MAAI,OAAO,QAAQ;AACf,UAAM,IAAI,kBAAAA,QAAgB,MAAM;AAAA,EACpC;AAEA,SAAO;AAAA,IACH,UAAU,KAAK;AAAA,EACnB;AACJ;",
  "names": ["ValidationError"]
}
