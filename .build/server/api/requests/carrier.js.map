{
  "version": 3,
  "sources": ["../../../../server/api/requests/carrier.ts"],
  "sourcesContent": ["import ValidationError from \"../../errors/validation\";\nimport { CarrierWaypointActionType } from \"../../services/types/CarrierWaypoint\";\nimport { DBObjectId } from \"../../services/types/DBObjectId\";\nimport { keyHasArrayValue, keyHasBooleanValue, keyHasNumberValue, keyHasObjectValue, keyHasStringValue } from \"./helpers\";\n\nexport interface CarrierSaveWaypointsRequest {\n    waypoints: [\n        {\n            source: DBObjectId;\n            destination: DBObjectId;\n            action: CarrierWaypointActionType;\n            actionShips: number;\n            delayTicks: number;\n        }\n    ];\n    looped: boolean;\n};\n\nexport const mapToCarrierSaveWaypointsRequest = (body: any): CarrierSaveWaypointsRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasBooleanValue(body, 'looped')) {\n        errors.push('Looped is required.');\n    }\n\n    if (!keyHasArrayValue(body, 'waypoints')) {\n        errors.push('Waypoints is required.');\n    }\n\n    if (body.waypoints) {\n        for (let waypoint of body.waypoints) {\n            if (!keyHasStringValue(waypoint, 'source')) {\n                errors.push('Source is required.');\n            }\n\n            if (!keyHasStringValue(waypoint, 'destination')) {\n                errors.push('Destination is required.');\n            }\n\n            if (!keyHasStringValue(waypoint, 'action')) {\n                errors.push('Action is required.');\n            }\n\nif (waypoint.actionShips == null) waypoint.actionShips = 0;\nif (waypoint.delayTicks == null) waypoint.delayTicks = 0;\n\n            if (!keyHasNumberValue(waypoint, 'actionShips')) {\n                errors.push('Action Ships is required.');\n            }\n\n            if (!keyHasNumberValue(waypoint, 'delayTicks')) {\n                errors.push('Delay Ticks is required.');\n            }\n\n            waypoint.actionShips = +waypoint.actionShips;\n            waypoint.delayTicks = +waypoint.delayTicks;\n        }\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        waypoints: body.waypoints,\n        looped: body.looped\n    }\n};\n\nexport interface CarrierLoopWaypointsRequest {\n    loop: boolean;\n};\n\nexport const mapToCarrierLoopWaypointsRequest = (body: any): CarrierLoopWaypointsRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasBooleanValue(body, 'loop')) {\n        errors.push('Loop is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        loop: body.loop\n    }\n};\n\nexport interface CarrierTransferShipsRequest {\n    carrierShips: number;\n    starShips: number;\n    starId: DBObjectId;\n};\n\nexport const mapToCarrierTransferShipsRequest = (body: any): CarrierTransferShipsRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasNumberValue(body, 'carrierShips')) {\n        errors.push('Carrier Ships is required.');\n    }\n\n    if (!keyHasNumberValue(body, 'starShips')) {\n        errors.push('Star Ships is required.');\n    }\n\n    if (!keyHasStringValue(body, 'starId')) {\n        errors.push('Star ID is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    body.starShips = +body.starShips;\n\n    return {\n        carrierShips: body.carrierShips,\n        starShips: body.starShips,\n        starId: body.starId\n    }\n};\n\nexport interface CarrierRenameCarrierRequest {\n    name: string;\n};\n\nexport const mapToCarrierRenameCarrierRequest = (body: any): CarrierRenameCarrierRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'name')) {\n        errors.push('Name is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        name: body.name\n    }\n};\n\nexport interface CarrierCalculateCombatRequest {\n    defender: {\n        ships: number;\n        weaponsLevel: number;\n    },\n    attacker: {\n        ships: number;\n        weaponsLevel: number;\n    },\n    isTurnBased: boolean;\n};\n\nexport const mapToCarrierCalculateCombatRequest = (body: any): CarrierCalculateCombatRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasBooleanValue(body, 'isTurnBased')) {\n        errors.push('Is Turn Based is required.');\n    }\n\n    if (!keyHasObjectValue(body, 'defender')) {\n        errors.push('Defender is required.');\n    }\n\n    if (body.defender) {\n        if (!keyHasNumberValue(body.defender, 'ships')) {\n            errors.push('Defender Ships is required.');\n        }\n        \n        if (body.defender.ships != null && +body.defender.ships < 0) {\n            errors.push('Defender Ships must be greater than or equal to 0.');\n        }\n\n        if (body.defender.ships != null && +body.defender.ships % 1 != 0) {\n            errors.push('Defender Ships must be an integer.');\n        }\n\n        if (!keyHasNumberValue(body.defender, 'weaponsLevel')) {\n            errors.push('Defender Weapons Level is required.');\n        }\n\n        if (body.defender.weaponsLevel != null && +body.defender.weaponsLevel <= 0) {\n            errors.push('Defender Weapons Level must be greater than 0.');\n        }\n\n        if (body.defender.weaponsLevel != null && +body.defender.weaponsLevel % 1 != 0) {\n            errors.push('Defender Weapons Level must be an integer.');\n        }\n\n        body.defender.ships = +body.defender.ships;\n        body.defender.weaponsLevel = +body.defender.weaponsLevel;\n    }\n\n    if (!keyHasObjectValue(body, 'attacker')) {\n        errors.push('Attacker is required.');\n    }\n\n    if (body.attacker) {\n        if (!keyHasNumberValue(body.attacker, 'ships')) {\n            errors.push('Attacker Ships is required.');\n        }\n        \n        if (body.attacker.ships != null && +body.attacker.ships < 0) {\n            errors.push('Attacker Ships must be greater than or equal to 0.');\n        }\n\n        if (body.attacker.ships != null && +body.attacker.ships % 1 != 0) {\n            errors.push('Attacker Ships must be an integer.');\n        }\n\n        if (!keyHasNumberValue(body.attacker, 'weaponsLevel')) {\n            errors.push('Attacker Weapons Level is required.');\n        }\n\n        if (body.attacker.weaponsLevel != null && +body.attacker.weaponsLevel <= 0) {\n            errors.push('Attacker Weapons Level must be greater than 0.');\n        }\n\n        if (body.attacker.weaponsLevel != null && +body.attacker.weaponsLevel % 1 != 0) {\n            errors.push('Attacker Weapons Level must be an integer.');\n        }\n\n        body.attacker.ships = +body.attacker.ships;\n        body.attacker.weaponsLevel = +body.attacker.weaponsLevel;\n    }\n    \n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        defender: body.defender,\n        attacker: body.attacker,\n        isTurnBased: body.isTurnBased\n    }\n};\n"],
  "mappings": "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",
  "names": ["ValidationError"]
}
