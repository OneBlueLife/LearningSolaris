{
  "version": 3,
  "sources": ["../../../../server/api/requests/trade.ts"],
  "sourcesContent": ["import ValidationError from \"../../errors/validation\";\nimport { DBObjectId } from \"../../services/types/DBObjectId\";\nimport { ResearchTypeNotRandom } from \"../../services/types/Player\";\nimport { keyHasNumberValue, keyHasStringValue } from \"./helpers\";\n\nexport interface TradeSendToPlayerRequest {\n    toPlayerId: DBObjectId;\n    amount: number;\n};\n\nexport const mapToTradeSendToPlayerRequest = (body: any, userId: any): TradeSendToPlayerRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'toPlayerId')) {\n        errors.push('To Player ID is required.');\n    }\n\n    if (body.toPlayerId && userId === body.toPlayerId) {\n        errors.push('Cannot trade with yourself.');\n    }\n    \n    if (!keyHasNumberValue(body, 'amount')) {\n        errors.push('amount is required.');\n    }\n    \n    if (body.amount != null && +body.amount <= 0) {\n        errors.push('amount must be greater than 0.');\n    }\n\n    if (body.amount != null && +body.amount % 1 != 0) {\n        errors.push('amount must be an integer.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    body.amount = +body.amount;\n\n    return {\n        toPlayerId: body.toPlayerId,\n        amount: body.amount\n    }\n};\n\nexport interface TradeSendTechnologyToPlayerRequest {\n    toPlayerId: DBObjectId;\n    technology: ResearchTypeNotRandom;\n    level: number;\n};\n\nexport const mapToTradeSendTechnologyToPlayerRequest = (body: any): TradeSendTechnologyToPlayerRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'toPlayerId')) {\n        errors.push('To Player Id is required.');\n    }\n\n    if (!keyHasStringValue(body, 'technology')) {\n        errors.push('Technology is required.');\n    }\n\n    if (!keyHasNumberValue(body, 'level')) {\n        errors.push('Level is required.');\n    }\n    \n    if (body.level != null && body.level <= 0) {\n        errors.push('Level must be greater than 0.');\n    }\n\n    if (body.level != null && +body.level % 1 != 0) {\n        errors.push('level must be an integer.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    body.level = +body.level;\n\n    return {\n        toPlayerId: body.toPlayerId,\n        technology: body.technology,\n        level: body.level\n    }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA4B;AAG5B,qBAAqD;AAKpD;AAEM,MAAM,gCAAgC,CAAC,MAAW,WAA0C;AAC/F,MAAI,SAAmB,CAAC;AAExB,MAAI,KAAC,kCAAkB,MAAM,YAAY,GAAG;AACxC,WAAO,KAAK,2BAA2B;AAAA,EAC3C;AAEA,MAAI,KAAK,cAAc,WAAW,KAAK,YAAY;AAC/C,WAAO,KAAK,6BAA6B;AAAA,EAC7C;AAEA,MAAI,KAAC,kCAAkB,MAAM,QAAQ,GAAG;AACpC,WAAO,KAAK,qBAAqB;AAAA,EACrC;AAEA,MAAI,KAAK,UAAU,QAAQ,CAAC,KAAK,UAAU,GAAG;AAC1C,WAAO,KAAK,gCAAgC;AAAA,EAChD;AAEA,MAAI,KAAK,UAAU,QAAQ,CAAC,KAAK,SAAS,KAAK,GAAG;AAC9C,WAAO,KAAK,4BAA4B;AAAA,EAC5C;AAEA,MAAI,OAAO,QAAQ;AACf,UAAM,IAAI,kBAAAA,QAAgB,MAAM;AAAA,EACpC;AAEA,OAAK,SAAS,CAAC,KAAK;AAEpB,SAAO;AAAA,IACH,YAAY,KAAK;AAAA,IACjB,QAAQ,KAAK;AAAA,EACjB;AACJ;AAMC;AAEM,MAAM,0CAA0C,CAAC,SAAkD;AACtG,MAAI,SAAmB,CAAC;AAExB,MAAI,KAAC,kCAAkB,MAAM,YAAY,GAAG;AACxC,WAAO,KAAK,2BAA2B;AAAA,EAC3C;AAEA,MAAI,KAAC,kCAAkB,MAAM,YAAY,GAAG;AACxC,WAAO,KAAK,yBAAyB;AAAA,EACzC;AAEA,MAAI,KAAC,kCAAkB,MAAM,OAAO,GAAG;AACnC,WAAO,KAAK,oBAAoB;AAAA,EACpC;AAEA,MAAI,KAAK,SAAS,QAAQ,KAAK,SAAS,GAAG;AACvC,WAAO,KAAK,+BAA+B;AAAA,EAC/C;AAEA,MAAI,KAAK,SAAS,QAAQ,CAAC,KAAK,QAAQ,KAAK,GAAG;AAC5C,WAAO,KAAK,2BAA2B;AAAA,EAC3C;AAEA,MAAI,OAAO,QAAQ;AACf,UAAM,IAAI,kBAAAA,QAAgB,MAAM;AAAA,EACpC;AAEA,OAAK,QAAQ,CAAC,KAAK;AAEnB,SAAO;AAAA,IACH,YAAY,KAAK;AAAA,IACjB,YAAY,KAAK;AAAA,IACjB,OAAO,KAAK;AAAA,EAChB;AACJ;",
  "names": ["ValidationError"]
}
