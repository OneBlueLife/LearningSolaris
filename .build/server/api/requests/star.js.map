{
  "version": 3,
  "sources": ["../../../../server/api/requests/star.ts"],
  "sourcesContent": ["import ValidationError from \"../../errors/validation\";\nimport { DBObjectId } from \"../../services/types/DBObjectId\";\nimport { InfrastructureType } from \"../../services/types/Star\";\nimport { keyHasBooleanValue, keyHasNumberValue, keyHasStringValue } from \"./helpers\";\n\nexport interface StarUpgradeInfrastructureRequest {\n    starId: DBObjectId;\n};\n\nexport const mapToStarUpgradeInfrastructureRequest = (body: any): StarUpgradeInfrastructureRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'starId')) {\n        errors.push('Star ID is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        starId: body.starId\n    }\n};\n\nexport interface StarUpgradeInfrastructureBulkRequest {\n    upgradeStrategy: string;\n    infrastructure: InfrastructureType;\n    amount: number;\n};\n\nexport const mapToStarUpgradeInfrastructureBulkRequest = (body: any): StarUpgradeInfrastructureBulkRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'upgradeStrategy')) {\n        errors.push('Upgrade Strategy is required.');\n    }\n\n    if (!keyHasStringValue(body, 'infrastructure')) {\n        errors.push('Infrastructure is required.');\n    }\n\n    if (!keyHasNumberValue(body, 'amount')) {\n        errors.push('Amount is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    body.amount = +body.amount;\n\n    return {\n        upgradeStrategy: body.upgradeStrategy,\n        infrastructure: body.infrastructure,\n        amount: body.amount\n    }\n};\n\nexport interface StarDestroyInfrastructureRequest {\n    starId: DBObjectId;\n};\n\nexport const mapToStarDestroyInfrastructureRequest = (body: any): StarDestroyInfrastructureRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'starId')) {\n        errors.push('Star ID is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        starId: body.starId\n    }\n};\n\nexport interface StarBuildCarrierRequest {\n    starId: DBObjectId;\n    ships: number;\n};\n\nexport const mapToStarBuildCarrierRequest = (body: any): StarBuildCarrierRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'starId')) {\n        errors.push('Star ID is required.');\n    }\n\n    if (!keyHasNumberValue(body, 'ships')) {\n        errors.push('Ships is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    let ships = 1;\n                \n    if (body.ships) {\n        ships = +body.ships;\n    }\n\n    return {\n        starId: body.starId,\n        ships\n    }\n};\n\nexport interface StarAbandonStarRequest {\n    starId: DBObjectId;\n};\n\nexport const mapToStarAbandonStarRequest = (body: any): StarAbandonStarRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'starId')) {\n        errors.push('Star ID is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        starId: body.starId\n    }\n};\n\nexport interface StarToggleBulkIgnoreStatusRequest {\n    starId: DBObjectId;\n    infrastructureType: InfrastructureType;\n};\n\nexport const mapToStarToggleBulkIgnoreStatusRequest = (body: any): StarToggleBulkIgnoreStatusRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'starId')) {\n        errors.push('Star ID is required.');\n    }\n\n    if (!keyHasStringValue(body, 'infrastructureType')) {\n        errors.push('Infrastructure Type is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        starId: body.starId,\n        infrastructureType: body.infrastructureType\n    }\n};\n\nexport interface StarSetBulkIgnoreAllStatusRequest {\n    starId: DBObjectId;\n    ignoreStatus: boolean;\n};\n\nexport const mapToStarSetBulkIgnoreAllStatusRequest = (body: any): StarSetBulkIgnoreAllStatusRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'starId')) {\n        errors.push('Star ID is required.');\n    }\n\n    if (!keyHasBooleanValue(body, 'ignoreStatus')) {\n        errors.push('Ignore Status is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        starId: body.starId,\n        ignoreStatus: body.ignoreStatus\n    }\n};\n"],
  "mappings": "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",
  "names": ["ValidationError"]
}
