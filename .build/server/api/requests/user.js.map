{
  "version": 3,
  "sources": ["../../../../server/api/requests/user.ts"],
  "sourcesContent": ["import ValidationError from \"../../errors/validation\";\nimport { keyHasBooleanValue, keyHasStringValue } from \"./helpers\";\n\nexport interface UserCreateUserRequest {\n    email: string;\n    username: string;\n    password: string;\n    recaptchaToken?: string | null;\n};\n\nexport const mapToUserCreateUserRequest = (body: any, recaptchaEnabled: boolean): UserCreateUserRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'email')) {\n        errors.push('Email is required.');\n    }\n\n    if (!keyHasStringValue(body, 'username')) {\n        errors.push('Username is required.');\n    }\n\n    if (!keyHasStringValue(body, 'password')) {\n        errors.push('Password is required.');\n    }\n\n    if (recaptchaEnabled && !keyHasStringValue(body, 'recaptchaToken')) {\n        errors.push('Recaptcha Token is required');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        email: body.email,\n        username: body.username,\n        password: body.password,\n        recaptchaToken: body.recaptchaToken\n    }\n};\n\nexport interface UserUpdateEmailPreferenceRequest {\n    enabled: boolean;\n};\n\nexport const mapToUserUpdateEmailPreferenceRequest = (body: any): UserUpdateEmailPreferenceRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasBooleanValue(body, 'enabled')) {\n        errors.push('Enabled is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        enabled: body.enabled\n    }\n};\n\nexport interface UserUpdateUsernameRequest {\n    username: string;\n};\n\nexport const mapToUserUpdateUsernameRequest = (body: any): UserUpdateUsernameRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'username')) {\n        errors.push('Username is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        username: body.username\n    }\n};\n\nexport interface UserUpdateEmailRequest {\n    email: string;\n};\n\nexport const mapToUserUpdateEmailRequest = (body: any): UserUpdateEmailRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'email')) {\n        errors.push('Email is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        email: body.email\n    }\n};\n\nexport interface UserUpdatePasswordRequest {\n    currentPassword: string;\n    newPassword: string;\n};\n\nexport const mapToUserUpdatePasswordRequest = (body: any): UserUpdatePasswordRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'currentPassword')) {\n        errors.push('Current Password is required.');\n    }\n\n    if (!keyHasStringValue(body, 'newPassword')) {\n        errors.push('New Password is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        currentPassword: body.currentPassword,\n        newPassword: body.newPassword\n    }\n};\n\nexport interface UserRequestPasswordResetRequest {\n    email: string;\n};\n\nexport const mapToUserRequestPasswordResetRequest = (body: any): UserRequestPasswordResetRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'email')) {\n        errors.push('Email is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        email: body.email\n    }\n};\n\nexport interface UserResetPasswordResetRequest {\n    token: string;\n    newPassword: string;\n};\n\nexport const mapToUserResetPasswordResetRequest = (body: any): UserResetPasswordResetRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'token')) {\n        errors.push('Token is required.');\n    }\n\n    if (!keyHasStringValue(body, 'newPassword')) {\n        errors.push('New Password is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        token: body.token,\n        newPassword: body.newPassword\n    }\n};\n\nexport interface UserRequestUsernameRequest {\n    email: string;\n};\n\nexport const mapToUserRequestUsernameRequest = (body: any): UserRequestUsernameRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'email')) {\n        errors.push('Email is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        email: body.email\n    }\n};\n"],
  "mappings": "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",
  "names": ["ValidationError"]
}
