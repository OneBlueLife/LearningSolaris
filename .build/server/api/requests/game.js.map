{
  "version": 3,
  "sources": ["../../../../server/api/requests/game.ts"],
  "sourcesContent": ["import ValidationError from \"../../errors/validation\";\nimport { DBObjectId } from \"../../services/types/DBObjectId\";\nimport { keyHasBooleanValue, keyHasNumberValue, keyHasStringValue } from \"./helpers\";\n\nexport interface GameCreateGameRequest {\n    // TODO\n};\n\nexport interface GameJoinGameRequest {\n    playerId: DBObjectId;\n    alias: string;\n    avatar: number;\n    password: string;\n};\n\nexport const mapToGameJoinGameRequest = (body: any): GameJoinGameRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'playerId')) {\n        errors.push('Player ID is required.');\n    }\n\n    if (!keyHasStringValue(body, 'alias')) {\n        errors.push('Alias is required.');\n    }\n\n    if (!keyHasNumberValue(body, 'avatar')) {\n        errors.push('Avatar is required.');\n    }\n\n    // TODO: Password?\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    body.avatar = +body.avatar;\n    \n    return {\n        playerId: body.playerId,\n        alias: body.alias,\n        avatar: body.avatar,\n        password: body.password\n    }\n};\n\nexport interface GameSaveNotesRequest {\n    notes: string;\n};\n\nexport const mapToGameSaveNotesRequest = (body: any): GameSaveNotesRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasStringValue(body, 'notes', 0, 2000)) {\n        errors.push('Notes is required and must not be greater than 2000 characters.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        notes: body.notes\n    }\n};\n\nexport interface GameConcedeDefeatRequest {\n    openSlot: boolean;\n}\n\nexport const mapToGameConcedeDefeatRequest = (body: any): GameConcedeDefeatRequest => {\n    let errors: string[] = [];\n\n    if (!keyHasBooleanValue(body, 'openSlot')) {\n        errors.push('Open Slot is required.');\n    }\n\n    if (errors.length) {\n        throw new ValidationError(errors);\n    }\n\n    return {\n        openSlot: body.openSlot\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA4B;AAE5B,qBAAyE;AAIxE;AAOA;AAEM,MAAM,2BAA2B,CAAC,SAAmC;AACxE,MAAI,SAAmB,CAAC;AAExB,MAAI,KAAC,kCAAkB,MAAM,UAAU,GAAG;AACtC,WAAO,KAAK,wBAAwB;AAAA,EACxC;AAEA,MAAI,KAAC,kCAAkB,MAAM,OAAO,GAAG;AACnC,WAAO,KAAK,oBAAoB;AAAA,EACpC;AAEA,MAAI,KAAC,kCAAkB,MAAM,QAAQ,GAAG;AACpC,WAAO,KAAK,qBAAqB;AAAA,EACrC;AAIA,MAAI,OAAO,QAAQ;AACf,UAAM,IAAI,kBAAAA,QAAgB,MAAM;AAAA,EACpC;AAEA,OAAK,SAAS,CAAC,KAAK;AAEpB,SAAO;AAAA,IACH,UAAU,KAAK;AAAA,IACf,OAAO,KAAK;AAAA,IACZ,QAAQ,KAAK;AAAA,IACb,UAAU,KAAK;AAAA,EACnB;AACJ;AAIC;AAEM,MAAM,4BAA4B,CAAC,SAAoC;AAC1E,MAAI,SAAmB,CAAC;AAExB,MAAI,KAAC,kCAAkB,MAAM,SAAS,GAAG,GAAI,GAAG;AAC5C,WAAO,KAAK,iEAAiE;AAAA,EACjF;AAEA,MAAI,OAAO,QAAQ;AACf,UAAM,IAAI,kBAAAA,QAAgB,MAAM;AAAA,EACpC;AAEA,SAAO;AAAA,IACH,OAAO,KAAK;AAAA,EAChB;AACJ;AAMO,MAAM,gCAAgC,CAAC,SAAwC;AAClF,MAAI,SAAmB,CAAC;AAExB,MAAI,KAAC,mCAAmB,MAAM,UAAU,GAAG;AACvC,WAAO,KAAK,wBAAwB;AAAA,EACxC;AAEA,MAAI,OAAO,QAAQ;AACf,UAAM,IAAI,kBAAAA,QAAgB,MAAM;AAAA,EACpC;AAEA,SAAO;AAAA,IACH,UAAU,KAAK;AAAA,EACnB;AACJ;",
  "names": ["ValidationError"]
}
