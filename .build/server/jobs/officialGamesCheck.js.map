{
  "version": 3,
  "sources": ["../../../server/jobs/officialGamesCheck.ts"],
  "sourcesContent": ["import { DependencyContainer } from \"../services/types/DependencyContainer\";\n\nconst officialGameSettings = [\n    require('../config/game/settings/official/newPlayer'),\n    require('../config/game/settings/official/standard'),\n    require('../config/game/settings/official/32player'), // 32 player games are reserved only for official games.\n    require('../config/game/settings/official/turnBased'),\n    require('../config/game/settings/official/1v1'),\n    require('../config/game/settings/official/1v1turnBased'),\n];\n\nconst specialGameSettings = [\n    require('../config/game/settings/official/special_dark'),\n    require('../config/game/settings/official/special_fog'),\n    require('../config/game/settings/official/special_battleRoyale'),\n    require('../config/game/settings/official/special_orbital'),\n    require('../config/game/settings/official/special_ultraDark'),\n    require('../config/game/settings/official/special_homeStar'),\n    require('../config/game/settings/official/special_homeStarElimination'),\n    require('../config/game/settings/official/special_anonymous'),\n    require('../config/game/settings/official/special_kingOfTheHill'),\n    require('../config/game/settings/official/special_tinyGalaxy'),\n    require('../config/game/settings/official/special_freeForAll'),\n    require('../config/game/settings/official/special_arcade')\n];\n\nexport default (container: DependencyContainer) => {\n\n    return {\n\n        async handler(job, done) {\n            // Check if there is an official game with the settings game name which\n            // is currently waiting for players.\n            let games = await container.gameListService.listOfficialGames();\n\n            for (let i = 0; i < officialGameSettings.length; i++) {\n                let settings = officialGameSettings[i];\n                let existing = games.find(x => x.settings.general.type === settings.general.type);\n\n                if (!existing) {\n                    console.log(`Could not find game [${settings.general.type}], creating it now...`);\n            \n                    try {\n                        let newGame = await container.gameCreateService.create(settings);\n        \n                        console.log(`[${newGame.settings.general.name}] game created.`);\n                    } catch (e) {\n                        console.error(e);\n                    }\n                }\n            }\n\n            // Check to see if there is at least 1 special game.\n            // If there isn't one active, then pick a random one and create it.\n            const specialGameTypes = specialGameSettings.map(x => x.general.type);\n            const hasSpecialGame = games.find(x => specialGameTypes.includes(x.settings.general.type)) != null;\n\n            if (!hasSpecialGame) {\n                console.log(`Could not find special game, creating one now...`);\n\n                let settings = specialGameSettings[container.randomService.getRandomNumber(specialGameSettings.length - 1)];\n\n                try {\n                    let newGame = await container.gameCreateService.create(settings);\n    \n                    console.log(`[${newGame.settings.general.name}] special game created.`);\n                } catch (e) {\n                    console.error(e);\n                }\n            }\n\n            done();\n        }\n\n    };\n\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,MAAM,uBAAuB;AAAA,EACzB,QAAQ,4CAA4C;AAAA,EACpD,QAAQ,2CAA2C;AAAA,EACnD,QAAQ,2CAA2C;AAAA,EACnD,QAAQ,4CAA4C;AAAA,EACpD,QAAQ,sCAAsC;AAAA,EAC9C,QAAQ,+CAA+C;AAC3D;AAEA,MAAM,sBAAsB;AAAA,EACxB,QAAQ,+CAA+C;AAAA,EACvD,QAAQ,8CAA8C;AAAA,EACtD,QAAQ,uDAAuD;AAAA,EAC/D,QAAQ,kDAAkD;AAAA,EAC1D,QAAQ,oDAAoD;AAAA,EAC5D,QAAQ,mDAAmD;AAAA,EAC3D,QAAQ,8DAA8D;AAAA,EACtE,QAAQ,oDAAoD;AAAA,EAC5D,QAAQ,wDAAwD;AAAA,EAChE,QAAQ,qDAAqD;AAAA,EAC7D,QAAQ,qDAAqD;AAAA,EAC7D,QAAQ,iDAAiD;AAC7D;AAEA,IAAO,6BAAQ,CAAC,cAAmC;AAE/C,SAAO;AAAA,IAEH,MAAM,QAAQ,KAAK,MAAM;AAGrB,UAAI,QAAQ,MAAM,UAAU,gBAAgB,kBAAkB;AAE9D,eAAS,IAAI,GAAG,IAAI,qBAAqB,QAAQ,KAAK;AAClD,YAAI,WAAW,qBAAqB;AACpC,YAAI,WAAW,MAAM,KAAK,OAAK,EAAE,SAAS,QAAQ,SAAS,SAAS,QAAQ,IAAI;AAEhF,YAAI,CAAC,UAAU;AACX,kBAAQ,IAAI,wBAAwB,SAAS,QAAQ,2BAA2B;AAEhF,cAAI;AACA,gBAAI,UAAU,MAAM,UAAU,kBAAkB,OAAO,QAAQ;AAE/D,oBAAQ,IAAI,IAAI,QAAQ,SAAS,QAAQ,qBAAqB;AAAA,UAClE,SAAS,GAAP;AACE,oBAAQ,MAAM,CAAC;AAAA,UACnB;AAAA,QACJ;AAAA,MACJ;AAIA,YAAM,mBAAmB,oBAAoB,IAAI,OAAK,EAAE,QAAQ,IAAI;AACpE,YAAM,iBAAiB,MAAM,KAAK,OAAK,iBAAiB,SAAS,EAAE,SAAS,QAAQ,IAAI,CAAC,KAAK;AAE9F,UAAI,CAAC,gBAAgB;AACjB,gBAAQ,IAAI,kDAAkD;AAE9D,YAAI,WAAW,oBAAoB,UAAU,cAAc,gBAAgB,oBAAoB,SAAS,CAAC;AAEzG,YAAI;AACA,cAAI,UAAU,MAAM,UAAU,kBAAkB,OAAO,QAAQ;AAE/D,kBAAQ,IAAI,IAAI,QAAQ,SAAS,QAAQ,6BAA6B;AAAA,QAC1E,SAAS,GAAP;AACE,kBAAQ,MAAM,CAAC;AAAA,QACnB;AAAA,MACJ;AAEA,WAAK;AAAA,IACT;AAAA,EAEJ;AAEJ;",
  "names": []
}
